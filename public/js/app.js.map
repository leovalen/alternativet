{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\n/*\n * Copyright 2012-2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define, location) {\n\t'use strict';\n\n\tvar undef;\n\n\tdefine(function (require) {\n\n\t\tvar mixin, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;\n\n\t\tmixin = require('./util/mixin');\n\n\t\turlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?(\\/[^?#]*)?(\\?[^#]*)?(#\\S*)?/i;\n\t\tabsoluteUrlRE = /^([a-z][a-z0-9\\-\\+\\.]*:\\/\\/|\\/)/i;\n\t\tfullyQualifiedUrlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?\\//i;\n\n\t\t/**\n\t\t * Apply params to the template to create a URL.\n\t\t *\n\t\t * Parameters that are not applied directly to the template, are appended\n\t\t * to the URL as query string parameters.\n\t\t *\n\t\t * @param {string} template the URI template\n\t\t * @param {Object} params parameters to apply to the template\n\t\t * @return {string} the resulting URL\n\t\t */\n\t\tfunction buildUrl(template, params) {\n\t\t\t// internal builder to convert template with params.\n\t\t\tvar url, name, queryStringParams, re;\n\n\t\t\turl = template;\n\t\t\tqueryStringParams = {};\n\n\t\t\tif (params) {\n\t\t\t\tfor (name in params) {\n\t\t\t\t\t/*jshint forin:false */\n\t\t\t\t\tre = new RegExp('\\\\{' + name + '\\\\}');\n\t\t\t\t\tif (re.test(url)) {\n\t\t\t\t\t\turl = url.replace(re, encodeURIComponent(params[name]), 'g');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tqueryStringParams[name] = params[name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (name in queryStringParams) {\n\t\t\t\t\turl += url.indexOf('?') === -1 ? '?' : '&';\n\t\t\t\t\turl += encodeURIComponent(name);\n\t\t\t\t\tif (queryStringParams[name] !== null && queryStringParams[name] !== undefined) {\n\t\t\t\t\t\turl += '=';\n\t\t\t\t\t\turl += encodeURIComponent(queryStringParams[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\n\t\tfunction startsWith(str, test) {\n\t\t\treturn str.indexOf(test) === 0;\n\t\t}\n\n\t\t/**\n\t\t * Create a new URL Builder\n\t\t *\n\t\t * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder\n\t\t * @param {Object} [params] base parameters\n\t\t * @constructor\n\t\t */\n\t\tfunction UrlBuilder(template, params) {\n\t\t\tif (!(this instanceof UrlBuilder)) {\n\t\t\t\t// invoke as a constructor\n\t\t\t\treturn new UrlBuilder(template, params);\n\t\t\t}\n\n\t\t\tif (template instanceof UrlBuilder) {\n\t\t\t\tthis._template = template.template;\n\t\t\t\tthis._params = mixin({}, this._params, params);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._template = (template || '').toString();\n\t\t\t\tthis._params = params || {};\n\t\t\t}\n\t\t}\n\n\t\tUrlBuilder.prototype = {\n\n\t\t\t/**\n\t\t\t * Create a new UrlBuilder instance that extends the current builder.\n\t\t\t * The current builder is unmodified.\n\t\t\t *\n\t\t\t * @param {string} [template] URL template to append to the current template\n\t\t\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t\t\t * @return {UrlBuilder} the new builder\n\t\t\t */\n\t\t\tappend: function (template,  params) {\n\t\t\t\t// TODO consider query strings and fragments\n\t\t\t\treturn new UrlBuilder(this._template + template, mixin({}, this._params, params));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Create a new UrlBuilder with a fully qualified URL based on the\n\t\t\t * window's location or base href and the current templates relative URL.\n\t\t\t *\n\t\t\t * Path variables are preserved.\n\t\t\t *\n\t\t\t * *Browser only*\n\t\t\t *\n\t\t\t * @return {UrlBuilder} the fully qualified URL template\n\t\t\t */\n\t\t\tfullyQualify: function () {\n\t\t\t\tif (!location) { return this; }\n\t\t\t\tif (this.isFullyQualified()) { return this; }\n\n\t\t\t\tvar template = this._template;\n\n\t\t\t\tif (startsWith(template, '//')) {\n\t\t\t\t\ttemplate = origin.protocol + template;\n\t\t\t\t}\n\t\t\t\telse if (startsWith(template, '/')) {\n\t\t\t\t\ttemplate = origin.origin + template;\n\t\t\t\t}\n\t\t\t\telse if (!this.isAbsolute()) {\n\t\t\t\t\ttemplate = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);\n\t\t\t\t}\n\n\t\t\t\tif (template.indexOf('/', 8) === -1) {\n\t\t\t\t\t// default the pathname to '/'\n\t\t\t\t\ttemplate = template + '/';\n\t\t\t\t}\n\n\t\t\t\treturn new UrlBuilder(template, this._params);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * True if the URL is absolute\n\t\t\t *\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tisAbsolute: function () {\n\t\t\t\treturn absoluteUrlRE.test(this.build());\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * True if the URL is fully qualified\n\t\t\t *\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tisFullyQualified: function () {\n\t\t\t\treturn fullyQualifiedUrlRE.test(this.build());\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * True if the URL is cross origin. The protocol, host and port must not be\n\t\t\t * the same in order to be cross origin,\n\t\t\t *\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tisCrossOrigin: function () {\n\t\t\t\tif (!origin) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tvar url = this.parts();\n\t\t\t\treturn url.protocol !== origin.protocol ||\n\t\t\t\t       url.hostname !== origin.hostname ||\n\t\t\t\t       url.port !== origin.port;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Split a URL into its consituent parts following the naming convention of\n\t\t\t * 'window.location'. One difference is that the port will contain the\n\t\t\t * protocol default if not specified.\n\t\t\t *\n\t\t\t * @see https://developer.mozilla.org/en-US/docs/DOM/window.location\n\t\t\t *\n\t\t\t * @returns {Object} a 'window.location'-like object\n\t\t\t */\n\t\t\tparts: function () {\n\t\t\t\t/*jshint maxcomplexity:20 */\n\t\t\t\tvar url, parts;\n\t\t\t\turl = this.fullyQualify().build().match(urlRE);\n\t\t\t\tparts = {\n\t\t\t\t\thref: url[0],\n\t\t\t\t\tprotocol: url[1],\n\t\t\t\t\thost: url[3] || '',\n\t\t\t\t\thostname: url[4] || '',\n\t\t\t\t\tport: url[6],\n\t\t\t\t\tpathname: url[7] || '',\n\t\t\t\t\tsearch: url[8] || '',\n\t\t\t\t\thash: url[9] || ''\n\t\t\t\t};\n\t\t\t\tparts.origin = parts.protocol + '//' + parts.host;\n\t\t\t\tparts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');\n\t\t\t\treturn parts;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Expand the template replacing path variables with parameters\n\t\t\t *\n\t\t\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t\t\t * @return {string} the expanded URL\n\t\t\t */\n\t\t\tbuild: function (params) {\n\t\t\t\treturn buildUrl(this._template, mixin({}, this._params, params));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @see build\n\t\t\t */\n\t\t\ttoString: function () {\n\t\t\t\treturn this.build();\n\t\t\t}\n\n\t\t};\n\n\t\torigin = location ? new UrlBuilder(location.href).parts() : undef;\n\n\t\treturn UrlBuilder;\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); },\n\ttypeof window !== 'undefined' ? window.location : void 0\n\t// Boilerplate for AMD and Node\n));\n\n},{\"./util/mixin\":22}],3:[function(require,module,exports){\n/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar rest = require('./client/default'),\n\t\t    browser = require('./client/xhr');\n\n\t\trest.setPlatformDefaultClient(browser);\n\n\t\treturn rest;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"./client/default\":5,\"./client/xhr\":6}],4:[function(require,module,exports){\n/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\t/**\n\t\t * Add common helper methods to a client impl\n\t\t *\n\t\t * @param {function} impl the client implementation\n\t\t * @param {Client} [target] target of this client, used when wrapping other clients\n\t\t * @returns {Client} the client impl with additional methods\n\t\t */\n\t\treturn function client(impl, target) {\n\n\t\t\tif (target) {\n\n\t\t\t\t/**\n\t\t\t\t * @returns {Client} the target client\n\t\t\t\t */\n\t\t\t\timpl.skip = function skip() {\n\t\t\t\t\treturn target;\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Allow a client to easily be wrapped by an interceptor\n\t\t\t *\n\t\t\t * @param {Interceptor} interceptor the interceptor to wrap this client with\n\t\t\t * @param [config] configuration for the interceptor\n\t\t\t * @returns {Client} the newly wrapped client\n\t\t\t */\n\t\t\timpl.wrap = function wrap(interceptor, config) {\n\t\t\t\treturn interceptor(impl, config);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\timpl.chain = function chain() {\n\t\t\t\tif (typeof console !== 'undefined') {\n\t\t\t\t\tconsole.log('rest.js: client.chain() is deprecated, use client.wrap() instead');\n\t\t\t\t}\n\n\t\t\t\treturn impl.wrap.apply(this, arguments);\n\t\t\t};\n\n\t\t\treturn impl;\n\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],5:[function(require,module,exports){\n/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tvar undef;\n\n\tdefine(function (require) {\n\n\t\t/**\n\t\t * Plain JS Object containing properties that represent an HTTP request.\n\t\t *\n\t\t * Depending on the capabilities of the underlying client, a request\n\t\t * may be cancelable. If a request may be canceled, the client will add\n\t\t * a canceled flag and cancel function to the request object. Canceling\n\t\t * the request will put the response into an error state.\n\t\t *\n\t\t * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\n\t\t * @field {string|UrlBuilder} [path=''] path template with optional path variables\n\t\t * @field {Object} [params] parameters for the path template and query string\n\t\t * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\n\t\t * @field [entity] the HTTP entity, common for POST or PUT requests\n\t\t * @field {boolean} [canceled] true if the request has been canceled, set by the client\n\t\t * @field {Function} [cancel] cancels the request if invoked, provided by the client\n\t\t * @field {Client} [originator] the client that first handled this request, provided by the interceptor\n\t\t *\n\t\t * @class Request\n\t\t */\n\n\t\t/**\n\t\t * Plain JS Object containing properties that represent an HTTP response\n\t\t *\n\t\t * @field {Object} [request] the request object as received by the root client\n\t\t * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\n\t\t * @field {number} [status.code] status code of the response (i.e. 200, 404)\n\t\t * @field {string} [status.text] status phrase of the response\n\t\t * @field {Object] [headers] response headers hash of normalized name, value pairs\n\t\t * @field [entity] the response body\n\t\t *\n\t\t * @class Response\n\t\t */\n\n\t\t/**\n\t\t * HTTP client particularly suited for RESTful operations.\n\t\t *\n\t\t * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\n\t\t *\n\t\t * @param {Request} the HTTP request\n\t\t * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\n\t\t *\n\t\t * @class Client\n\t\t */\n\n\t\t /**\n\t\t  * Extended when.js Promises/A+ promise with HTTP specific helpers\n\t\t  *q\n\t\t  * @method entity promise for the HTTP entity\n\t\t  * @method status promise for the HTTP status code\n\t\t  * @method headers promise for the HTTP response headers\n\t\t  * @method header promise for a specific HTTP response header\n\t\t  *\n\t\t  * @class ResponsePromise\n\t\t  * @extends Promise\n\t\t  */\n\n\t\tvar client, target, platformDefault;\n\n\t\tclient = require('../client');\n\n\t\t/**\n\t\t * Make a request with the default client\n\t\t * @param {Request} the HTTP request\n\t\t * @returns {Promise<Response>} a promise the resolves to the HTTP response\n\t\t */\n\t\tfunction defaultClient() {\n\t\t\treturn target.apply(undef, arguments);\n\t\t}\n\n\t\t/**\n\t\t * Change the default client\n\t\t * @param {Client} client the new default client\n\t\t */\n\t\tdefaultClient.setDefaultClient = function setDefaultClient(client) {\n\t\t\ttarget = client;\n\t\t};\n\n\t\t/**\n\t\t * Obtain a direct reference to the current default client\n\t\t * @returns {Client} the default client\n\t\t */\n\t\tdefaultClient.getDefaultClient = function getDefaultClient() {\n\t\t\treturn target;\n\t\t};\n\n\t\t/**\n\t\t * Reset the default client to the platform default\n\t\t */\n\t\tdefaultClient.resetDefaultClient = function resetDefaultClient() {\n\t\t\ttarget = platformDefault;\n\t\t};\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdefaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\n\t\t\tif (platformDefault) {\n\t\t\t\tthrow new Error('Unable to redefine platformDefaultClient');\n\t\t\t}\n\t\t\ttarget = platformDefault = client;\n\t\t};\n\n\t\treturn client(defaultClient);\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../client\":4}],6:[function(require,module,exports){\n/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define, global) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar when, UrlBuilder, normalizeHeaderName, responsePromise, client, headerSplitRE;\n\n\t\twhen = require('when');\n\t\tUrlBuilder = require('../UrlBuilder');\n\t\tnormalizeHeaderName = require('../util/normalizeHeaderName');\n\t\tresponsePromise = require('../util/responsePromise');\n\t\tclient = require('../client');\n\n\t\t// according to the spec, the line break is '\\r\\n', but doesn't hold true in practice\n\t\theaderSplitRE = /[\\r|\\n]+/;\n\n\t\tfunction parseHeaders(raw) {\n\t\t\t// Note: Set-Cookie will be removed by the browser\n\t\t\tvar headers = {};\n\n\t\t\tif (!raw) { return headers; }\n\n\t\t\traw.trim().split(headerSplitRE).forEach(function (header) {\n\t\t\t\tvar boundary, name, value;\n\t\t\t\tboundary = header.indexOf(':');\n\t\t\t\tname = normalizeHeaderName(header.substring(0, boundary).trim());\n\t\t\t\tvalue = header.substring(boundary + 1).trim();\n\t\t\t\tif (headers[name]) {\n\t\t\t\t\tif (Array.isArray(headers[name])) {\n\t\t\t\t\t\t// add to an existing array\n\t\t\t\t\t\theaders[name].push(value);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// convert single value to array\n\t\t\t\t\t\theaders[name] = [headers[name], value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// new, single value\n\t\t\t\t\theaders[name] = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn headers;\n\t\t}\n\n\t\tfunction safeMixin(target, source) {\n\t\t\tObject.keys(source || {}).forEach(function (prop) {\n\t\t\t\t// make sure the property already exists as\n\t\t\t\t// IE 6 will blow up if we add a new prop\n\t\t\t\tif (source.hasOwnProperty(prop) && prop in target) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttarget[prop] = source[prop];\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// ignore, expected for some properties at some points in the request lifecycle\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn client(function xhr(request) {\n\t\t\treturn responsePromise.promise(function (resolve, reject) {\n\t\t\t\t/*jshint maxcomplexity:20 */\n\n\t\t\t\tvar client, method, url, headers, entity, headerName, response, XMLHttpRequest;\n\n\t\t\t\trequest = typeof request === 'string' ? { path: request } : request || {};\n\t\t\t\tresponse = { request: request };\n\n\t\t\t\tif (request.canceled) {\n\t\t\t\t\tresponse.error = 'precanceled';\n\t\t\t\t\treject(response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tXMLHttpRequest = request.engine || global.XMLHttpRequest;\n\t\t\t\tif (!XMLHttpRequest) {\n\t\t\t\t\treject({ request: request, error: 'xhr-not-available' });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tentity = request.entity;\n\t\t\t\trequest.method = request.method || (entity ? 'POST' : 'GET');\n\t\t\t\tmethod = request.method;\n\t\t\t\turl = new UrlBuilder(request.path || '', request.params).build();\n\n\t\t\t\ttry {\n\t\t\t\t\tclient = response.raw = new XMLHttpRequest();\n\n\t\t\t\t\t// mixin extra request properties before and after opening the request as some properties require being set at different phases of the request\n\t\t\t\t\tsafeMixin(client, request.mixin);\n\t\t\t\t\tclient.open(method, url, true);\n\t\t\t\t\tsafeMixin(client, request.mixin);\n\n\t\t\t\t\theaders = request.headers;\n\t\t\t\t\tfor (headerName in headers) {\n\t\t\t\t\t\t/*jshint forin:false */\n\t\t\t\t\t\tif (headerName === 'Content-Type' && headers[headerName] === 'multipart/form-data') {\n\t\t\t\t\t\t\t// XMLHttpRequest generates its own Content-Type header with the\n\t\t\t\t\t\t\t// appropriate multipart boundary when sending multipart/form-data.\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclient.setRequestHeader(headerName, headers[headerName]);\n\t\t\t\t\t}\n\n\t\t\t\t\trequest.canceled = false;\n\t\t\t\t\trequest.cancel = function cancel() {\n\t\t\t\t\t\trequest.canceled = true;\n\t\t\t\t\t\tclient.abort();\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t};\n\n\t\t\t\t\tclient.onreadystatechange = function (/* e */) {\n\t\t\t\t\t\tif (request.canceled) { return; }\n\t\t\t\t\t\tif (client.readyState === (XMLHttpRequest.DONE || 4)) {\n\t\t\t\t\t\t\tresponse.status = {\n\t\t\t\t\t\t\t\tcode: client.status,\n\t\t\t\t\t\t\t\ttext: client.statusText\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tresponse.headers = parseHeaders(client.getAllResponseHeaders());\n\t\t\t\t\t\t\tresponse.entity = client.responseText;\n\n\t\t\t\t\t\t\tif (response.status.code > 0) {\n\t\t\t\t\t\t\t\t// check status code as readystatechange fires before error event\n\t\t\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// give the error callback a chance to fire before resolving\n\t\t\t\t\t\t\t\t// requests for file:// URLs do not have a status code\n\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tclient.onerror = function (/* e */) {\n\t\t\t\t\t\t\tresponse.error = 'loaderror';\n\t\t\t\t\t\t\treject(response);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t// IE 6 will not support error handling\n\t\t\t\t\t}\n\n\t\t\t\t\tclient.send(entity);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tresponse.error = 'loaderror';\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\n\t\t\t});\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); },\n\ttypeof window !== 'undefined' ? window : void 0\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../UrlBuilder\":2,\"../client\":4,\"../util/normalizeHeaderName\":23,\"../util/responsePromise\":24,\"when\":114}],7:[function(require,module,exports){\n/*\n * Copyright 2012-2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar defaultClient, mixin, responsePromise, client, when;\n\n\t\tdefaultClient = require('./client/default');\n\t\tmixin = require('./util/mixin');\n\t\tresponsePromise = require('./util/responsePromise');\n\t\tclient = require('./client');\n\t\twhen = require('when');\n\n\t\t/**\n\t\t * Interceptors have the ability to intercept the request and/org response\n\t\t * objects.  They may augment, prune, transform or replace the\n\t\t * request/response as needed.  Clients may be composed by wrapping\n\t\t * together multiple interceptors.\n\t\t *\n\t\t * Configured interceptors are functional in nature.  Wrapping a client in\n\t\t * an interceptor will not affect the client, merely the data that flows in\n\t\t * and out of that client.  A common configuration can be created once and\n\t\t * shared; specialization can be created by further wrapping that client\n\t\t * with custom interceptors.\n\t\t *\n\t\t * @param {Client} [target] client to wrap\n\t\t * @param {Object} [config] configuration for the interceptor, properties will be specific to the interceptor implementation\n\t\t * @returns {Client} A client wrapped with the interceptor\n\t\t *\n\t\t * @class Interceptor\n\t\t */\n\n\t\tfunction defaultInitHandler(config) {\n\t\t\treturn config;\n\t\t}\n\n\t\tfunction defaultRequestHandler(request /*, config, meta */) {\n\t\t\treturn request;\n\t\t}\n\n\t\tfunction defaultResponseHandler(response /*, config, meta */) {\n\t\t\treturn response;\n\t\t}\n\n\t\tfunction race(promisesOrValues) {\n\t\t\t// this function is different than when.any as the first to reject also wins\n\t\t\treturn when.promise(function (resolve, reject) {\n\t\t\t\tpromisesOrValues.forEach(function (promiseOrValue) {\n\t\t\t\t\twhen(promiseOrValue, resolve, reject);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Alternate return type for the request handler that allows for more complex interactions.\n\t\t *\n\t\t * @param properties.request the traditional request return object\n\t\t * @param {Promise} [properties.abort] promise that resolves if/when the request is aborted\n\t\t * @param {Client} [properties.client] override the defined client with an alternate client\n\t\t * @param [properties.response] response for the request, short circuit the request\n\t\t */\n\t\tfunction ComplexRequest(properties) {\n\t\t\tif (!(this instanceof ComplexRequest)) {\n\t\t\t\t// in case users forget the 'new' don't mix into the interceptor\n\t\t\t\treturn new ComplexRequest(properties);\n\t\t\t}\n\t\t\tmixin(this, properties);\n\t\t}\n\n\t\t/**\n\t\t * Create a new interceptor for the provided handlers.\n\t\t *\n\t\t * @param {Function} [handlers.init] one time intialization, must return the config object\n\t\t * @param {Function} [handlers.request] request handler\n\t\t * @param {Function} [handlers.response] response handler regardless of error state\n\t\t * @param {Function} [handlers.success] response handler when the request is not in error\n\t\t * @param {Function} [handlers.error] response handler when the request is in error, may be used to 'unreject' an error state\n\t\t * @param {Function} [handlers.client] the client to use if otherwise not specified, defaults to platform default client\n\t\t *\n\t\t * @returns {Interceptor}\n\t\t */\n\t\tfunction interceptor(handlers) {\n\n\t\t\tvar initHandler, requestHandler, successResponseHandler, errorResponseHandler;\n\n\t\t\thandlers = handlers || {};\n\n\t\t\tinitHandler            = handlers.init    || defaultInitHandler;\n\t\t\trequestHandler         = handlers.request || defaultRequestHandler;\n\t\t\tsuccessResponseHandler = handlers.success || handlers.response || defaultResponseHandler;\n\t\t\terrorResponseHandler   = handlers.error   || function () {\n\t\t\t\t// Propagate the rejection, with the result of the handler\n\t\t\t\treturn when((handlers.response || defaultResponseHandler).apply(this, arguments), when.reject, when.reject);\n\t\t\t};\n\n\t\t\treturn function (target, config) {\n\n\t\t\t\tif (typeof target === 'object') {\n\t\t\t\t\tconfig = target;\n\t\t\t\t}\n\t\t\t\tif (typeof target !== 'function') {\n\t\t\t\t\ttarget = handlers.client || defaultClient;\n\t\t\t\t}\n\n\t\t\t\tconfig = initHandler(config || {});\n\n\t\t\t\tfunction interceptedClient(request) {\n\t\t\t\t\tvar context, meta;\n\t\t\t\t\tcontext = {};\n\t\t\t\t\tmeta = { 'arguments': Array.prototype.slice.call(arguments), client: interceptedClient };\n\t\t\t\t\trequest = typeof request === 'string' ? { path: request } : request || {};\n\t\t\t\t\trequest.originator = request.originator || interceptedClient;\n\t\t\t\t\treturn responsePromise(\n\t\t\t\t\t\trequestHandler.call(context, request, config, meta),\n\t\t\t\t\t\tfunction (request) {\n\t\t\t\t\t\t\tvar response, abort, next;\n\t\t\t\t\t\t\tnext = target;\n\t\t\t\t\t\t\tif (request instanceof ComplexRequest) {\n\t\t\t\t\t\t\t\t// unpack request\n\t\t\t\t\t\t\t\tabort = request.abort;\n\t\t\t\t\t\t\t\tnext = request.client || next;\n\t\t\t\t\t\t\t\tresponse = request.response;\n\t\t\t\t\t\t\t\t// normalize request, must be last\n\t\t\t\t\t\t\t\trequest = request.request;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponse = response || when(request, function (request) {\n\t\t\t\t\t\t\t\treturn when(\n\t\t\t\t\t\t\t\t\tnext(request),\n\t\t\t\t\t\t\t\t\tfunction (response) {\n\t\t\t\t\t\t\t\t\t\treturn successResponseHandler.call(context, response, config, meta);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfunction (response) {\n\t\t\t\t\t\t\t\t\t\treturn errorResponseHandler.call(context, response, config, meta);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn abort ? race([response, abort]) : response;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction (error) {\n\t\t\t\t\t\t\treturn when.reject({ request: request, error: error });\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn client(interceptedClient, target);\n\t\t\t};\n\t\t}\n\n\t\tinterceptor.ComplexRequest = ComplexRequest;\n\n\t\treturn interceptor;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"./client\":4,\"./client/default\":5,\"./util/mixin\":22,\"./util/responsePromise\":24,\"when\":114}],8:[function(require,module,exports){\n/*\n * Copyright 2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, mixinUtil, defaulter;\n\n\t\tinterceptor = require('../interceptor');\n\t\tmixinUtil = require('../util/mixin');\n\n\t\tdefaulter = (function () {\n\n\t\t\tfunction mixin(prop, target, defaults) {\n\t\t\t\tif (prop in target || prop in defaults) {\n\t\t\t\t\ttarget[prop] = mixinUtil({}, defaults[prop], target[prop]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction copy(prop, target, defaults) {\n\t\t\t\tif (prop in defaults && !(prop in target)) {\n\t\t\t\t\ttarget[prop] = defaults[prop];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar mappings = {\n\t\t\t\tmethod: copy,\n\t\t\t\tpath: copy,\n\t\t\t\tparams: mixin,\n\t\t\t\theaders: mixin,\n\t\t\t\tentity: copy,\n\t\t\t\tmixin: mixin\n\t\t\t};\n\n\t\t\treturn function (target, defaults) {\n\t\t\t\tfor (var prop in mappings) {\n\t\t\t\t\t/*jshint forin: false */\n\t\t\t\t\tmappings[prop](prop, target, defaults);\n\t\t\t\t}\n\t\t\t\treturn target;\n\t\t\t};\n\n\t\t}());\n\n\t\t/**\n\t\t * Provide default values for a request. These values will be applied to the\n\t\t * request if the request object does not already contain an explicit value.\n\t\t *\n\t\t * For 'params', 'headers', and 'mixin', individual values are mixed in with the\n\t\t * request's values. The result is a new object representiing the combined\n\t\t * request and config values. Neither input object is mutated.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {string} [config.method] the default method\n\t\t * @param {string} [config.path] the default path\n\t\t * @param {Object} [config.params] the default params, mixed with the request's existing params\n\t\t * @param {Object} [config.headers] the default headers, mixed with the request's existing headers\n\t\t * @param {Object} [config.mixin] the default \"mixins\" (http/https options), mixed with the request's existing \"mixins\"\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\trequest: function handleRequest(request, config) {\n\t\t\t\treturn defaulter(request, config);\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../interceptor\":7,\"../util/mixin\":22}],9:[function(require,module,exports){\n/*\n * Copyright 2012-2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, when;\n\n\t\tinterceptor = require('../interceptor');\n\t\twhen = require('when');\n\n\t\t/**\n\t\t * Rejects the response promise based on the status code.\n\t\t *\n\t\t * Codes greater than or equal to the provided value are rejected.  Default\n\t\t * value 400.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {number} [config.code=400] code to indicate a rejection\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\tinit: function (config) {\n\t\t\t\tconfig.code = config.code || 400;\n\t\t\t\treturn config;\n\t\t\t},\n\t\t\tresponse: function (response, config) {\n\t\t\t\tif (response.status && response.status.code >= config.code) {\n\t\t\t\t\treturn when.reject(response);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../interceptor\":7,\"when\":114}],10:[function(require,module,exports){\n/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, mime, registry, noopConverter, when;\n\n\t\tinterceptor = require('../interceptor');\n\t\tmime = require('../mime');\n\t\tregistry = require('../mime/registry');\n\t\twhen = require('when');\n\n\t\tnoopConverter = {\n\t\t\tread: function (obj) { return obj; },\n\t\t\twrite: function (obj) { return obj; }\n\t\t};\n\n\t\t/**\n\t\t * MIME type support for request and response entities.  Entities are\n\t\t * (de)serialized using the converter for the MIME type.\n\t\t *\n\t\t * Request entities are converted using the desired converter and the\n\t\t * 'Accept' request header prefers this MIME.\n\t\t *\n\t\t * Response entities are converted based on the Content-Type response header.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {string} [config.mime='text/plain'] MIME type to encode the request\n\t\t *   entity\n\t\t * @param {string} [config.accept] Accept header for the request\n\t\t * @param {Client} [config.client=<request.originator>] client passed to the\n\t\t *   converter, defaults to the client originating the request\n\t\t * @param {Registry} [config.registry] MIME registry, defaults to the root\n\t\t *   registry\n\t\t * @param {boolean} [config.permissive] Allow an unkown request MIME type\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\tinit: function (config) {\n\t\t\t\tconfig.registry = config.registry || registry;\n\t\t\t\treturn config;\n\t\t\t},\n\t\t\trequest: function (request, config) {\n\t\t\t\tvar type, headers;\n\n\t\t\t\theaders = request.headers || (request.headers = {});\n\t\t\t\ttype = mime.parse(headers['Content-Type'] = headers['Content-Type'] || config.mime || 'text/plain');\n\t\t\t\theaders.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';\n\n\t\t\t\tif (!('entity' in request)) {\n\t\t\t\t\treturn request;\n\t\t\t\t}\n\n\t\t\t\treturn config.registry.lookup(type).otherwise(function () {\n\t\t\t\t\t// failed to resolve converter\n\t\t\t\t\tif (config.permissive) {\n\t\t\t\t\t\treturn noopConverter;\n\t\t\t\t\t}\n\t\t\t\t\tthrow 'mime-unknown';\n\t\t\t\t}).then(function (converter) {\n\t\t\t\t\tvar client = config.client || request.originator;\n\n\t\t\t\t\treturn when.attempt(converter.write, request.entity, { client: client, request: request, mime: type, registry: config.registry })\n\t\t\t\t\t\t.otherwise(function() {\n\t\t\t\t\t\t\tthrow 'mime-serialization';\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function(entity) {\n\t\t\t\t\t\t\trequest.entity = entity;\n\t\t\t\t\t\t\treturn request;\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tresponse: function (response, config) {\n\t\t\t\tif (!(response.headers && response.headers['Content-Type'] && response.entity)) {\n\t\t\t\t\treturn response;\n\t\t\t\t}\n\n\t\t\t\tvar type = mime.parse(response.headers['Content-Type']);\n\n\t\t\t\treturn config.registry.lookup(type).otherwise(function () { return noopConverter; }).then(function (converter) {\n\t\t\t\t\tvar client = config.client || response.request && response.request.originator;\n\n\t\t\t\t\treturn when.attempt(converter.read, response.entity, { client: client, response: response, mime: type, registry: config.registry })\n\t\t\t\t\t\t.otherwise(function (e) {\n\t\t\t\t\t\t\tresponse.error = 'mime-deserialization';\n\t\t\t\t\t\t\tresponse.cause = e;\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function (entity) {\n\t\t\t\t\t\t\tresponse.entity = entity;\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../interceptor\":7,\"../mime\":13,\"../mime/registry\":14,\"when\":114}],11:[function(require,module,exports){\n/*\n * Copyright 2012-2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, UrlBuilder;\n\n\t\tinterceptor = require('../interceptor');\n\t\tUrlBuilder = require('../UrlBuilder');\n\n\t\tfunction startsWith(str, prefix) {\n\t\t\treturn str.indexOf(prefix) === 0;\n\t\t}\n\n\t\tfunction endsWith(str, suffix) {\n\t\t\treturn str.lastIndexOf(suffix) + suffix.length === str.length;\n\t\t}\n\n\t\t/**\n\t\t * Prefixes the request path with a common value.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {number} [config.prefix] path prefix\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\trequest: function (request, config) {\n\t\t\t\tvar path;\n\n\t\t\t\tif (config.prefix && !(new UrlBuilder(request.path).isFullyQualified())) {\n\t\t\t\t\tpath = config.prefix;\n\t\t\t\t\tif (request.path) {\n\t\t\t\t\t\tif (!endsWith(path, '/') && !startsWith(request.path, '/')) {\n\t\t\t\t\t\t\t// add missing '/' between path sections\n\t\t\t\t\t\t\tpath += '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpath += request.path;\n\t\t\t\t\t}\n\t\t\t\t\trequest.path = path;\n\t\t\t\t}\n\n\t\t\t\treturn request;\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../UrlBuilder\":2,\"../interceptor\":7}],12:[function(require,module,exports){\n/*\n * Copyright 2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, uriTemplate, mixin;\n\n\t\tinterceptor = require('../interceptor');\n\t\turiTemplate = require('../util/uriTemplate');\n\t\tmixin = require('../util/mixin');\n\n\t\t/**\n\t\t * Applies request params to the path as a URI Template\n\t\t *\n\t\t * Params are removed from the request object, as they have been consumed.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {Object} [config.params] default param values\n\t\t * @param {string} [config.template] default template\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\tinit: function (config) {\n\t\t\t\tconfig.params = config.params || {};\n\t\t\t\tconfig.template = config.template || '';\n\t\t\t\treturn config;\n\t\t\t},\n\t\t\trequest: function (request, config) {\n\t\t\t\tvar template, params;\n\n\t\t\t\ttemplate = request.path || config.template;\n\t\t\t\tparams = mixin({}, request.params, config.params);\n\n\t\t\t\trequest.path = uriTemplate.expand(template, params);\n\t\t\t\tdelete request.params;\n\n\t\t\t\treturn request;\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../interceptor\":7,\"../util/mixin\":22,\"../util/uriTemplate\":26}],13:[function(require,module,exports){\n/*\n* Copyright 2014 the original author or authors\n* @license MIT, see LICENSE.txt for details\n*\n* @author Scott Andrews\n*/\n\n(function (define) {\n\t'use strict';\n\n\tvar undef;\n\n\tdefine(function (/* require */) {\n\n\t\t/**\n\t\t * Parse a MIME type into it's constituent parts\n\t\t *\n\t\t * @param {string} mime MIME type to parse\n\t\t * @return {{\n\t\t *   {string} raw the original MIME type\n\t\t *   {string} type the type and subtype\n\t\t *   {string} [suffix] mime suffix, including the plus, if any\n\t\t *   {Object} params key/value pair of attributes\n\t\t * }}\n\t\t */\n\t\tfunction parse(mime) {\n\t\t\tvar params, type;\n\n\t\t\tparams = mime.split(';');\n\t\t\ttype = params[0].trim().split('+');\n\n\t\t\treturn {\n\t\t\t\traw: mime,\n\t\t\t\ttype: type[0],\n\t\t\t\tsuffix: type[1] ? '+' + type[1] : '',\n\t\t\t\tparams: params.slice(1).reduce(function (params, pair) {\n\t\t\t\t\tpair = pair.split('=');\n\t\t\t\t\tparams[pair[0].trim()] = pair[1] ? pair[1].trim() : undef;\n\t\t\t\t\treturn params;\n\t\t\t\t}, {})\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tparse: parse\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],14:[function(require,module,exports){\n/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar mime, when, registry;\n\n\t\tmime = require('../mime');\n\t\twhen = require('when');\n\n\t\tfunction Registry(mimes) {\n\n\t\t\t/**\n\t\t\t * Lookup the converter for a MIME type\n\t\t\t *\n\t\t\t * @param {string} type the MIME type\n\t\t\t * @return a promise for the converter\n\t\t\t */\n\t\t\tthis.lookup = function lookup(type) {\n\t\t\t\tvar parsed;\n\n\t\t\t\tparsed = typeof type === 'string' ? mime.parse(type) : type;\n\n\t\t\t\tif (mimes[parsed.raw]) {\n\t\t\t\t\treturn mimes[parsed.raw];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.type + parsed.suffix]) {\n\t\t\t\t\treturn mimes[parsed.type + parsed.suffix];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.type]) {\n\t\t\t\t\treturn mimes[parsed.type];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.suffix]) {\n\t\t\t\t\treturn mimes[parsed.suffix];\n\t\t\t\t}\n\n\t\t\t\treturn when.reject(new Error('Unable to locate converter for mime \"' + parsed.raw + '\"'));\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Create a late dispatched proxy to the target converter.\n\t\t\t *\n\t\t\t * Common when a converter is registered under multiple names and\n\t\t\t * should be kept in sync if updated.\n\t\t\t *\n\t\t\t * @param {string} type mime converter to dispatch to\n\t\t\t * @returns converter whose read/write methods target the desired mime converter\n\t\t\t */\n\t\t\tthis.delegate = function delegate(type) {\n\t\t\t\treturn {\n\t\t\t\t\tread: function () {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\t\t\treturn converter.read.apply(this, args);\n\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\twrite: function () {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\t\t\treturn converter.write.apply(this, args);\n\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t}.bind(this)\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Register a custom converter for a MIME type\n\t\t\t *\n\t\t\t * @param {string} type the MIME type\n\t\t\t * @param converter the converter for the MIME type\n\t\t\t * @return a promise for the converter\n\t\t\t */\n\t\t\tthis.register = function register(type, converter) {\n\t\t\t\tmimes[type] = when(converter);\n\t\t\t\treturn mimes[type];\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Create a child registry whoes registered converters remain local, while\n\t\t\t * able to lookup converters from its parent.\n\t\t\t *\n\t\t\t * @returns child MIME registry\n\t\t\t */\n\t\t\tthis.child = function child() {\n\t\t\t\treturn new Registry(Object.create(mimes));\n\t\t\t};\n\n\t\t}\n\n\t\tregistry = new Registry({});\n\n\t\t// include provided serializers\n\t\tregistry.register('application/hal', require('./type/application/hal'));\n\t\tregistry.register('application/json', require('./type/application/json'));\n\t\tregistry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));\n\t\tregistry.register('multipart/form-data', require('./type/multipart/form-data'));\n\t\tregistry.register('text/plain', require('./type/text/plain'));\n\n\t\tregistry.register('+json', registry.delegate('application/json'));\n\n\t\treturn registry;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../mime\":13,\"./type/application/hal\":15,\"./type/application/json\":16,\"./type/application/x-www-form-urlencoded\":17,\"./type/multipart/form-data\":18,\"./type/text/plain\":19,\"when\":114}],15:[function(require,module,exports){\n/*\n * Copyright 2013-2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar pathPrefix, template, find, lazyPromise, responsePromise, when;\n\n\t\tpathPrefix = require('../../../interceptor/pathPrefix');\n\t\ttemplate = require('../../../interceptor/template');\n\t\tfind = require('../../../util/find');\n\t\tlazyPromise = require('../../../util/lazyPromise');\n\t\tresponsePromise = require('../../../util/responsePromise');\n\t\twhen = require('when');\n\n\t\tfunction defineProperty(obj, name, value) {\n\t\t\tObject.defineProperty(obj, name, {\n\t\t\t\tvalue: value,\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\twriteable: true\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Hypertext Application Language serializer\n\t\t *\n\t\t * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06\n\t\t *\n\t\t * As the spec is still a draft, this implementation will be updated as the\n\t\t * spec evolves\n\t\t *\n\t\t * Objects are read as HAL indexing links and embedded objects on to the\n\t\t * resource. Objects are written as plain JSON.\n\t\t *\n\t\t * Embedded relationships are indexed onto the resource by the relationship\n\t\t * as a promise for the related resource.\n\t\t *\n\t\t * Links are indexed onto the resource as a lazy promise that will GET the\n\t\t * resource when a handler is first registered on the promise.\n\t\t *\n\t\t * A `requestFor` method is added to the entity to make a request for the\n\t\t * relationship.\n\t\t *\n\t\t * A `clientFor` method is added to the entity to get a full Client for a\n\t\t * relationship.\n\t\t *\n\t\t * The `_links` and `_embedded` properties on the resource are made\n\t\t * non-enumerable.\n\t\t */\n\t\treturn {\n\n\t\t\tread: function (str, opts) {\n\t\t\t\tvar client, console;\n\n\t\t\t\topts = opts || {};\n\t\t\t\tclient = opts.client;\n\t\t\t\tconsole = opts.console || console;\n\n\t\t\t\tfunction deprecationWarning(relationship, deprecation) {\n\t\t\t\t\tif (deprecation && console && console.warn || console.log) {\n\t\t\t\t\t\t(console.warn || console.log).call(console, 'Relationship \\'' + relationship + '\\' is deprecated, see ' + deprecation);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n\t\t\t\t\treturn when(converter.read(str, opts)).then(function (root) {\n\n\t\t\t\t\t\tfind.findProperties(root, '_embedded', function (embedded, resource, name) {\n\t\t\t\t\t\t\tObject.keys(embedded).forEach(function (relationship) {\n\t\t\t\t\t\t\t\tif (relationship in resource) { return; }\n\t\t\t\t\t\t\t\tvar related = responsePromise({\n\t\t\t\t\t\t\t\t\tentity: embedded[relationship]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdefineProperty(resource, relationship, related);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdefineProperty(resource, name, embedded);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfind.findProperties(root, '_links', function (links, resource, name) {\n\t\t\t\t\t\t\tObject.keys(links).forEach(function (relationship) {\n\t\t\t\t\t\t\t\tvar link = links[relationship];\n\t\t\t\t\t\t\t\tif (relationship in resource) { return; }\n\t\t\t\t\t\t\t\tdefineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {\n\t\t\t\t\t\t\t\t\tif (link.deprecation) { deprecationWarning(relationship, link.deprecation); }\n\t\t\t\t\t\t\t\t\tif (link.templated === true) {\n\t\t\t\t\t\t\t\t\t\treturn template(client)({ path: link.href });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn client({ path: link.href });\n\t\t\t\t\t\t\t\t})));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdefineProperty(resource, name, links);\n\t\t\t\t\t\t\tdefineProperty(resource, 'clientFor', function (relationship, clientOverride) {\n\t\t\t\t\t\t\t\tvar link = links[relationship];\n\t\t\t\t\t\t\t\tif (!link) {\n\t\t\t\t\t\t\t\t\tthrow new Error('Unknown relationship: ' + relationship);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.deprecation) { deprecationWarning(relationship, link.deprecation); }\n\t\t\t\t\t\t\t\tif (link.templated === true) {\n\t\t\t\t\t\t\t\t\treturn template(\n\t\t\t\t\t\t\t\t\t\tclientOverride || client,\n\t\t\t\t\t\t\t\t\t\t{ template: link.href }\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn pathPrefix(\n\t\t\t\t\t\t\t\t\tclientOverride || client,\n\t\t\t\t\t\t\t\t\t{ prefix: link.href }\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdefineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {\n\t\t\t\t\t\t\t\tvar client = this.clientFor(relationship, clientOverride);\n\t\t\t\t\t\t\t\treturn client(request);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn root;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t},\n\n\t\t\twrite: function (obj, opts) {\n\t\t\t\treturn opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n\t\t\t\t\treturn converter.write(obj, opts);\n\t\t\t\t});\n\t\t\t}\n\n\t\t};\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"../../../interceptor/pathPrefix\":11,\"../../../interceptor/template\":12,\"../../../util/find\":20,\"../../../util/lazyPromise\":21,\"../../../util/responsePromise\":24,\"when\":114}],16:[function(require,module,exports){\n/*\n * Copyright 2012-2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\t/**\n\t\t * Create a new JSON converter with custom reviver/replacer.\n\t\t *\n\t\t * The extended converter must be published to a MIME registry in order\n\t\t * to be used. The existing converter will not be modified.\n\t\t *\n\t\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\t\t *\n\t\t * @param {function} [reviver=undefined] custom JSON.parse reviver\n\t\t * @param {function|Array} [replacer=undefined] custom JSON.stringify replacer\n\t\t */\n\t\tfunction createConverter(reviver, replacer) {\n\t\t\treturn {\n\n\t\t\t\tread: function (str) {\n\t\t\t\t\treturn JSON.parse(str, reviver);\n\t\t\t\t},\n\n\t\t\t\twrite: function (obj) {\n\t\t\t\t\treturn JSON.stringify(obj, replacer);\n\t\t\t\t},\n\n\t\t\t\textend: createConverter\n\n\t\t\t};\n\t\t}\n\n\t\treturn createConverter();\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],17:[function(require,module,exports){\n/*\n * Copyright 2012 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\tvar encodedSpaceRE, urlEncodedSpaceRE;\n\n\t\tencodedSpaceRE = /%20/g;\n\t\turlEncodedSpaceRE = /\\+/g;\n\n\t\tfunction urlEncode(str) {\n\t\t\tstr = encodeURIComponent(str);\n\t\t\t// spec says space should be encoded as '+'\n\t\t\treturn str.replace(encodedSpaceRE, '+');\n\t\t}\n\n\t\tfunction urlDecode(str) {\n\t\t\t// spec says space should be encoded as '+'\n\t\t\tstr = str.replace(urlEncodedSpaceRE, ' ');\n\t\t\treturn decodeURIComponent(str);\n\t\t}\n\n\t\tfunction append(str, name, value) {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(function (value) {\n\t\t\t\t\tstr = append(str, name, value);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (str.length > 0) {\n\t\t\t\t\tstr += '&';\n\t\t\t\t}\n\t\t\t\tstr += urlEncode(name);\n\t\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\t\tstr += '=' + urlEncode(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\n\t\treturn {\n\n\t\t\tread: function (str) {\n\t\t\t\tvar obj = {};\n\t\t\t\tstr.split('&').forEach(function (entry) {\n\t\t\t\t\tvar pair, name, value;\n\t\t\t\t\tpair = entry.split('=');\n\t\t\t\t\tname = urlDecode(pair[0]);\n\t\t\t\t\tif (pair.length === 2) {\n\t\t\t\t\t\tvalue = urlDecode(pair[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (name in obj) {\n\t\t\t\t\t\tif (!Array.isArray(obj[name])) {\n\t\t\t\t\t\t\t// convert to an array, perserving currnent value\n\t\t\t\t\t\t\tobj[name] = [obj[name]];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj[name].push(value);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tobj[name] = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn obj;\n\t\t\t},\n\n\t\t\twrite: function (obj) {\n\t\t\t\tvar str = '';\n\t\t\t\tObject.keys(obj).forEach(function (name) {\n\t\t\t\t\tstr = append(str, name, obj[name]);\n\t\t\t\t});\n\t\t\t\treturn str;\n\t\t\t}\n\n\t\t};\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],18:[function(require,module,exports){\n/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Michael Jackson\n */\n\n/* global FormData, File, Blob */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\tfunction isFormElement(object) {\n\t\t\treturn object &&\n\t\t\t\tobject.nodeType === 1 && // Node.ELEMENT_NODE\n\t\t\t\tobject.tagName === 'FORM';\n\t\t}\n\n\t\tfunction createFormDataFromObject(object) {\n\t\t\tvar formData = new FormData();\n\n\t\t\tvar value;\n\t\t\tfor (var property in object) {\n\t\t\t\tif (object.hasOwnProperty(property)) {\n\t\t\t\t\tvalue = object[property];\n\n\t\t\t\t\tif (value instanceof File) {\n\t\t\t\t\t\tformData.append(property, value, value.name);\n\t\t\t\t\t} else if (value instanceof Blob) {\n\t\t\t\t\t\tformData.append(property, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformData.append(property, String(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\treturn {\n\n\t\t\twrite: function (object) {\n\t\t\t\tif (typeof FormData === 'undefined') {\n\t\t\t\t\tthrow new Error('The multipart/form-data mime serializer requires FormData support');\n\t\t\t\t}\n\n\t\t\t\t// Support FormData directly.\n\t\t\t\tif (object instanceof FormData) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\n\t\t\t\t// Support <form> elements.\n\t\t\t\tif (isFormElement(object)) {\n\t\t\t\t\treturn new FormData(object);\n\t\t\t\t}\n\n\t\t\t\t// Support plain objects, may contain File/Blob as value.\n\t\t\t\tif (typeof object === 'object' && object !== null) {\n\t\t\t\t\treturn createFormDataFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('Unable to create FormData from object ' + object);\n\t\t\t}\n\n\t\t};\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],19:[function(require,module,exports){\n/*\n * Copyright 2012 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\treturn {\n\n\t\t\tread: function (str) {\n\t\t\t\treturn str;\n\t\t\t},\n\n\t\t\twrite: function (obj) {\n\t\t\t\treturn obj.toString();\n\t\t\t}\n\n\t\t};\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],20:[function(require,module,exports){\n/*\n * Copyright 2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\treturn {\n\n\t\t\t/**\n\t\t\t * Find objects within a graph the contain a property of a certain name.\n\t\t\t *\n\t\t\t * NOTE: this method will not discover object graph cycles.\n\t\t\t *\n\t\t\t * @param {*} obj object to search on\n\t\t\t * @param {string} prop name of the property to search for\n\t\t\t * @param {Function} callback function to receive the found properties and their parent\n\t\t\t */\n\t\t\tfindProperties: function findProperties(obj, prop, callback) {\n\t\t\t\tif (typeof obj !== 'object' || obj === null) { return; }\n\t\t\t\tif (prop in obj) {\n\t\t\t\t\tcallback(obj[prop], obj, prop);\n\t\t\t\t}\n\t\t\t\tObject.keys(obj).forEach(function (key) {\n\t\t\t\t\tfindProperties(obj[key], prop, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],21:[function(require,module,exports){\n/*\n * Copyright 2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar when;\n\n\t\twhen = require('when');\n\n\t\t/**\n\t\t * Create a promise whose work is started only when a handler is registered.\n\t\t *\n\t\t * The work function will be invoked at most once. Thrown values will result\n\t\t * in promise rejection.\n\t\t *\n\t\t * @param {Function} work function whose ouput is used to resolve the\n\t\t *   returned promise.\n\t\t * @returns {Promise} a lazy promise\n\t\t */\n\t\tfunction lazyPromise(work) {\n\t\t\tvar defer, started, resolver, promise, then;\n\n\t\t\tdefer = when.defer();\n\t\t\tstarted = false;\n\n\t\t\tresolver = defer.resolver;\n\t\t\tpromise = defer.promise;\n\t\t\tthen = promise.then;\n\n\t\t\tpromise.then = function () {\n\t\t\t\tif (!started) {\n\t\t\t\t\tstarted = true;\n\t\t\t\t\twhen.attempt(work).then(resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t\treturn then.apply(promise, arguments);\n\t\t\t};\n\n\t\t\treturn promise;\n\t\t}\n\n\t\treturn lazyPromise;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"when\":114}],22:[function(require,module,exports){\n/*\n * Copyright 2012-2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\t// derived from dojo.mixin\n\tdefine(function (/* require */) {\n\n\t\tvar empty = {};\n\n\t\t/**\n\t\t * Mix the properties from the source object into the destination object.\n\t\t * When the same property occurs in more then one object, the right most\n\t\t * value wins.\n\t\t *\n\t\t * @param {Object} dest the object to copy properties to\n\t\t * @param {Object} sources the objects to copy properties from.  May be 1 to N arguments, but not an Array.\n\t\t * @return {Object} the destination object\n\t\t */\n\t\tfunction mixin(dest /*, sources... */) {\n\t\t\tvar i, l, source, name;\n\n\t\t\tif (!dest) { dest = {}; }\n\t\t\tfor (i = 1, l = arguments.length; i < l; i += 1) {\n\t\t\t\tsource = arguments[i];\n\t\t\t\tfor (name in source) {\n\t\t\t\t\tif (!(name in dest) || (dest[name] !== source[name] && (!(name in empty) || empty[name] !== source[name]))) {\n\t\t\t\t\t\tdest[name] = source[name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dest; // Object\n\t\t}\n\n\t\treturn mixin;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],23:[function(require,module,exports){\n/*\n * Copyright 2012 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\t/**\n\t\t * Normalize HTTP header names using the pseudo camel case.\n\t\t *\n\t\t * For example:\n\t\t *   content-type         -> Content-Type\n\t\t *   accepts              -> Accepts\n\t\t *   x-custom-header-name -> X-Custom-Header-Name\n\t\t *\n\t\t * @param {string} name the raw header name\n\t\t * @return {string} the normalized header name\n\t\t */\n\t\tfunction normalizeHeaderName(name) {\n\t\t\treturn name.toLowerCase()\n\t\t\t\t.split('-')\n\t\t\t\t.map(function (chunk) { return chunk.charAt(0).toUpperCase() + chunk.slice(1); })\n\t\t\t\t.join('-');\n\t\t}\n\n\t\treturn normalizeHeaderName;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],24:[function(require,module,exports){\n/*\n * Copyright 2014-2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar when = require('when'),\n\t\t\tnormalizeHeaderName = require('./normalizeHeaderName');\n\n\t\tfunction property(promise, name) {\n\t\t\treturn promise.then(\n\t\t\t\tfunction (value) {\n\t\t\t\t\treturn value && value[name];\n\t\t\t\t},\n\t\t\t\tfunction (value) {\n\t\t\t\t\treturn when.reject(value && value[name]);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Obtain the response entity\n\t\t *\n\t\t * @returns {Promise} for the response entity\n\t\t */\n\t\tfunction entity() {\n\t\t\t/*jshint validthis:true */\n\t\t\treturn property(this, 'entity');\n\t\t}\n\n\t\t/**\n\t\t * Obtain the response status\n\t\t *\n\t\t * @returns {Promise} for the response status\n\t\t */\n\t\tfunction status() {\n\t\t\t/*jshint validthis:true */\n\t\t\treturn property(property(this, 'status'), 'code');\n\t\t}\n\n\t\t/**\n\t\t * Obtain the response headers map\n\t\t *\n\t\t * @returns {Promise} for the response headers map\n\t\t */\n\t\tfunction headers() {\n\t\t\t/*jshint validthis:true */\n\t\t\treturn property(this, 'headers');\n\t\t}\n\n\t\t/**\n\t\t * Obtain a specific response header\n\t\t *\n\t\t * @param {String} headerName the header to retrieve\n\t\t * @returns {Promise} for the response header's value\n\t\t */\n\t\tfunction header(headerName) {\n\t\t\t/*jshint validthis:true */\n\t\t\theaderName = normalizeHeaderName(headerName);\n\t\t\treturn property(this.headers(), headerName);\n\t\t}\n\n\t\t/**\n\t\t * Follow a related resource\n\t\t *\n\t\t * The relationship to follow may be define as a plain string, an object\n\t\t * with the rel and params, or an array containing one or more entries\n\t\t * with the previous forms.\n\t\t *\n\t\t * Examples:\n\t\t *   response.follow('next')\n\t\t *\n\t\t *   response.follow({ rel: 'next', params: { pageSize: 100 } })\n\t\t *\n\t\t *   response.follow([\n\t\t *       { rel: 'items', params: { projection: 'noImages' } },\n\t\t *       'search',\n\t\t *       { rel: 'findByGalleryIsNull', params: { projection: 'noImages' } },\n\t\t *       'items'\n\t\t *   ])\n\t\t *\n\t\t * @param {String|Object|Array} rels one, or more, relationships to follow\n\t\t * @returns ResponsePromise<Response> related resource\n\t\t */\n\t\tfunction follow(rels) {\n\t\t\t/*jshint validthis:true */\n\t\t\trels = [].concat(rels);\n\t\t\treturn make(when.reduce(rels, function (response, rel) {\n\t\t\t\tif (typeof rel === 'string') {\n\t\t\t\t\trel = { rel: rel };\n\t\t\t\t}\n\t\t\t\tif (typeof response.entity.clientFor !== 'function') {\n\t\t\t\t\tthrow new Error('Hypermedia response expected');\n\t\t\t\t}\n\t\t\t\tvar client = response.entity.clientFor(rel.rel);\n\t\t\t\treturn client({ params: rel.params });\n\t\t\t}, this));\n\t\t}\n\n\t\t/**\n\t\t * Wrap a Promise as an ResponsePromise\n\t\t *\n\t\t * @param {Promise<Response>} promise the promise for an HTTP Response\n\t\t * @returns {ResponsePromise<Response>} wrapped promise for Response with additional helper methods\n\t\t */\n\t\tfunction make(promise) {\n\t\t\tpromise.status = status;\n\t\t\tpromise.headers = headers;\n\t\t\tpromise.header = header;\n\t\t\tpromise.entity = entity;\n\t\t\tpromise.follow = follow;\n\t\t\treturn promise;\n\t\t}\n\n\t\tfunction responsePromise() {\n\t\t\treturn make(when.apply(when, arguments));\n\t\t}\n\n\t\tresponsePromise.make = make;\n\t\tresponsePromise.reject = function (val) {\n\t\t\treturn make(when.reject(val));\n\t\t};\n\t\tresponsePromise.promise = function (func) {\n\t\t\treturn make(when.promise(func));\n\t\t};\n\n\t\treturn responsePromise;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"./normalizeHeaderName\":23,\"when\":114}],25:[function(require,module,exports){\n/*\n * Copyright 2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\tvar charMap;\n\n\t\tcharMap = (function () {\n\t\t\tvar strings = {\n\t\t\t\talpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\t\t\t\tdigit: '0123456789'\n\t\t\t};\n\n\t\t\tstrings.genDelims = ':/?#[]@';\n\t\t\tstrings.subDelims = '!$&\\'()*+,;=';\n\t\t\tstrings.reserved = strings.genDelims + strings.subDelims;\n\t\t\tstrings.unreserved = strings.alpha + strings.digit + '-._~';\n\t\t\tstrings.url = strings.reserved + strings.unreserved;\n\t\t\tstrings.scheme = strings.alpha + strings.digit + '+-.';\n\t\t\tstrings.userinfo = strings.unreserved + strings.subDelims + ':';\n\t\t\tstrings.host = strings.unreserved + strings.subDelims;\n\t\t\tstrings.port = strings.digit;\n\t\t\tstrings.pchar = strings.unreserved + strings.subDelims + ':@';\n\t\t\tstrings.segment = strings.pchar;\n\t\t\tstrings.path = strings.segment + '/';\n\t\t\tstrings.query = strings.pchar + '/?';\n\t\t\tstrings.fragment = strings.pchar + '/?';\n\n\t\t\treturn Object.keys(strings).reduce(function (charMap, set) {\n\t\t\t\tcharMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n\t\t\t\t\tchars[myChar] = true;\n\t\t\t\t\treturn chars;\n\t\t\t\t}, {});\n\t\t\t\treturn charMap;\n\t\t\t}, {});\n\t\t}());\n\n\t\tfunction encode(str, allowed) {\n\t\t\tif (typeof str !== 'string') {\n\t\t\t\tthrow new Error('String required for URL encoding');\n\t\t\t}\n\t\t\treturn str.split('').map(function (myChar) {\n\t\t\t\tif (allowed.hasOwnProperty(myChar)) {\n\t\t\t\t\treturn myChar;\n\t\t\t\t}\n\t\t\t\tvar code = myChar.charCodeAt(0);\n\t\t\t\tif (code <= 127) {\n\t\t\t\t\treturn '%' + code.toString(16).toUpperCase();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn encodeURIComponent(myChar).toUpperCase();\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t}\n\n\t\tfunction makeEncoder(allowed) {\n\t\t\tallowed = allowed || charMap.unreserved;\n\t\t\treturn function (str) {\n\t\t\t\treturn encode(str, allowed);\n\t\t\t};\n\t\t}\n\n\t\tfunction decode(str) {\n\t\t\treturn decodeURIComponent(str);\n\t\t}\n\n\t\treturn {\n\n\t\t\t/*\n\t\t\t * Decode URL encoded strings\n\t\t\t *\n\t\t\t * @param {string} URL encoded string\n\t\t\t * @returns {string} URL decoded string\n\t\t\t */\n\t\t\tdecode: decode,\n\n\t\t\t/*\n\t\t\t * URL encode a string\n\t\t\t *\n\t\t\t * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n\t\t\t * encoded.\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencode: makeEncoder(),\n\n\t\t\t/*\n\t\t\t* URL encode a URL\n\t\t\t*\n\t\t\t* All character permitted anywhere in a URL are left unencoded even\n\t\t\t* if that character is not permitted in that portion of a URL.\n\t\t\t*\n\t\t\t* Note: This method is typically not what you want.\n\t\t\t*\n\t\t\t* @param {string} string to encode\n\t\t\t* @returns {string} URL encoded string\n\t\t\t*/\n\t\t\tencodeURL: makeEncoder(charMap.url),\n\n\t\t\t/*\n\t\t\t * URL encode the scheme portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeScheme: makeEncoder(charMap.scheme),\n\n\t\t\t/*\n\t\t\t * URL encode the user info portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeUserInfo: makeEncoder(charMap.userinfo),\n\n\t\t\t/*\n\t\t\t * URL encode the host portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeHost: makeEncoder(charMap.host),\n\n\t\t\t/*\n\t\t\t * URL encode the port portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePort: makeEncoder(charMap.port),\n\n\t\t\t/*\n\t\t\t * URL encode a path segment portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePathSegment: makeEncoder(charMap.segment),\n\n\t\t\t/*\n\t\t\t * URL encode the path portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePath: makeEncoder(charMap.path),\n\n\t\t\t/*\n\t\t\t * URL encode the query portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeQuery: makeEncoder(charMap.query),\n\n\t\t\t/*\n\t\t\t * URL encode the fragment portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeFragment: makeEncoder(charMap.fragment)\n\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{}],26:[function(require,module,exports){\n/*\n * Copyright 2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tvar undef;\n\n\tdefine(function (require) {\n\n\t\tvar uriEncoder, operations, prefixRE;\n\n\t\turiEncoder = require('./uriEncoder');\n\n\t\tprefixRE = /^([^:]*):([0-9]+)$/;\n\t\toperations = {\n\t\t\t'':  { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encode },\n\t\t\t'+': { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },\n\t\t\t'#': { first: '#', separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },\n\t\t\t'.': { first: '.', separator: '.', named: false, empty: '',  encoder: uriEncoder.encode },\n\t\t\t'/': { first: '/', separator: '/', named: false, empty: '',  encoder: uriEncoder.encode },\n\t\t\t';': { first: ';', separator: ';', named: true,  empty: '',  encoder: uriEncoder.encode },\n\t\t\t'?': { first: '?', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },\n\t\t\t'&': { first: '&', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },\n\t\t\t'=': { reserved: true },\n\t\t\t',': { reserved: true },\n\t\t\t'!': { reserved: true },\n\t\t\t'@': { reserved: true },\n\t\t\t'|': { reserved: true }\n\t\t};\n\n\t\tfunction apply(operation, expression, params) {\n\t\t\t/*jshint maxcomplexity:11 */\n\t\t\treturn expression.split(',').reduce(function (result, variable) {\n\t\t\t\tvar opts, value;\n\n\t\t\t\topts = {};\n\t\t\t\tif (variable.slice(-1) === '*') {\n\t\t\t\t\tvariable = variable.slice(0, -1);\n\t\t\t\t\topts.explode = true;\n\t\t\t\t}\n\t\t\t\tif (prefixRE.test(variable)) {\n\t\t\t\t\tvar prefix = prefixRE.exec(variable);\n\t\t\t\t\tvariable = prefix[1];\n\t\t\t\t\topts.maxLength = parseInt(prefix[2]);\n\t\t\t\t}\n\n\t\t\t\tvariable = uriEncoder.decode(variable);\n\t\t\t\tvalue = params[variable];\n\n\t\t\t\tif (value === undef || value === null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tresult += value.reduce(function (result, value) {\n\t\t\t\t\t\tif (result.length) {\n\t\t\t\t\t\t\tresult += opts.explode ? operation.separator : ',';\n\t\t\t\t\t\t\tif (operation.named && opts.explode) {\n\t\t\t\t\t\t\t\tresult += operation.encoder(variable);\n\t\t\t\t\t\t\t\tresult += value.length ? '=' : operation.empty;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult += operation.first;\n\t\t\t\t\t\t\tif (operation.named) {\n\t\t\t\t\t\t\t\tresult += operation.encoder(variable);\n\t\t\t\t\t\t\t\tresult += value.length ? '=' : operation.empty;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += operation.encoder(value);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, '');\n\t\t\t\t}\n\t\t\t\telse if (typeof value === 'object') {\n\t\t\t\t\tresult += Object.keys(value).reduce(function (result, name) {\n\t\t\t\t\t\tif (result.length) {\n\t\t\t\t\t\t\tresult += opts.explode ? operation.separator : ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult += operation.first;\n\t\t\t\t\t\t\tif (operation.named && !opts.explode) {\n\t\t\t\t\t\t\t\tresult += operation.encoder(variable);\n\t\t\t\t\t\t\t\tresult += value[name].length ? '=' : operation.empty;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += operation.encoder(name);\n\t\t\t\t\t\tresult += opts.explode ? '=' : ',';\n\t\t\t\t\t\tresult += operation.encoder(value[name]);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, '');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvalue = String(value);\n\t\t\t\t\tif (opts.maxLength) {\n\t\t\t\t\t\tvalue = value.slice(0, opts.maxLength);\n\t\t\t\t\t}\n\t\t\t\t\tresult += result.length ? operation.separator : operation.first;\n\t\t\t\t\tif (operation.named) {\n\t\t\t\t\t\tresult += operation.encoder(variable);\n\t\t\t\t\t\tresult += value.length ? '=' : operation.empty;\n\t\t\t\t\t}\n\t\t\t\t\tresult += operation.encoder(value);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, '');\n\t\t}\n\n\t\tfunction expandExpression(expression, params) {\n\t\t\tvar operation;\n\n\t\t\toperation = operations[expression.slice(0,1)];\n\t\t\tif (operation) {\n\t\t\t\texpression = expression.slice(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\toperation = operations[''];\n\t\t\t}\n\n\t\t\tif (operation.reserved) {\n\t\t\t\tthrow new Error('Reserved expression operations are not supported');\n\t\t\t}\n\n\t\t\treturn apply(operation, expression, params);\n\t\t}\n\n\t\tfunction expandTemplate(template, params) {\n\t\t\tvar start, end, uri;\n\n\t\t\turi = '';\n\t\t\tend = 0;\n\t\t\twhile (true) {\n\t\t\t\tstart = template.indexOf('{', end);\n\t\t\t\tif (start === -1) {\n\t\t\t\t\t// no more expressions\n\t\t\t\t\turi += template.slice(end);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\turi += template.slice(end, start);\n\t\t\t\tend = template.indexOf('}', start) + 1;\n\t\t\t\turi += expandExpression(template.slice(start + 1, end - 1), params);\n\t\t\t}\n\n\t\t\treturn uri;\n\t\t}\n\n\t\treturn {\n\n\t\t\t/**\n\t\t\t * Expand a URI Template with parameters to form a URI.\n\t\t\t *\n\t\t\t * Full implementation (level 4) of rfc6570.\n\t\t\t * @see https://tools.ietf.org/html/rfc6570\n\t\t\t *\n\t\t\t * @param {string} template URI template\n\t\t\t * @param {Object} [params] params to apply to the template durring expantion\n\t\t\t * @returns {string} expanded URI\n\t\t\t */\n\t\t\texpand: expandTemplate\n\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n\n},{\"./uriEncoder\":25}],27:[function(require,module,exports){\nvar Vue // late bind\nvar map = Object.create(null)\nvar shimmed = false\nvar isBrowserify = false\n\n/**\n * Determine compatibility and apply patch.\n *\n * @param {Function} vue\n * @param {Boolean} browserify\n */\n\nexports.install = function (vue, browserify) {\n  if (shimmed) return\n  shimmed = true\n\n  Vue = vue\n  isBrowserify = browserify\n\n  exports.compatible = !!Vue.internalDirectives\n  if (!exports.compatible) {\n    console.warn(\n      '[HMR] vue-loader hot reload is only compatible with ' +\n      'Vue.js 1.0.0+.'\n    )\n    return\n  }\n\n  // patch view directive\n  patchView(Vue.internalDirectives.component)\n  console.log('[HMR] Vue component hot reload shim applied.')\n  // shim router-view if present\n  var routerView = Vue.elementDirective('router-view')\n  if (routerView) {\n    patchView(routerView)\n    console.log('[HMR] vue-router <router-view> hot reload shim applied.')\n  }\n}\n\n/**\n * Shim the view directive (component or router-view).\n *\n * @param {Object} View\n */\n\nfunction patchView (View) {\n  var unbuild = View.unbuild\n  View.unbuild = function (defer) {\n    if (!this.hotUpdating) {\n      var prevComponent = this.childVM && this.childVM.constructor\n      removeView(prevComponent, this)\n      // defer = true means we are transitioning to a new\n      // Component. Register this new component to the list.\n      if (defer) {\n        addView(this.Component, this)\n      }\n    }\n    // call original\n    return unbuild.call(this, defer)\n  }\n}\n\n/**\n * Add a component view to a Component's hot list\n *\n * @param {Function} Component\n * @param {Directive} view - view directive instance\n */\n\nfunction addView (Component, view) {\n  var id = Component && Component.options.hotID\n  if (id) {\n    if (!map[id]) {\n      map[id] = {\n        Component: Component,\n        views: [],\n        instances: []\n      }\n    }\n    map[id].views.push(view)\n  }\n}\n\n/**\n * Remove a component view from a Component's hot list\n *\n * @param {Function} Component\n * @param {Directive} view - view directive instance\n */\n\nfunction removeView (Component, view) {\n  var id = Component && Component.options.hotID\n  if (id) {\n    map[id].views.$remove(view)\n  }\n}\n\n/**\n * Create a record for a hot module, which keeps track of its construcotr,\n * instnaces and views (component directives or router-views).\n *\n * @param {String} id\n * @param {Object} options\n */\n\nexports.createRecord = function (id, options) {\n  if (typeof options === 'function') {\n    options = options.options\n  }\n  if (typeof options.el !== 'string' && typeof options.data !== 'object') {\n    makeOptionsHot(id, options)\n    map[id] = {\n      Component: null,\n      views: [],\n      instances: []\n    }\n  }\n}\n\n/**\n * Make a Component options object hot.\n *\n * @param {String} id\n * @param {Object} options\n */\n\nfunction makeOptionsHot (id, options) {\n  options.hotID = id\n  injectHook(options, 'created', function () {\n    var record = map[id]\n    if (!record.Component) {\n      record.Component = this.constructor\n    }\n    record.instances.push(this)\n  })\n  injectHook(options, 'beforeDestroy', function () {\n    map[id].instances.$remove(this)\n  })\n}\n\n/**\n * Inject a hook to a hot reloadable component so that\n * we can keep track of it.\n *\n * @param {Object} options\n * @param {String} name\n * @param {Function} hook\n */\n\nfunction injectHook (options, name, hook) {\n  var existing = options[name]\n  options[name] = existing\n    ? Array.isArray(existing)\n      ? existing.concat(hook)\n      : [existing, hook]\n    : [hook]\n}\n\n/**\n * Update a hot component.\n *\n * @param {String} id\n * @param {Object|null} newOptions\n * @param {String|null} newTemplate\n */\n\nexports.update = function (id, newOptions, newTemplate) {\n  var record = map[id]\n  // force full-reload if an instance of the component is active but is not\n  // managed by a view\n  if (!record || (record.instances.length && !record.views.length)) {\n    console.log('[HMR] Root or manually-mounted instance modified. Full reload may be required.')\n    if (!isBrowserify) {\n      window.location.reload()\n    } else {\n      // browserify-hmr somehow sends incomplete bundle if we reload here\n      return\n    }\n  }\n  if (!isBrowserify) {\n    // browserify-hmr already logs this\n    console.log('[HMR] Updating component: ' + format(id))\n  }\n  var Component = record.Component\n  // update constructor\n  if (newOptions) {\n    // in case the user exports a constructor\n    Component = record.Component = typeof newOptions === 'function'\n      ? newOptions\n      : Vue.extend(newOptions)\n    makeOptionsHot(id, Component.options)\n  }\n  if (newTemplate) {\n    Component.options.template = newTemplate\n  }\n  // handle recursive lookup\n  if (Component.options.name) {\n    Component.options.components[Component.options.name] = Component\n  }\n  // reset constructor cached linker\n  Component.linker = null\n  // reload all views\n  record.views.forEach(function (view) {\n    updateView(view, Component)\n  })\n}\n\n/**\n * Update a component view instance\n *\n * @param {Directive} view\n * @param {Function} Component\n */\n\nfunction updateView (view, Component) {\n  if (!view._bound) {\n    return\n  }\n  view.Component = Component\n  view.hotUpdating = true\n  // disable transitions\n  view.vm._isCompiled = false\n  // save state\n  var state = view.childVM.$data\n  // remount, make sure to disable keep-alive\n  var keepAlive = view.keepAlive\n  view.keepAlive = false\n  view.mountComponent()\n  view.keepAlive = keepAlive\n  // restore state\n  view.childVM.$data = state\n  // re-eanble transitions\n  view.vm._isCompiled = true\n  view.hotUpdating = false\n}\n\nfunction format (id) {\n  return id.match(/[^\\/]+\\.vue$/)[0]\n}\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nvar babelHelpers = {};\n\nbabelHelpers.classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nfunction Target(path, matcher, delegate) {\n  this.path = path;\n  this.matcher = matcher;\n  this.delegate = delegate;\n}\n\nTarget.prototype = {\n  to: function to(target, callback) {\n    var delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) {\n        throw new Error(\"You must have an argument in the function passed to `to`\");\n      }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n    return this;\n  }\n};\n\nfunction Matcher(target) {\n  this.routes = {};\n  this.children = {};\n  this.target = target;\n}\n\nMatcher.prototype = {\n  add: function add(path, handler) {\n    this.routes[path] = handler;\n  },\n\n  addChild: function addChild(path, target, callback, delegate) {\n    var matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    var match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n};\n\nfunction generateMatch(startingPath, matcher, delegate) {\n  return function (path, nestedCallback) {\n    var fullPath = startingPath + path;\n\n    if (nestedCallback) {\n      nestedCallback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(startingPath + path, matcher, delegate);\n    }\n  };\n}\n\nfunction addRoute(routeArray, path, handler) {\n  var len = 0;\n  for (var i = 0, l = routeArray.length; i < l; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  var route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n  var routes = matcher.routes;\n\n  for (var path in routes) {\n    if (routes.hasOwnProperty(path)) {\n      var routeArray = baseRoute.slice();\n      addRoute(routeArray, path, routes[path]);\n\n      if (matcher.children[path]) {\n        eachRoute(routeArray, matcher.children[path], callback, binding);\n      } else {\n        callback.call(binding, routeArray);\n      }\n    }\n  }\n}\n\nfunction map (callback, addRouteCallback) {\n  var matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function (route) {\n    if (addRouteCallback) {\n      addRouteCallback(this, route);\n    } else {\n      this.add(route);\n    }\n  }, this);\n}\n\nvar specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\n\nvar escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\nfunction isArray(test) {\n  return Object.prototype.toString.call(test) === \"[object Array]\";\n}\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\n\nfunction StaticSegment(string) {\n  this.string = string;\n}\nStaticSegment.prototype = {\n  eachChar: function eachChar(callback) {\n    var string = this.string,\n        ch;\n\n    for (var i = 0, l = string.length; i < l; i++) {\n      ch = string.charAt(i);\n      callback({ validChars: ch });\n    }\n  },\n\n  regex: function regex() {\n    return this.string.replace(escapeRegex, '\\\\$1');\n  },\n\n  generate: function generate() {\n    return this.string;\n  }\n};\n\nfunction DynamicSegment(name) {\n  this.name = name;\n}\nDynamicSegment.prototype = {\n  eachChar: function eachChar(callback) {\n    callback({ invalidChars: \"/\", repeat: true });\n  },\n\n  regex: function regex() {\n    return \"([^/]+)\";\n  },\n\n  generate: function generate(params) {\n    return params[this.name];\n  }\n};\n\nfunction StarSegment(name) {\n  this.name = name;\n}\nStarSegment.prototype = {\n  eachChar: function eachChar(callback) {\n    callback({ invalidChars: \"\", repeat: true });\n  },\n\n  regex: function regex() {\n    return \"(.+)\";\n  },\n\n  generate: function generate(params) {\n    return params[this.name];\n  }\n};\n\nfunction EpsilonSegment() {}\nEpsilonSegment.prototype = {\n  eachChar: function eachChar() {},\n  regex: function regex() {\n    return \"\";\n  },\n  generate: function generate() {\n    return \"\";\n  }\n};\n\nfunction parse(route, names, specificity) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.charAt(0) === \"/\") {\n    route = route.substr(1);\n  }\n\n  var segments = route.split(\"/\"),\n      results = [];\n\n  // A routes has specificity determined by the order that its different segments\n  // appear in. This system mirrors how the magnitude of numbers written as strings\n  // works.\n  // Consider a number written as: \"abc\". An example would be \"200\". Any other number written\n  // \"xyz\" will be smaller than \"abc\" so long as `a > z`. For instance, \"199\" is smaller\n  // then \"200\", even though \"y\" and \"z\" (which are both 9) are larger than \"0\" (the value\n  // of (`b` and `c`). This is because the leading symbol, \"2\", is larger than the other\n  // leading symbol, \"1\".\n  // The rule is that symbols to the left carry more weight than symbols to the right\n  // when a number is written out as a string. In the above strings, the leading digit\n  // represents how many 100's are in the number, and it carries more weight than the middle\n  // number which represents how many 10's are in the number.\n  // This system of number magnitude works well for route specificity, too. A route written as\n  // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than\n  // `x`, irrespective of the other parts.\n  // Because of this similarity, we assign each type of segment a number value written as a\n  // string. We can find the specificity of compound routes by concatenating these strings\n  // together, from left to right. After we have looped through all of the segments,\n  // we convert the string to a number.\n  specificity.val = '';\n\n  for (var i = 0, l = segments.length; i < l; i++) {\n    var segment = segments[i],\n        match;\n\n    if (match = segment.match(/^:([^\\/]+)$/)) {\n      results.push(new DynamicSegment(match[1]));\n      names.push(match[1]);\n      specificity.val += '3';\n    } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n      results.push(new StarSegment(match[1]));\n      specificity.val += '2';\n      names.push(match[1]);\n    } else if (segment === \"\") {\n      results.push(new EpsilonSegment());\n      specificity.val += '1';\n    } else {\n      results.push(new StaticSegment(segment));\n      specificity.val += '4';\n    }\n  }\n\n  specificity.val = +specificity.val;\n\n  return results;\n}\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\n\nfunction State(charSpec) {\n  this.charSpec = charSpec;\n  this.nextStates = [];\n}\n\nState.prototype = {\n  get: function get(charSpec) {\n    var nextStates = this.nextStates;\n\n    for (var i = 0, l = nextStates.length; i < l; i++) {\n      var child = nextStates[i];\n\n      var isEqual = child.charSpec.validChars === charSpec.validChars;\n      isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\n\n      if (isEqual) {\n        return child;\n      }\n    }\n  },\n\n  put: function put(charSpec) {\n    var state;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(charSpec)) {\n      return state;\n    }\n\n    // Make a new state for the character spec\n    state = new State(charSpec);\n\n    // Insert the new state as a child of the current state\n    this.nextStates.push(state);\n\n    // If this character specification repeats, insert the new state as a child\n    // of itself. Note that this will not trigger an infinite loop because each\n    // transition during recognition consumes a character.\n    if (charSpec.repeat) {\n      state.nextStates.push(state);\n    }\n\n    // Return the new state\n    return state;\n  },\n\n  // Find a list of child states matching the next character\n  match: function match(ch) {\n    // DEBUG \"Processing `\" + ch + \"`:\"\n    var nextStates = this.nextStates,\n        child,\n        charSpec,\n        chars;\n\n    // DEBUG \"  \" + debugState(this)\n    var returned = [];\n\n    for (var i = 0, l = nextStates.length; i < l; i++) {\n      child = nextStates[i];\n\n      charSpec = child.charSpec;\n\n      if (typeof (chars = charSpec.validChars) !== 'undefined') {\n        if (chars.indexOf(ch) !== -1) {\n          returned.push(child);\n        }\n      } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\n        if (chars.indexOf(ch) === -1) {\n          returned.push(child);\n        }\n      }\n    }\n\n    return returned;\n  }\n\n  /** IF DEBUG\n  , debug: function() {\n    var charSpec = this.charSpec,\n        debug = \"[\",\n        chars = charSpec.validChars || charSpec.invalidChars;\n     if (charSpec.invalidChars) { debug += \"^\"; }\n    debug += chars;\n    debug += \"]\";\n     if (charSpec.repeat) { debug += \"+\"; }\n     return debug;\n  }\n  END IF **/\n};\n\n/** IF DEBUG\nfunction debug(log) {\n  console.log(log);\n}\n\nfunction debugState(state) {\n  return state.nextStates.map(function(n) {\n    if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\n    return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\n  }).join(\", \")\n}\nEND IF **/\n\n// Sort the routes by specificity\nfunction sortSolutions(states) {\n  return states.sort(function (a, b) {\n    return b.specificity.val - a.specificity.val;\n  });\n}\n\nfunction recognizeChar(states, ch) {\n  var nextStates = [];\n\n  for (var i = 0, l = states.length; i < l; i++) {\n    var state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\nvar oCreate = Object.create || function (proto) {\n  function F() {}\n  F.prototype = proto;\n  return new F();\n};\n\nfunction RecognizeResults(queryParams) {\n  this.queryParams = queryParams || {};\n}\nRecognizeResults.prototype = oCreate({\n  splice: Array.prototype.splice,\n  slice: Array.prototype.slice,\n  push: Array.prototype.push,\n  length: 0,\n  queryParams: null\n});\n\nfunction findHandler(state, path, queryParams) {\n  var handlers = state.handlers,\n      regex = state.regex;\n  var captures = path.match(regex),\n      currentCapture = 1;\n  var result = new RecognizeResults(queryParams);\n\n  for (var i = 0, l = handlers.length; i < l; i++) {\n    var handler = handlers[i],\n        names = handler.names,\n        params = {};\n\n    for (var j = 0, m = names.length; j < m; j++) {\n      params[names[j]] = captures[currentCapture++];\n    }\n\n    result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\n  }\n\n  return result;\n}\n\nfunction addSegment(currentState, segment) {\n  segment.eachChar(function (ch) {\n    var state;\n\n    currentState = currentState.put(ch);\n  });\n\n  return currentState;\n}\n\nfunction decodeQueryParamPart(part) {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, '%20');\n  return decodeURIComponent(part);\n}\n\n// The main interface\n\nvar RouteRecognizer = function RouteRecognizer() {\n  this.rootState = new State();\n  this.names = {};\n};\n\nRouteRecognizer.prototype = {\n  add: function add(routes, options) {\n    var currentState = this.rootState,\n        regex = \"^\",\n        specificity = {},\n        handlers = [],\n        allSegments = [],\n        name;\n\n    var isEmpty = true;\n\n    for (var i = 0, l = routes.length; i < l; i++) {\n      var route = routes[i],\n          names = [];\n\n      var segments = parse(route.path, names, specificity);\n\n      allSegments = allSegments.concat(segments);\n\n      for (var j = 0, m = segments.length; j < m; j++) {\n        var segment = segments[j];\n\n        if (segment instanceof EpsilonSegment) {\n          continue;\n        }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put({ validChars: \"/\" });\n        regex += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = addSegment(currentState, segment);\n        regex += segment.regex();\n      }\n\n      var handler = { handler: route.handler, names: names };\n      handlers.push(handler);\n    }\n\n    if (isEmpty) {\n      currentState = currentState.put({ validChars: \"/\" });\n      regex += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.regex = new RegExp(regex + \"$\");\n    currentState.specificity = specificity;\n\n    if (name = options && options.as) {\n      this.names[name] = {\n        segments: allSegments,\n        handlers: handlers\n      };\n    }\n  },\n\n  handlersFor: function handlersFor(name) {\n    var route = this.names[name],\n        result = [];\n    if (!route) {\n      throw new Error(\"There is no route named \" + name);\n    }\n\n    for (var i = 0, l = route.handlers.length; i < l; i++) {\n      result.push(route.handlers[i]);\n    }\n\n    return result;\n  },\n\n  hasRoute: function hasRoute(name) {\n    return !!this.names[name];\n  },\n\n  generate: function generate(name, params) {\n    var route = this.names[name],\n        output = \"\";\n    if (!route) {\n      throw new Error(\"There is no route named \" + name);\n    }\n\n    var segments = route.segments;\n\n    for (var i = 0, l = segments.length; i < l; i++) {\n      var segment = segments[i];\n\n      if (segment instanceof EpsilonSegment) {\n        continue;\n      }\n\n      output += \"/\";\n      output += segment.generate(params);\n    }\n\n    if (output.charAt(0) !== '/') {\n      output = '/' + output;\n    }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  },\n\n  generateQueryString: function generateQueryString(params) {\n    var pairs = [];\n    var keys = [];\n    for (var key in params) {\n      if (params.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n    keys.sort();\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      var value = params[key];\n      if (value == null) {\n        continue;\n      }\n      var pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (var j = 0, l = value.length; j < l; j++) {\n          var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) {\n      return '';\n    }\n\n    return \"?\" + pairs.join(\"&\");\n  },\n\n  parseQueryString: function parseQueryString(queryString) {\n    var pairs = queryString.split(\"&\"),\n        queryParams = {};\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i].split('='),\n          key = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = 'true';\n      } else {\n        //Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : '';\n      }\n      if (isArray) {\n        queryParams[key].push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  },\n\n  recognize: function recognize(path) {\n    var states = [this.rootState],\n        pathLen,\n        i,\n        l,\n        queryStart,\n        queryParams = {},\n        isSlashDropped = false;\n\n    queryStart = path.indexOf('?');\n    if (queryStart !== -1) {\n      var queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    path = decodeURI(path);\n\n    // DEBUG GROUP path\n\n    if (path.charAt(0) !== \"/\") {\n      path = \"/\" + path;\n    }\n\n    pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      isSlashDropped = true;\n    }\n\n    for (i = 0, l = path.length; i < l; i++) {\n      states = recognizeChar(states, path.charAt(i));\n      if (!states.length) {\n        break;\n      }\n    }\n\n    // END DEBUG GROUP\n\n    var solutions = [];\n    for (i = 0, l = states.length; i < l; i++) {\n      if (states[i].handlers) {\n        solutions.push(states[i]);\n      }\n    }\n\n    states = sortSolutions(solutions);\n\n    var state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\n        path = path + \"/\";\n      }\n      return findHandler(state, path, queryParams);\n    }\n  }\n};\n\nRouteRecognizer.prototype.map = map;\n\nRouteRecognizer.VERSION = '0.1.9';\n\nvar genQuery = RouteRecognizer.prototype.generateQueryString;\n\n// export default for holding the Vue reference\nvar exports$1 = {};\n/**\n * Warn stuff.\n *\n * @param {String} msg\n */\n\nfunction warn(msg) {\n  /* istanbul ignore next */\n  if (window.console) {\n    console.warn('[vue-router] ' + msg);\n    /* istanbul ignore if */\n    if (!exports$1.Vue || exports$1.Vue.config.debug) {\n      console.warn(new Error('warning stack trace:').stack);\n    }\n  }\n}\n\n/**\n * Resolve a relative path.\n *\n * @param {String} base\n * @param {String} relative\n * @param {Boolean} append\n * @return {String}\n */\n\nfunction resolvePath(base, relative, append) {\n  var query = base.match(/(\\?.*)$/);\n  if (query) {\n    query = query[1];\n    base = base.slice(0, -query.length);\n  }\n  // a query!\n  if (relative.charAt(0) === '?') {\n    return base + relative;\n  }\n  var stack = base.split('/');\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '.') {\n      continue;\n    } else if (segment === '..') {\n      stack.pop();\n    } else {\n      stack.push(segment);\n    }\n  }\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n  return stack.join('/');\n}\n\n/**\n * Forgiving check for a promise\n *\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction isPromise(p) {\n  return p && typeof p.then === 'function';\n}\n\n/**\n * Retrive a route config field from a component instance\n * OR a component contructor.\n *\n * @param {Function|Vue} component\n * @param {String} name\n * @return {*}\n */\n\nfunction getRouteConfig(component, name) {\n  var options = component && (component.$options || component.options);\n  return options && options.route && options.route[name];\n}\n\n/**\n * Resolve an async component factory. Have to do a dirty\n * mock here because of Vue core's internal API depends on\n * an ID check.\n *\n * @param {Object} handler\n * @param {Function} cb\n */\n\nvar resolver = undefined;\n\nfunction resolveAsyncComponent(handler, cb) {\n  if (!resolver) {\n    resolver = {\n      resolve: exports$1.Vue.prototype._resolveComponent,\n      $options: {\n        components: {\n          _: handler.component\n        }\n      }\n    };\n  } else {\n    resolver.$options.components._ = handler.component;\n  }\n  resolver.resolve('_', function (Component) {\n    handler.component = Component;\n    cb(Component);\n  });\n}\n\n/**\n * Map the dynamic segments in a path to params.\n *\n * @param {String} path\n * @param {Object} params\n * @param {Object} query\n */\n\nfunction mapParams(path, params, query) {\n  if (params === undefined) params = {};\n\n  path = path.replace(/:([^\\/]+)/g, function (_, key) {\n    var val = params[key];\n    if (!val) {\n      warn('param \"' + key + '\" not found when generating ' + 'path for \"' + path + '\" with params ' + JSON.stringify(params));\n    }\n    return val || '';\n  });\n  if (query) {\n    path += genQuery(query);\n  }\n  return path;\n}\n\nvar hashRE = /#.*$/;\n\nvar HTML5History = (function () {\n  function HTML5History(_ref) {\n    var root = _ref.root;\n    var onChange = _ref.onChange;\n    babelHelpers.classCallCheck(this, HTML5History);\n\n    if (root) {\n      // make sure there's the starting slash\n      if (root.charAt(0) !== '/') {\n        root = '/' + root;\n      }\n      // remove trailing slash\n      this.root = root.replace(/\\/$/, '');\n      this.rootRE = new RegExp('^\\\\' + this.root);\n    } else {\n      this.root = null;\n    }\n    this.onChange = onChange;\n    // check base tag\n    var baseEl = document.querySelector('base');\n    this.base = baseEl && baseEl.getAttribute('href');\n  }\n\n  HTML5History.prototype.start = function start() {\n    var _this = this;\n\n    this.listener = function (e) {\n      var url = decodeURI(location.pathname + location.search);\n      if (_this.root) {\n        url = url.replace(_this.rootRE, '');\n      }\n      _this.onChange(url, e && e.state, location.hash);\n    };\n    window.addEventListener('popstate', this.listener);\n    this.listener();\n  };\n\n  HTML5History.prototype.stop = function stop() {\n    window.removeEventListener('popstate', this.listener);\n  };\n\n  HTML5History.prototype.go = function go(path, replace, append) {\n    var url = this.formatPath(path, append);\n    if (replace) {\n      history.replaceState({}, '', url);\n    } else {\n      // record scroll position by replacing current state\n      history.replaceState({\n        pos: {\n          x: window.pageXOffset,\n          y: window.pageYOffset\n        }\n      }, '');\n      // then push new state\n      history.pushState({}, '', url);\n    }\n    var hashMatch = path.match(hashRE);\n    var hash = hashMatch && hashMatch[0];\n    path = url\n    // strip hash so it doesn't mess up params\n    .replace(hashRE, '')\n    // remove root before matching\n    .replace(this.rootRE, '');\n    this.onChange(path, null, hash);\n  };\n\n  HTML5History.prototype.formatPath = function formatPath(path, append) {\n    return path.charAt(0) === '/'\n    // absolute path\n    ? this.root ? this.root + '/' + path.replace(/^\\//, '') : path : resolvePath(this.base || location.pathname, path, append);\n  };\n\n  return HTML5History;\n})();\n\nvar HashHistory = (function () {\n  function HashHistory(_ref) {\n    var hashbang = _ref.hashbang;\n    var onChange = _ref.onChange;\n    babelHelpers.classCallCheck(this, HashHistory);\n\n    this.hashbang = hashbang;\n    this.onChange = onChange;\n  }\n\n  HashHistory.prototype.start = function start() {\n    var self = this;\n    this.listener = function () {\n      var path = location.hash;\n      var raw = path.replace(/^#!?/, '');\n      // always\n      if (raw.charAt(0) !== '/') {\n        raw = '/' + raw;\n      }\n      var formattedPath = self.formatPath(raw);\n      if (formattedPath !== path) {\n        location.replace(formattedPath);\n        return;\n      }\n      // determine query\n      // note it's possible to have queries in both the actual URL\n      // and the hash fragment itself.\n      var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;\n      self.onChange(decodeURI(path.replace(/^#!?/, '') + query));\n    };\n    window.addEventListener('hashchange', this.listener);\n    this.listener();\n  };\n\n  HashHistory.prototype.stop = function stop() {\n    window.removeEventListener('hashchange', this.listener);\n  };\n\n  HashHistory.prototype.go = function go(path, replace, append) {\n    path = this.formatPath(path, append);\n    if (replace) {\n      location.replace(path);\n    } else {\n      location.hash = path;\n    }\n  };\n\n  HashHistory.prototype.formatPath = function formatPath(path, append) {\n    var isAbsoloute = path.charAt(0) === '/';\n    var prefix = '#' + (this.hashbang ? '!' : '');\n    return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);\n  };\n\n  return HashHistory;\n})();\n\nvar AbstractHistory = (function () {\n  function AbstractHistory(_ref) {\n    var onChange = _ref.onChange;\n    babelHelpers.classCallCheck(this, AbstractHistory);\n\n    this.onChange = onChange;\n    this.currentPath = '/';\n  }\n\n  AbstractHistory.prototype.start = function start() {\n    this.onChange('/');\n  };\n\n  AbstractHistory.prototype.stop = function stop() {\n    // noop\n  };\n\n  AbstractHistory.prototype.go = function go(path, replace, append) {\n    path = this.currentPath = this.formatPath(path, append);\n    this.onChange(path);\n  };\n\n  AbstractHistory.prototype.formatPath = function formatPath(path, append) {\n    return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);\n  };\n\n  return AbstractHistory;\n})();\n\n/**\n * Determine the reusability of an existing router view.\n *\n * @param {Directive} view\n * @param {Object} handler\n * @param {Transition} transition\n */\n\nfunction canReuse(view, handler, transition) {\n  var component = view.childVM;\n  if (!component || !handler) {\n    return false;\n  }\n  // important: check view.Component here because it may\n  // have been changed in activate hook\n  if (view.Component !== handler.component) {\n    return false;\n  }\n  var canReuseFn = getRouteConfig(component, 'canReuse');\n  return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {\n    to: transition.to,\n    from: transition.from\n  }) : true; // defaults to true\n}\n\n/**\n * Check if a component can deactivate.\n *\n * @param {Directive} view\n * @param {Transition} transition\n * @param {Function} next\n */\n\nfunction canDeactivate(view, transition, next) {\n  var fromComponent = view.childVM;\n  var hook = getRouteConfig(fromComponent, 'canDeactivate');\n  if (!hook) {\n    next();\n  } else {\n    transition.callHook(hook, fromComponent, next, {\n      expectBoolean: true\n    });\n  }\n}\n\n/**\n * Check if a component can activate.\n *\n * @param {Object} handler\n * @param {Transition} transition\n * @param {Function} next\n */\n\nfunction canActivate(handler, transition, next) {\n  resolveAsyncComponent(handler, function (Component) {\n    // have to check due to async-ness\n    if (transition.aborted) {\n      return;\n    }\n    // determine if this component can be activated\n    var hook = getRouteConfig(Component, 'canActivate');\n    if (!hook) {\n      next();\n    } else {\n      transition.callHook(hook, null, next, {\n        expectBoolean: true\n      });\n    }\n  });\n}\n\n/**\n * Call deactivate hooks for existing router-views.\n *\n * @param {Directive} view\n * @param {Transition} transition\n * @param {Function} next\n */\n\nfunction deactivate(view, transition, next) {\n  var component = view.childVM;\n  var hook = getRouteConfig(component, 'deactivate');\n  if (!hook) {\n    next();\n  } else {\n    transition.callHooks(hook, component, next);\n  }\n}\n\n/**\n * Activate / switch component for a router-view.\n *\n * @param {Directive} view\n * @param {Transition} transition\n * @param {Number} depth\n * @param {Function} [cb]\n */\n\nfunction activate(view, transition, depth, cb, reuse) {\n  var handler = transition.activateQueue[depth];\n  if (!handler) {\n    // fix 1.0.0-alpha.3 compat\n    if (view._bound) {\n      view.setComponent(null);\n    }\n    cb && cb();\n    return;\n  }\n\n  var Component = view.Component = handler.component;\n  var activateHook = getRouteConfig(Component, 'activate');\n  var dataHook = getRouteConfig(Component, 'data');\n  var waitForData = getRouteConfig(Component, 'waitForData');\n\n  view.depth = depth;\n  view.activated = false;\n\n  var component = undefined;\n  var loading = !!(dataHook && !waitForData);\n\n  // \"reuse\" is a flag passed down when the parent view is\n  // either reused via keep-alive or as a child of a kept-alive view.\n  // of course we can only reuse if the current kept-alive instance\n  // is of the correct type.\n  reuse = reuse && view.childVM && view.childVM.constructor === Component;\n\n  if (reuse) {\n    // just reuse\n    component = view.childVM;\n    component.$loadingRouteData = loading;\n  } else {\n    // unbuild current component. this step also destroys\n    // and removes all nested child views.\n    view.unbuild(true);\n    // handle keep-alive.\n    // if the view has keep-alive, the child vm is not actually\n    // destroyed - its nested views will still be in router's\n    // view list. We need to removed these child views and\n    // cache them on the child vm.\n    if (view.keepAlive) {\n      var views = transition.router._views;\n      var i = views.indexOf(view);\n      if (i > 0) {\n        transition.router._views = views.slice(i);\n        if (view.childVM) {\n          view.childVM._routerViews = views.slice(0, i);\n        }\n      }\n    }\n\n    // build the new component. this will also create the\n    // direct child view of the current one. it will register\n    // itself as view.childView.\n    component = view.build({\n      _meta: {\n        $loadingRouteData: loading\n      }\n    });\n    // handle keep-alive.\n    // when a kept-alive child vm is restored, we need to\n    // add its cached child views into the router's view list,\n    // and also properly update current view's child view.\n    if (view.keepAlive) {\n      component.$loadingRouteData = loading;\n      var cachedViews = component._routerViews;\n      if (cachedViews) {\n        transition.router._views = cachedViews.concat(transition.router._views);\n        view.childView = cachedViews[cachedViews.length - 1];\n        component._routerViews = null;\n      }\n    }\n  }\n\n  // cleanup the component in case the transition is aborted\n  // before the component is ever inserted.\n  var cleanup = function cleanup() {\n    component.$destroy();\n  };\n\n  // actually insert the component and trigger transition\n  var insert = function insert() {\n    if (reuse) {\n      cb && cb();\n      return;\n    }\n    var router = transition.router;\n    if (router._rendered || router._transitionOnLoad) {\n      view.transition(component);\n    } else {\n      // no transition on first render, manual transition\n      /* istanbul ignore if */\n      if (view.setCurrent) {\n        // 0.12 compat\n        view.setCurrent(component);\n      } else {\n        // 1.0\n        view.childVM = component;\n      }\n      component.$before(view.anchor, null, false);\n    }\n    cb && cb();\n  };\n\n  // called after activation hook is resolved\n  var afterActivate = function afterActivate() {\n    view.activated = true;\n    // activate the child view\n    if (view.childView) {\n      activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);\n    }\n    if (dataHook && waitForData) {\n      // wait until data loaded to insert\n      loadData(component, transition, dataHook, insert, cleanup);\n    } else {\n      // load data and insert at the same time\n      if (dataHook) {\n        loadData(component, transition, dataHook);\n      }\n      insert();\n    }\n  };\n\n  if (activateHook) {\n    transition.callHooks(activateHook, component, afterActivate, {\n      cleanup: cleanup\n    });\n  } else {\n    afterActivate();\n  }\n}\n\n/**\n * Reuse a view, just reload data if necessary.\n *\n * @param {Directive} view\n * @param {Transition} transition\n */\n\nfunction reuse(view, transition) {\n  var component = view.childVM;\n  var dataHook = getRouteConfig(component, 'data');\n  if (dataHook) {\n    loadData(component, transition, dataHook);\n  }\n}\n\n/**\n * Asynchronously load and apply data to component.\n *\n * @param {Vue} component\n * @param {Transition} transition\n * @param {Function} hook\n * @param {Function} cb\n * @param {Function} cleanup\n */\n\nfunction loadData(component, transition, hook, cb, cleanup) {\n  component.$loadingRouteData = true;\n  transition.callHooks(hook, component, function (data, onError) {\n    // merge data from multiple data hooks\n    if (Array.isArray(data) && data._needMerge) {\n      data = data.reduce(function (res, obj) {\n        if (isPlainObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            res[key] = obj[key];\n          });\n        }\n        return res;\n      }, Object.create(null));\n    }\n    // handle promise sugar syntax\n    var promises = [];\n    if (isPlainObject(data)) {\n      Object.keys(data).forEach(function (key) {\n        var val = data[key];\n        if (isPromise(val)) {\n          promises.push(val.then(function (resolvedVal) {\n            component.$set(key, resolvedVal);\n          }));\n        } else {\n          component.$set(key, val);\n        }\n      });\n    }\n    if (!promises.length) {\n      component.$loadingRouteData = false;\n      cb && cb();\n    } else {\n      promises[0].constructor.all(promises).then(function (_) {\n        component.$loadingRouteData = false;\n        cb && cb();\n      }, onError);\n    }\n  }, {\n    cleanup: cleanup,\n    expectData: true\n  });\n}\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n/**\n * A RouteTransition object manages the pipeline of a\n * router-view switching process. This is also the object\n * passed into user route hooks.\n *\n * @param {Router} router\n * @param {Route} to\n * @param {Route} from\n */\n\nvar RouteTransition = (function () {\n  function RouteTransition(router, to, from) {\n    babelHelpers.classCallCheck(this, RouteTransition);\n\n    this.router = router;\n    this.to = to;\n    this.from = from;\n    this.next = null;\n    this.aborted = false;\n    this.done = false;\n\n    // start by determine the queues\n\n    // the deactivate queue is an array of router-view\n    // directive instances that need to be deactivated,\n    // deepest first.\n    this.deactivateQueue = router._views;\n\n    // check the default handler of the deepest match\n    var matched = to.matched ? Array.prototype.slice.call(to.matched) : [];\n\n    // the activate queue is an array of route handlers\n    // that need to be activated\n    this.activateQueue = matched.map(function (match) {\n      return match.handler;\n    });\n  }\n\n  /**\n   * Abort current transition and return to previous location.\n   */\n\n  RouteTransition.prototype.abort = function abort() {\n    if (!this.aborted) {\n      this.aborted = true;\n      // if the root path throws an error during validation\n      // on initial load, it gets caught in an infinite loop.\n      var abortingOnLoad = !this.from.path && this.to.path === '/';\n      if (!abortingOnLoad) {\n        this.router.replace(this.from.path || '/');\n      }\n    }\n  };\n\n  /**\n   * Abort current transition and redirect to a new location.\n   *\n   * @param {String} path\n   */\n\n  RouteTransition.prototype.redirect = function redirect(path) {\n    if (!this.aborted) {\n      this.aborted = true;\n      if (typeof path === 'string') {\n        path = mapParams(path, this.to.params, this.to.query);\n      } else {\n        path.params = path.params || this.to.params;\n        path.query = path.query || this.to.query;\n      }\n      this.router.replace(path);\n    }\n  };\n\n  /**\n   * A router view transition's pipeline can be described as\n   * follows, assuming we are transitioning from an existing\n   * <router-view> chain [Component A, Component B] to a new\n   * chain [Component A, Component C]:\n   *\n   *  A    A\n   *  | => |\n   *  B    C\n   *\n   * 1. Reusablity phase:\n   *   -> canReuse(A, A)\n   *   -> canReuse(B, C)\n   *   -> determine new queues:\n   *      - deactivation: [B]\n   *      - activation: [C]\n   *\n   * 2. Validation phase:\n   *   -> canDeactivate(B)\n   *   -> canActivate(C)\n   *\n   * 3. Activation phase:\n   *   -> deactivate(B)\n   *   -> activate(C)\n   *\n   * Each of these steps can be asynchronous, and any\n   * step can potentially abort the transition.\n   *\n   * @param {Function} cb\n   */\n\n  RouteTransition.prototype.start = function start(cb) {\n    var transition = this;\n    var daq = this.deactivateQueue;\n    var aq = this.activateQueue;\n    var rdaq = daq.slice().reverse();\n    var reuseQueue = undefined;\n\n    // 1. Reusability phase\n    var i = undefined;\n    for (i = 0; i < rdaq.length; i++) {\n      if (!canReuse(rdaq[i], aq[i], transition)) {\n        break;\n      }\n    }\n    if (i > 0) {\n      reuseQueue = rdaq.slice(0, i);\n      daq = rdaq.slice(i).reverse();\n      aq = aq.slice(i);\n    }\n\n    // 2. Validation phase\n    transition.runQueue(daq, canDeactivate, function () {\n      transition.runQueue(aq, canActivate, function () {\n        transition.runQueue(daq, deactivate, function () {\n          // 3. Activation phase\n\n          // Update router current route\n          transition.router._onTransitionValidated(transition);\n\n          // trigger reuse for all reused views\n          reuseQueue && reuseQueue.forEach(function (view) {\n            reuse(view, transition);\n          });\n\n          // the root of the chain that needs to be replaced\n          // is the top-most non-reusable view.\n          if (daq.length) {\n            var view = daq[daq.length - 1];\n            var depth = reuseQueue ? reuseQueue.length : 0;\n            activate(view, transition, depth, cb);\n          } else {\n            cb();\n          }\n        });\n      });\n    });\n  };\n\n  /**\n   * Asynchronously and sequentially apply a function to a\n   * queue.\n   *\n   * @param {Array} queue\n   * @param {Function} fn\n   * @param {Function} cb\n   */\n\n  RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {\n    var transition = this;\n    step(0);\n    function step(index) {\n      if (index >= queue.length) {\n        cb();\n      } else {\n        fn(queue[index], transition, function () {\n          step(index + 1);\n        });\n      }\n    }\n  };\n\n  /**\n   * Call a user provided route transition hook and handle\n   * the response (e.g. if the user returns a promise).\n   *\n   * If the user neither expects an argument nor returns a\n   * promise, the hook is assumed to be synchronous.\n   *\n   * @param {Function} hook\n   * @param {*} [context]\n   * @param {Function} [cb]\n   * @param {Object} [options]\n   *                 - {Boolean} expectBoolean\n   *                 - {Boolean} expectData\n   *                 - {Function} cleanup\n   */\n\n  RouteTransition.prototype.callHook = function callHook(hook, context, cb) {\n    var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n    var _ref$expectBoolean = _ref.expectBoolean;\n    var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;\n    var _ref$expectData = _ref.expectData;\n    var expectData = _ref$expectData === undefined ? false : _ref$expectData;\n    var cleanup = _ref.cleanup;\n\n    var transition = this;\n    var nextCalled = false;\n\n    // abort the transition\n    var abort = function abort() {\n      cleanup && cleanup();\n      transition.abort();\n    };\n\n    // handle errors\n    var onError = function onError(err) {\n      // cleanup indicates an after-activation hook,\n      // so instead of aborting we just let the transition\n      // finish.\n      cleanup ? next() : abort();\n      if (err && !transition.router._suppress) {\n        warn('Uncaught error during transition: ');\n        throw err instanceof Error ? err : new Error(err);\n      }\n    };\n\n    // advance the transition to the next step\n    var next = function next(data) {\n      if (nextCalled) {\n        warn('transition.next() should be called only once.');\n        return;\n      }\n      nextCalled = true;\n      if (transition.aborted) {\n        cleanup && cleanup();\n        return;\n      }\n      cb && cb(data, onError);\n    };\n\n    // expose a clone of the transition object, so that each\n    // hook gets a clean copy and prevent the user from\n    // messing with the internals.\n    var exposed = {\n      to: transition.to,\n      from: transition.from,\n      abort: abort,\n      next: next,\n      redirect: function redirect() {\n        transition.redirect.apply(transition, arguments);\n      }\n    };\n\n    // actually call the hook\n    var res = undefined;\n    try {\n      res = hook.call(context, exposed);\n    } catch (err) {\n      return onError(err);\n    }\n\n    // handle boolean/promise return values\n    var resIsPromise = isPromise(res);\n    if (expectBoolean) {\n      if (typeof res === 'boolean') {\n        res ? next() : abort();\n      } else if (resIsPromise) {\n        res.then(function (ok) {\n          ok ? next() : abort();\n        }, onError);\n      } else if (!hook.length) {\n        next(res);\n      }\n    } else if (resIsPromise) {\n      res.then(next, onError);\n    } else if (expectData && isPlainOjbect(res) || !hook.length) {\n      next(res);\n    }\n  };\n\n  /**\n   * Call a single hook or an array of async hooks in series.\n   *\n   * @param {Array} hooks\n   * @param {*} context\n   * @param {Function} cb\n   * @param {Object} [options]\n   */\n\n  RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {\n    var _this = this;\n\n    if (Array.isArray(hooks)) {\n      (function () {\n        var res = [];\n        res._needMerge = true;\n        var onError = undefined;\n        _this.runQueue(hooks, function (hook, _, next) {\n          if (!_this.aborted) {\n            _this.callHook(hook, context, function (r, onError) {\n              if (r) res.push(r);\n              onError = onError;\n              next();\n            }, options);\n          }\n        }, function () {\n          cb(res, onError);\n        });\n      })();\n    } else {\n      this.callHook(hooks, context, cb, options);\n    }\n  };\n\n  return RouteTransition;\n})();\n\nfunction isPlainOjbect(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\nvar internalKeysRE = /^(component|subRoutes)$/;\n\n/**\n * Route Context Object\n *\n * @param {String} path\n * @param {Router} router\n */\n\nvar Route = function Route(path, router) {\n  var _this = this;\n\n  babelHelpers.classCallCheck(this, Route);\n\n  var matched = router._recognizer.recognize(path);\n  if (matched) {\n    // copy all custom fields from route configs\n    [].forEach.call(matched, function (match) {\n      for (var key in match.handler) {\n        if (!internalKeysRE.test(key)) {\n          _this[key] = match.handler[key];\n        }\n      }\n    });\n    // set query and params\n    this.query = matched.queryParams;\n    this.params = [].reduce.call(matched, function (prev, cur) {\n      if (cur.params) {\n        for (var key in cur.params) {\n          prev[key] = cur.params[key];\n        }\n      }\n      return prev;\n    }, {});\n  }\n  // expose path and router\n  this.path = path;\n  this.router = router;\n  // for internal use\n  this.matched = matched || router._notFoundHandler;\n  // Important: freeze self to prevent observation\n  Object.freeze(this);\n};\n\nfunction applyOverride (Vue) {\n\n  var _ = Vue.util;\n\n  // override Vue's init and destroy process to keep track of router instances\n  var init = Vue.prototype._init;\n  Vue.prototype._init = function (options) {\n    var root = options._parent || options.parent || this;\n    var route = root.$route;\n    if (route) {\n      route.router._children.push(this);\n      if (!this.$route) {\n        /* istanbul ignore if */\n        if (this._defineMeta) {\n          // 0.12\n          this._defineMeta('$route', route);\n        } else {\n          // 1.0\n          _.defineReactive(this, '$route', route);\n        }\n      }\n    }\n    init.call(this, options);\n  };\n\n  var destroy = Vue.prototype._destroy;\n  Vue.prototype._destroy = function () {\n    if (!this._isBeingDestroyed) {\n      var route = this.$root.$route;\n      if (route) {\n        route.router._children.$remove(this);\n      }\n      destroy.apply(this, arguments);\n    }\n  };\n\n  // 1.0 only: enable route mixins\n  var strats = Vue.config.optionMergeStrategies;\n  var hooksToMergeRE = /^(data|activate|deactivate)$/;\n\n  if (strats) {\n    strats.route = function (parentVal, childVal) {\n      if (!childVal) return parentVal;\n      if (!parentVal) return childVal;\n      var ret = {};\n      _.extend(ret, parentVal);\n      for (var key in childVal) {\n        var a = ret[key];\n        var b = childVal[key];\n        // for data, activate and deactivate, we need to merge them into\n        // arrays similar to lifecycle hooks.\n        if (a && hooksToMergeRE.test(key)) {\n          ret[key] = (_.isArray(a) ? a : [a]).concat(b);\n        } else {\n          ret[key] = b;\n        }\n      }\n      return ret;\n    };\n  }\n}\n\nfunction View (Vue) {\n\n  var _ = Vue.util;\n  var componentDef =\n  // 0.12\n  Vue.directive('_component') ||\n  // 1.0\n  Vue.internalDirectives.component;\n  // <router-view> extends the internal component directive\n  var viewDef = _.extend({}, componentDef);\n\n  // with some overrides\n  _.extend(viewDef, {\n\n    _isRouterView: true,\n\n    bind: function bind() {\n      var route = this.vm.$route;\n      /* istanbul ignore if */\n      if (!route) {\n        warn('<router-view> can only be used inside a ' + 'router-enabled app.');\n        return;\n      }\n      // force dynamic directive so v-component doesn't\n      // attempt to build right now\n      this._isDynamicLiteral = true;\n      // finally, init by delegating to v-component\n      componentDef.bind.call(this);\n\n      // all we need to do here is registering this view\n      // in the router. actual component switching will be\n      // managed by the pipeline.\n      var router = this.router = route.router;\n      router._views.unshift(this);\n\n      // note the views are in reverse order.\n      var parentView = router._views[1];\n      if (parentView) {\n        // register self as a child of the parent view,\n        // instead of activating now. This is so that the\n        // child's activate hook is called after the\n        // parent's has resolved.\n        parentView.childView = this;\n      }\n\n      // handle late-rendered view\n      // two possibilities:\n      // 1. root view rendered after transition has been\n      //    validated;\n      // 2. child view rendered after parent view has been\n      //    activated.\n      var transition = route.router._currentTransition;\n      if (!parentView && transition.done || parentView && parentView.activated) {\n        var depth = parentView ? parentView.depth + 1 : 0;\n        activate(this, transition, depth);\n      }\n    },\n\n    unbind: function unbind() {\n      this.router._views.$remove(this);\n      componentDef.unbind.call(this);\n    }\n  });\n\n  Vue.elementDirective('router-view', viewDef);\n}\n\nvar trailingSlashRE = /\\/$/;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar queryStringRE = /\\?.*$/;\n\n// install v-link, which provides navigation support for\n// HTML5 history mode\nfunction Link (Vue) {\n\n  var _ = Vue.util;\n\n  Vue.directive('link', {\n\n    bind: function bind() {\n      var _this = this;\n\n      var vm = this.vm;\n      /* istanbul ignore if */\n      if (!vm.$route) {\n        warn('v-link can only be used inside a ' + 'router-enabled app.');\n        return;\n      }\n      // no need to handle click if link expects to be opened\n      // in a new window/tab.\n      /* istanbul ignore if */\n      if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {\n        return;\n      }\n      // handle click\n      var router = vm.$route.router;\n      this.handler = function (e) {\n        // don't redirect with control keys\n        if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n        // don't redirect when preventDefault called\n        if (e.defaultPrevented) return;\n        // don't redirect on right click\n        if (e.button !== 0) return;\n\n        var target = _this.target;\n        var go = function go(target) {\n          e.preventDefault();\n          if (target != null) {\n            router.go(target);\n          }\n        };\n\n        if (_this.el.tagName === 'A' || e.target === _this.el) {\n          // v-link on <a v-link=\"'path'\">\n          go(target);\n        } else {\n          // v-link delegate on <div v-link>\n          var el = e.target;\n          while (el && el.tagName !== 'A' && el !== _this.el) {\n            el = el.parentNode;\n          }\n          if (!el) return;\n          if (el.tagName !== 'A' || !el.href) {\n            // allow not anchor\n            go(target);\n          } else if (sameOrigin(el)) {\n            go({\n              path: el.pathname,\n              replace: target && target.replace,\n              append: target && target.append\n            });\n          }\n        }\n      };\n      this.el.addEventListener('click', this.handler);\n      // manage active link class\n      this.unwatch = vm.$watch('$route.path', _.bind(this.updateClasses, this));\n    },\n\n    update: function update(path) {\n      var router = this.vm.$route.router;\n      var append = undefined;\n      this.target = path;\n      if (_.isObject(path)) {\n        append = path.append;\n        this.exact = path.exact;\n        this.prevActiveClass = this.activeClass;\n        this.activeClass = path.activeClass;\n      }\n      path = this.path = router._stringifyPath(path);\n      this.activeRE = path && !this.exact ? new RegExp('^' + path.replace(/\\/$/, '').replace(regexEscapeRE, '\\\\$&') + '(\\\\/|$)') : null;\n      this.updateClasses(this.vm.$route.path);\n      var isAbsolute = path.charAt(0) === '/';\n      // do not format non-hash relative paths\n      var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, append) : path;\n      if (this.el.tagName === 'A') {\n        if (href) {\n          this.el.href = href;\n        } else {\n          this.el.removeAttribute('href');\n        }\n      }\n    },\n\n    updateClasses: function updateClasses(path) {\n      var el = this.el;\n      var router = this.vm.$route.router;\n      var activeClass = this.activeClass || router._linkActiveClass;\n      // clear old class\n      if (this.prevActiveClass !== activeClass) {\n        _.removeClass(el, this.prevActiveClass);\n      }\n      // remove query string before matching\n      var dest = this.path.replace(queryStringRE, '');\n      path = path.replace(queryStringRE, '');\n      // add new class\n      if (this.exact) {\n        if (dest === path ||\n        // also allow additional trailing slash\n        dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {\n          _.addClass(el, activeClass);\n        } else {\n          _.removeClass(el, activeClass);\n        }\n      } else {\n        if (this.activeRE && this.activeRE.test(path)) {\n          _.addClass(el, activeClass);\n        } else {\n          _.removeClass(el, activeClass);\n        }\n      }\n    },\n\n    unbind: function unbind() {\n      this.el.removeEventListener('click', this.handler);\n      this.unwatch && this.unwatch();\n    }\n  });\n\n  function sameOrigin(link) {\n    return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;\n  }\n}\n\nvar historyBackends = {\n  abstract: AbstractHistory,\n  hash: HashHistory,\n  html5: HTML5History\n};\n\n// late bind during install\nvar Vue = undefined;\n\n/**\n * Router constructor\n *\n * @param {Object} [options]\n */\n\nvar Router = (function () {\n  function Router() {\n    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var _ref$hashbang = _ref.hashbang;\n    var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;\n    var _ref$abstract = _ref.abstract;\n    var abstract = _ref$abstract === undefined ? false : _ref$abstract;\n    var _ref$history = _ref.history;\n    var history = _ref$history === undefined ? false : _ref$history;\n    var _ref$saveScrollPosition = _ref.saveScrollPosition;\n    var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;\n    var _ref$transitionOnLoad = _ref.transitionOnLoad;\n    var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;\n    var _ref$suppressTransitionError = _ref.suppressTransitionError;\n    var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;\n    var _ref$root = _ref.root;\n    var root = _ref$root === undefined ? null : _ref$root;\n    var _ref$linkActiveClass = _ref.linkActiveClass;\n    var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;\n    babelHelpers.classCallCheck(this, Router);\n\n    /* istanbul ignore if */\n    if (!Router.installed) {\n      throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');\n    }\n\n    // Vue instances\n    this.app = null;\n    this._views = [];\n    this._children = [];\n\n    // route recognizer\n    this._recognizer = new RouteRecognizer();\n    this._guardRecognizer = new RouteRecognizer();\n\n    // state\n    this._started = false;\n    this._startCb = null;\n    this._currentRoute = {};\n    this._currentTransition = null;\n    this._previousTransition = null;\n    this._notFoundHandler = null;\n    this._notFoundRedirect = null;\n    this._beforeEachHooks = [];\n    this._afterEachHooks = [];\n\n    // feature detection\n    this._hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;\n\n    // trigger transition on initial render?\n    this._rendered = false;\n    this._transitionOnLoad = transitionOnLoad;\n\n    // history mode\n    this._abstract = abstract;\n    this._hashbang = hashbang;\n    this._history = this._hasPushState && history;\n\n    // other options\n    this._saveScrollPosition = saveScrollPosition;\n    this._linkActiveClass = linkActiveClass;\n    this._suppress = suppressTransitionError;\n\n    // create history object\n    var inBrowser = Vue.util.inBrowser;\n    this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';\n\n    var History = historyBackends[this.mode];\n    var self = this;\n    this.history = new History({\n      root: root,\n      hashbang: this._hashbang,\n      onChange: function onChange(path, state, anchor) {\n        self._match(path, state, anchor);\n      }\n    });\n  }\n\n  /**\n   * Allow directly passing components to a route\n   * definition.\n   *\n   * @param {String} path\n   * @param {Object} handler\n   */\n\n  // API ===================================================\n\n  /**\n  * Register a map of top-level paths.\n  *\n  * @param {Object} map\n  */\n\n  Router.prototype.map = function map(_map) {\n    for (var route in _map) {\n      this.on(route, _map[route]);\n    }\n  };\n\n  /**\n   * Register a single root-level path\n   *\n   * @param {String} rootPath\n   * @param {Object} handler\n   *                 - {String} component\n   *                 - {Object} [subRoutes]\n   *                 - {Boolean} [forceRefresh]\n   *                 - {Function} [before]\n   *                 - {Function} [after]\n   */\n\n  Router.prototype.on = function on(rootPath, handler) {\n    if (rootPath === '*') {\n      this._notFound(handler);\n    } else {\n      this._addRoute(rootPath, handler, []);\n    }\n  };\n\n  /**\n   * Set redirects.\n   *\n   * @param {Object} map\n   */\n\n  Router.prototype.redirect = function redirect(map) {\n    for (var path in map) {\n      this._addRedirect(path, map[path]);\n    }\n  };\n\n  /**\n   * Set aliases.\n   *\n   * @param {Object} map\n   */\n\n  Router.prototype.alias = function alias(map) {\n    for (var path in map) {\n      this._addAlias(path, map[path]);\n    }\n  };\n\n  /**\n   * Set global before hook.\n   *\n   * @param {Function} fn\n   */\n\n  Router.prototype.beforeEach = function beforeEach(fn) {\n    this._beforeEachHooks.push(fn);\n  };\n\n  /**\n   * Set global after hook.\n   *\n   * @param {Function} fn\n   */\n\n  Router.prototype.afterEach = function afterEach(fn) {\n    this._afterEachHooks.push(fn);\n  };\n\n  /**\n   * Navigate to a given path.\n   * The path can be an object describing a named path in\n   * the format of { name: '...', params: {}, query: {}}\n   * The path is assumed to be already decoded, and will\n   * be resolved against root (if provided)\n   *\n   * @param {String|Object} path\n   * @param {Boolean} [replace]\n   */\n\n  Router.prototype.go = function go(path) {\n    var replace = false;\n    var append = false;\n    if (Vue.util.isObject(path)) {\n      replace = path.replace;\n      append = path.append;\n    }\n    path = this._stringifyPath(path);\n    if (path) {\n      this.history.go(path, replace, append);\n    }\n  };\n\n  /**\n   * Short hand for replacing current path\n   *\n   * @param {String} path\n   */\n\n  Router.prototype.replace = function replace(path) {\n    if (typeof path === 'string') {\n      path = { path: path };\n    }\n    path.replace = true;\n    this.go(path);\n  };\n\n  /**\n   * Start the router.\n   *\n   * @param {VueConstructor} App\n   * @param {String|Element} container\n   * @param {Function} [cb]\n   */\n\n  Router.prototype.start = function start(App, container, cb) {\n    /* istanbul ignore if */\n    if (this._started) {\n      warn('already started.');\n      return;\n    }\n    this._started = true;\n    this._startCb = cb;\n    if (!this.app) {\n      /* istanbul ignore if */\n      if (!App || !container) {\n        throw new Error('Must start vue-router with a component and a ' + 'root container.');\n      }\n      this._appContainer = container;\n      var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);\n      // give it a name for better debugging\n      Ctor.options.name = Ctor.options.name || 'RouterApp';\n    }\n    this.history.start();\n  };\n\n  /**\n   * Stop listening to route changes.\n   */\n\n  Router.prototype.stop = function stop() {\n    this.history.stop();\n    this._started = false;\n  };\n\n  // Internal methods ======================================\n\n  /**\n  * Add a route containing a list of segments to the internal\n  * route recognizer. Will be called recursively to add all\n  * possible sub-routes.\n  *\n  * @param {String} path\n  * @param {Object} handler\n  * @param {Array} segments\n  */\n\n  Router.prototype._addRoute = function _addRoute(path, handler, segments) {\n    guardComponent(path, handler);\n    handler.path = path;\n    handler.fullPath = (segments.reduce(function (path, segment) {\n      return path + segment.path;\n    }, '') + path).replace('//', '/');\n    segments.push({\n      path: path,\n      handler: handler\n    });\n    this._recognizer.add(segments, {\n      as: handler.name\n    });\n    // add sub routes\n    if (handler.subRoutes) {\n      for (var subPath in handler.subRoutes) {\n        // recursively walk all sub routes\n        this._addRoute(subPath, handler.subRoutes[subPath],\n        // pass a copy in recursion to avoid mutating\n        // across branches\n        segments.slice());\n      }\n    }\n  };\n\n  /**\n   * Set the notFound route handler.\n   *\n   * @param {Object} handler\n   */\n\n  Router.prototype._notFound = function _notFound(handler) {\n    guardComponent('*', handler);\n    this._notFoundHandler = [{ handler: handler }];\n  };\n\n  /**\n   * Add a redirect record.\n   *\n   * @param {String} path\n   * @param {String} redirectPath\n   */\n\n  Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {\n    if (path === '*') {\n      this._notFoundRedirect = redirectPath;\n    } else {\n      this._addGuard(path, redirectPath, this.replace);\n    }\n  };\n\n  /**\n   * Add an alias record.\n   *\n   * @param {String} path\n   * @param {String} aliasPath\n   */\n\n  Router.prototype._addAlias = function _addAlias(path, aliasPath) {\n    this._addGuard(path, aliasPath, this._match);\n  };\n\n  /**\n   * Add a path guard.\n   *\n   * @param {String} path\n   * @param {String} mappedPath\n   * @param {Function} handler\n   */\n\n  Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {\n    var _this = this;\n\n    this._guardRecognizer.add([{\n      path: path,\n      handler: function handler(match, query) {\n        var realPath = mapParams(mappedPath, match.params, query);\n        _handler.call(_this, realPath);\n      }\n    }]);\n  };\n\n  /**\n   * Check if a path matches any redirect records.\n   *\n   * @param {String} path\n   * @return {Boolean} - if true, will skip normal match.\n   */\n\n  Router.prototype._checkGuard = function _checkGuard(path) {\n    var matched = this._guardRecognizer.recognize(path);\n    if (matched) {\n      matched[0].handler(matched[0], matched.queryParams);\n      return true;\n    } else if (this._notFoundRedirect) {\n      matched = this._recognizer.recognize(path);\n      if (!matched) {\n        this.replace(this._notFoundRedirect);\n        return true;\n      }\n    }\n  };\n\n  /**\n   * Match a URL path and set the route context on vm,\n   * triggering view updates.\n   *\n   * @param {String} path\n   * @param {Object} [state]\n   * @param {String} [anchor]\n   */\n\n  Router.prototype._match = function _match(path, state, anchor) {\n    var _this2 = this;\n\n    if (this._checkGuard(path)) {\n      return;\n    }\n\n    var currentRoute = this._currentRoute;\n    var currentTransition = this._currentTransition;\n\n    if (currentTransition) {\n      if (currentTransition.to.path === path) {\n        // do nothing if we have an active transition going to the same path\n        return;\n      } else if (currentRoute.path === path) {\n        // We are going to the same path, but we also have an ongoing but\n        // not-yet-validated transition. Abort that transition and reset to\n        // prev transition.\n        currentTransition.aborted = true;\n        this._currentTransition = this._prevTransition;\n        return;\n      } else {\n        // going to a totally different path. abort ongoing transition.\n        currentTransition.aborted = true;\n      }\n    }\n\n    // construct new route and transition context\n    var route = new Route(path, this);\n    var transition = new RouteTransition(this, route, currentRoute);\n\n    // current transition is updated right now.\n    // however, current route will only be updated after the transition has\n    // been validated.\n    this._prevTransition = currentTransition;\n    this._currentTransition = transition;\n\n    if (!this.app) {\n      // initial render\n      this.app = new this._appConstructor({\n        el: this._appContainer,\n        _meta: {\n          $route: route\n        }\n      });\n    }\n\n    // check global before hook\n    var beforeHooks = this._beforeEachHooks;\n    var startTransition = function startTransition() {\n      transition.start(function () {\n        _this2._postTransition(route, state, anchor);\n      });\n    };\n\n    if (beforeHooks.length) {\n      transition.runQueue(beforeHooks, function (hook, _, next) {\n        if (transition === _this2._currentTransition) {\n          transition.callHook(hook, null, next, {\n            expectBoolean: true\n          });\n        }\n      }, startTransition);\n    } else {\n      startTransition();\n    }\n\n    if (!this._rendered && this._startCb) {\n      this._startCb.call(null);\n    }\n\n    // HACK:\n    // set rendered to true after the transition start, so\n    // that components that are acitvated synchronously know\n    // whether it is the initial render.\n    this._rendered = true;\n  };\n\n  /**\n   * Set current to the new transition.\n   * This is called by the transition object when the\n   * validation of a route has succeeded.\n   *\n   * @param {Transition} transition\n   */\n\n  Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {\n    // set current route\n    var route = this._currentRoute = transition.to;\n    // update route context for all children\n    if (this.app.$route !== route) {\n      this.app.$route = route;\n      this._children.forEach(function (child) {\n        child.$route = route;\n      });\n    }\n    // call global after hook\n    if (this._afterEachHooks.length) {\n      this._afterEachHooks.forEach(function (hook) {\n        return hook.call(null, {\n          to: transition.to,\n          from: transition.from\n        });\n      });\n    }\n    this._currentTransition.done = true;\n  };\n\n  /**\n   * Handle stuff after the transition.\n   *\n   * @param {Route} route\n   * @param {Object} [state]\n   * @param {String} [anchor]\n   */\n\n  Router.prototype._postTransition = function _postTransition(route, state, anchor) {\n    // handle scroll positions\n    // saved scroll positions take priority\n    // then we check if the path has an anchor\n    var pos = state && state.pos;\n    if (pos && this._saveScrollPosition) {\n      Vue.nextTick(function () {\n        window.scrollTo(pos.x, pos.y);\n      });\n    } else if (anchor) {\n      Vue.nextTick(function () {\n        var el = document.getElementById(anchor.slice(1));\n        if (el) {\n          window.scrollTo(window.scrollX, el.offsetTop);\n        }\n      });\n    }\n  };\n\n  /**\n   * Normalize named route object / string paths into\n   * a string.\n   *\n   * @param {Object|String|Number} path\n   * @return {String}\n   */\n\n  Router.prototype._stringifyPath = function _stringifyPath(path) {\n    if (path && typeof path === 'object') {\n      if (path.name) {\n        var params = path.params || {};\n        if (path.query) {\n          params.queryParams = path.query;\n        }\n        return this._recognizer.generate(path.name, params);\n      } else if (path.path) {\n        var fullPath = path.path;\n        if (path.query) {\n          var query = this._recognizer.generateQueryString(path.query);\n          if (fullPath.indexOf('?') > -1) {\n            fullPath += '&' + query.slice(1);\n          } else {\n            fullPath += query;\n          }\n        }\n        return fullPath;\n      } else {\n        return '';\n      }\n    } else {\n      return path ? path + '' : '';\n    }\n  };\n\n  return Router;\n})();\n\nfunction guardComponent(path, handler) {\n  var comp = handler.component;\n  if (Vue.util.isPlainObject(comp)) {\n    comp = handler.component = Vue.extend(comp);\n  }\n  /* istanbul ignore if */\n  if (typeof comp !== 'function') {\n    handler.component = null;\n    warn('invalid component for route \"' + path + '\".');\n  }\n}\n\n/* Installation */\n\nRouter.installed = false;\n\n/**\n * Installation interface.\n * Install the necessary directives.\n */\n\nRouter.install = function (externalVue) {\n  /* istanbul ignore if */\n  if (Router.installed) {\n    warn('already installed.');\n    return;\n  }\n  Vue = externalVue;\n  applyOverride(Vue);\n  View(Vue);\n  Link(Vue);\n  exports$1.Vue = Vue;\n  Router.installed = true;\n};\n\n// auto install\n/* istanbul ignore if */\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(Router);\n}\n\nmodule.exports = Router;\n},{}],29:[function(require,module,exports){\nvar _ = require('../util')\nvar Watcher = require('../watcher')\nvar Path = require('../parsers/path')\nvar textParser = require('../parsers/text')\nvar dirParser = require('../parsers/directive')\nvar expParser = require('../parsers/expression')\nvar filterRE = /[^|]\\|[^|]/\n\n/**\n * Get the value from an expression on this vm.\n *\n * @param {String} exp\n * @param {Boolean} [asStatement]\n * @return {*}\n */\n\nexports.$get = function (exp, asStatement) {\n  var res = expParser.parse(exp)\n  if (res) {\n    if (asStatement && !expParser.isSimplePath(exp)) {\n      var self = this\n      return function statementHandler () {\n        res.get.call(self, self)\n      }\n    } else {\n      try {\n        return res.get.call(this, this)\n      } catch (e) {}\n    }\n  }\n}\n\n/**\n * Set the value from an expression on this vm.\n * The expression must be a valid left-hand\n * expression in an assignment.\n *\n * @param {String} exp\n * @param {*} val\n */\n\nexports.$set = function (exp, val) {\n  var res = expParser.parse(exp, true)\n  if (res && res.set) {\n    res.set.call(this, this, val)\n  }\n}\n\n/**\n * Delete a property on the VM\n *\n * @param {String} key\n */\n\nexports.$delete = function (key) {\n  _.delete(this._data, key)\n}\n\n/**\n * Watch an expression, trigger callback when its\n * value changes.\n *\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} [options]\n *                 - {Boolean} deep\n *                 - {Boolean} immediate\n * @return {Function} - unwatchFn\n */\n\nexports.$watch = function (expOrFn, cb, options) {\n  var vm = this\n  var parsed\n  if (typeof expOrFn === 'string') {\n    parsed = dirParser.parse(expOrFn)\n    expOrFn = parsed.expression\n  }\n  var watcher = new Watcher(vm, expOrFn, cb, {\n    deep: options && options.deep,\n    filters: parsed && parsed.filters\n  })\n  if (options && options.immediate) {\n    cb.call(vm, watcher.value)\n  }\n  return function unwatchFn () {\n    watcher.teardown()\n  }\n}\n\n/**\n * Evaluate a text directive, including filters.\n *\n * @param {String} text\n * @param {Boolean} [asStatement]\n * @return {String}\n */\n\nexports.$eval = function (text, asStatement) {\n  // check for filters.\n  if (filterRE.test(text)) {\n    var dir = dirParser.parse(text)\n    // the filter regex check might give false positive\n    // for pipes inside strings, so it's possible that\n    // we don't get any filters here\n    var val = this.$get(dir.expression, asStatement)\n    return dir.filters\n      ? this._applyFilters(val, null, dir.filters)\n      : val\n  } else {\n    // no filter\n    return this.$get(text, asStatement)\n  }\n}\n\n/**\n * Interpolate a piece of template text.\n *\n * @param {String} text\n * @return {String}\n */\n\nexports.$interpolate = function (text) {\n  var tokens = textParser.parse(text)\n  var vm = this\n  if (tokens) {\n    if (tokens.length === 1) {\n      return vm.$eval(tokens[0].value) + ''\n    } else {\n      return tokens.map(function (token) {\n        return token.tag\n          ? vm.$eval(token.value)\n          : token.value\n      }).join('')\n    }\n  } else {\n    return text\n  }\n}\n\n/**\n * Log instance data as a plain JS object\n * so that it is easier to inspect in console.\n * This method assumes console is available.\n *\n * @param {String} [path]\n */\n\nexports.$log = function (path) {\n  var data = path\n    ? Path.get(this._data, path)\n    : this._data\n  if (data) {\n    data = clean(data)\n  }\n  // include computed fields\n  if (!path) {\n    for (var key in this.$options.computed) {\n      data[key] = clean(this[key])\n    }\n  }\n  console.log(data)\n}\n\n/**\n * \"clean\" a getter/setter converted object into a plain\n * object copy.\n *\n * @param {Object} - obj\n * @return {Object}\n */\n\nfunction clean (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\n},{\"../parsers/directive\":79,\"../parsers/expression\":80,\"../parsers/path\":81,\"../parsers/text\":83,\"../util\":91,\"../watcher\":95}],30:[function(require,module,exports){\nvar _ = require('../util')\nvar transition = require('../transition')\n\n/**\n * Convenience on-instance nextTick. The callback is\n * auto-bound to the instance, and this avoids component\n * modules having to rely on the global Vue.\n *\n * @param {Function} fn\n */\n\nexports.$nextTick = function (fn) {\n  _.nextTick(fn, this)\n}\n\n/**\n * Append instance to target\n *\n * @param {Node} target\n * @param {Function} [cb]\n * @param {Boolean} [withTransition] - defaults to true\n */\n\nexports.$appendTo = function (target, cb, withTransition) {\n  return insert(\n    this, target, cb, withTransition,\n    append, transition.append\n  )\n}\n\n/**\n * Prepend instance to target\n *\n * @param {Node} target\n * @param {Function} [cb]\n * @param {Boolean} [withTransition] - defaults to true\n */\n\nexports.$prependTo = function (target, cb, withTransition) {\n  target = query(target)\n  if (target.hasChildNodes()) {\n    this.$before(target.firstChild, cb, withTransition)\n  } else {\n    this.$appendTo(target, cb, withTransition)\n  }\n  return this\n}\n\n/**\n * Insert instance before target\n *\n * @param {Node} target\n * @param {Function} [cb]\n * @param {Boolean} [withTransition] - defaults to true\n */\n\nexports.$before = function (target, cb, withTransition) {\n  return insert(\n    this, target, cb, withTransition,\n    before, transition.before\n  )\n}\n\n/**\n * Insert instance after target\n *\n * @param {Node} target\n * @param {Function} [cb]\n * @param {Boolean} [withTransition] - defaults to true\n */\n\nexports.$after = function (target, cb, withTransition) {\n  target = query(target)\n  if (target.nextSibling) {\n    this.$before(target.nextSibling, cb, withTransition)\n  } else {\n    this.$appendTo(target.parentNode, cb, withTransition)\n  }\n  return this\n}\n\n/**\n * Remove instance from DOM\n *\n * @param {Function} [cb]\n * @param {Boolean} [withTransition] - defaults to true\n */\n\nexports.$remove = function (cb, withTransition) {\n  if (!this.$el.parentNode) {\n    return cb && cb()\n  }\n  var inDoc = this._isAttached && _.inDoc(this.$el)\n  // if we are not in document, no need to check\n  // for transitions\n  if (!inDoc) withTransition = false\n  var self = this\n  var realCb = function () {\n    if (inDoc) self._callHook('detached')\n    if (cb) cb()\n  }\n  if (this._isFragment) {\n    _.removeNodeRange(\n      this._fragmentStart,\n      this._fragmentEnd,\n      this, this._fragment, realCb\n    )\n  } else {\n    var op = withTransition === false\n      ? remove\n      : transition.remove\n    op(this.$el, this, realCb)\n  }\n  return this\n}\n\n/**\n * Shared DOM insertion function.\n *\n * @param {Vue} vm\n * @param {Element} target\n * @param {Function} [cb]\n * @param {Boolean} [withTransition]\n * @param {Function} op1 - op for non-transition insert\n * @param {Function} op2 - op for transition insert\n * @return vm\n */\n\nfunction insert (vm, target, cb, withTransition, op1, op2) {\n  target = query(target)\n  var targetIsDetached = !_.inDoc(target)\n  var op = withTransition === false || targetIsDetached\n      ? op1\n      : op2\n  var shouldCallHook =\n    !targetIsDetached &&\n    !vm._isAttached &&\n    !_.inDoc(vm.$el)\n  if (vm._isFragment) {\n    _.mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n      op(node, target, vm)\n    })\n    cb && cb()\n  } else {\n    op(vm.$el, target, vm, cb)\n  }\n  if (shouldCallHook) {\n    vm._callHook('attached')\n  }\n  return vm\n}\n\n/**\n * Check for selectors\n *\n * @param {String|Element} el\n */\n\nfunction query (el) {\n  return typeof el === 'string'\n    ? document.querySelector(el)\n    : el\n}\n\n/**\n * Append operation that takes a callback.\n *\n * @param {Node} el\n * @param {Node} target\n * @param {Vue} vm - unused\n * @param {Function} [cb]\n */\n\nfunction append (el, target, vm, cb) {\n  target.appendChild(el)\n  if (cb) cb()\n}\n\n/**\n * InsertBefore operation that takes a callback.\n *\n * @param {Node} el\n * @param {Node} target\n * @param {Vue} vm - unused\n * @param {Function} [cb]\n */\n\nfunction before (el, target, vm, cb) {\n  _.before(el, target)\n  if (cb) cb()\n}\n\n/**\n * Remove operation that takes a callback.\n *\n * @param {Node} el\n * @param {Vue} vm - unused\n * @param {Function} [cb]\n */\n\nfunction remove (el, vm, cb) {\n  _.remove(el)\n  if (cb) cb()\n}\n\n},{\"../transition\":84,\"../util\":91}],31:[function(require,module,exports){\nvar _ = require('../util')\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n */\n\nexports.$on = function (event, fn) {\n  (this._events[event] || (this._events[event] = []))\n    .push(fn)\n  modifyListenerCount(this, event, 1)\n  return this\n}\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n */\n\nexports.$once = function (event, fn) {\n  var self = this\n  function on () {\n    self.$off(event, on)\n    fn.apply(this, arguments)\n  }\n  on.fn = fn\n  this.$on(event, on)\n  return this\n}\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n */\n\nexports.$off = function (event, fn) {\n  var cbs\n  // all\n  if (!arguments.length) {\n    if (this.$parent) {\n      for (event in this._events) {\n        cbs = this._events[event]\n        if (cbs) {\n          modifyListenerCount(this, event, -cbs.length)\n        }\n      }\n    }\n    this._events = {}\n    return this\n  }\n  // specific event\n  cbs = this._events[event]\n  if (!cbs) {\n    return this\n  }\n  if (arguments.length === 1) {\n    modifyListenerCount(this, event, -cbs.length)\n    this._events[event] = null\n    return this\n  }\n  // specific handler\n  var cb\n  var i = cbs.length\n  while (i--) {\n    cb = cbs[i]\n    if (cb === fn || cb.fn === fn) {\n      modifyListenerCount(this, event, -1)\n      cbs.splice(i, 1)\n      break\n    }\n  }\n  return this\n}\n\n/**\n * Trigger an event on self.\n *\n * @param {String} event\n */\n\nexports.$emit = function (event) {\n  var cbs = this._events[event]\n  this._shouldPropagate = !cbs\n  if (cbs) {\n    cbs = cbs.length > 1\n      ? _.toArray(cbs)\n      : cbs\n    var args = _.toArray(arguments, 1)\n    for (var i = 0, l = cbs.length; i < l; i++) {\n      var res = cbs[i].apply(this, args)\n      if (res === true) {\n        this._shouldPropagate = true\n      }\n    }\n  }\n  return this\n}\n\n/**\n * Recursively broadcast an event to all children instances.\n *\n * @param {String} event\n * @param {...*} additional arguments\n */\n\nexports.$broadcast = function (event) {\n  // if no child has registered for this event,\n  // then there's no need to broadcast.\n  if (!this._eventsCount[event]) return\n  var children = this.$children\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i]\n    child.$emit.apply(child, arguments)\n    if (child._shouldPropagate) {\n      child.$broadcast.apply(child, arguments)\n    }\n  }\n  return this\n}\n\n/**\n * Recursively propagate an event up the parent chain.\n *\n * @param {String} event\n * @param {...*} additional arguments\n */\n\nexports.$dispatch = function () {\n  this.$emit.apply(this, arguments)\n  var parent = this.$parent\n  while (parent) {\n    parent.$emit.apply(parent, arguments)\n    parent = parent._shouldPropagate\n      ? parent.$parent\n      : null\n  }\n  return this\n}\n\n/**\n * Modify the listener counts on all parents.\n * This bookkeeping allows $broadcast to return early when\n * no child has listened to a certain event.\n *\n * @param {Vue} vm\n * @param {String} event\n * @param {Number} count\n */\n\nvar hookRE = /^hook:/\nfunction modifyListenerCount (vm, event, count) {\n  var parent = vm.$parent\n  // hooks do not get broadcasted so no need\n  // to do bookkeeping for them\n  if (!parent || !count || hookRE.test(event)) return\n  while (parent) {\n    parent._eventsCount[event] =\n      (parent._eventsCount[event] || 0) + count\n    parent = parent.$parent\n  }\n}\n\n},{\"../util\":91}],32:[function(require,module,exports){\nvar _ = require('../util')\nvar config = require('../config')\n\n/**\n * Expose useful internals\n */\n\nexports.util = _\nexports.config = config\nexports.set = _.set\nexports.delete = _.delete\nexports.nextTick = _.nextTick\n\n/**\n * The following are exposed for advanced usage / plugins\n */\n\nexports.compiler = require('../compiler')\nexports.FragmentFactory = require('../fragment/factory')\nexports.internalDirectives = require('../directives/internal')\nexports.parsers = {\n  path: require('../parsers/path'),\n  text: require('../parsers/text'),\n  template: require('../parsers/template'),\n  directive: require('../parsers/directive'),\n  expression: require('../parsers/expression')\n}\n\n/**\n * Each instance constructor, including Vue, has a unique\n * cid. This enables us to create wrapped \"child\n * constructors\" for prototypal inheritance and cache them.\n */\n\nexports.cid = 0\nvar cid = 1\n\n/**\n * Class inheritance\n *\n * @param {Object} extendOptions\n */\n\nexports.extend = function (extendOptions) {\n  extendOptions = extendOptions || {}\n  var Super = this\n  var isFirstExtend = Super.cid === 0\n  if (isFirstExtend && extendOptions._Ctor) {\n    return extendOptions._Ctor\n  }\n  var name = extendOptions.name || Super.options.name\n  var Sub = createClass(name || 'VueComponent')\n  Sub.prototype = Object.create(Super.prototype)\n  Sub.prototype.constructor = Sub\n  Sub.cid = cid++\n  Sub.options = _.mergeOptions(\n    Super.options,\n    extendOptions\n  )\n  Sub['super'] = Super\n  // allow further extension\n  Sub.extend = Super.extend\n  // create asset registers, so extended classes\n  // can have their private assets too.\n  config._assetTypes.forEach(function (type) {\n    Sub[type] = Super[type]\n  })\n  // enable recursive self-lookup\n  if (name) {\n    Sub.options.components[name] = Sub\n  }\n  // cache constructor\n  if (isFirstExtend) {\n    extendOptions._Ctor = Sub\n  }\n  return Sub\n}\n\n/**\n * A function that returns a sub-class constructor with the\n * given name. This gives us much nicer output when\n * logging instances in the console.\n *\n * @param {String} name\n * @return {Function}\n */\n\nfunction createClass (name) {\n  return new Function(\n    'return function ' + _.classify(name) +\n    ' (options) { this._init(options) }'\n  )()\n}\n\n/**\n * Plugin system\n *\n * @param {Object} plugin\n */\n\nexports.use = function (plugin) {\n  /* istanbul ignore if */\n  if (plugin.installed) {\n    return\n  }\n  // additional parameters\n  var args = _.toArray(arguments, 1)\n  args.unshift(this)\n  if (typeof plugin.install === 'function') {\n    plugin.install.apply(plugin, args)\n  } else {\n    plugin.apply(null, args)\n  }\n  plugin.installed = true\n  return this\n}\n\n/**\n * Apply a global mixin by merging it into the default\n * options.\n */\n\nexports.mixin = function (mixin) {\n  var Vue = _.Vue\n  Vue.options = _.mergeOptions(Vue.options, mixin)\n}\n\n/**\n * Create asset registration methods with the following\n * signature:\n *\n * @param {String} id\n * @param {*} definition\n */\n\nconfig._assetTypes.forEach(function (type) {\n  exports[type] = function (id, definition) {\n    if (!definition) {\n      return this.options[type + 's'][id]\n    } else {\n      if (\n        type === 'component' &&\n        _.isPlainObject(definition)\n      ) {\n        definition.name = id\n        definition = _.Vue.extend(definition)\n      }\n      this.options[type + 's'][id] = definition\n      return definition\n    }\n  }\n})\n\n},{\"../compiler\":38,\"../config\":40,\"../directives/internal\":47,\"../fragment/factory\":69,\"../parsers/directive\":79,\"../parsers/expression\":80,\"../parsers/path\":81,\"../parsers/template\":82,\"../parsers/text\":83,\"../util\":91}],33:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar compiler = require('../compiler')\n\n/**\n * Set instance target element and kick off the compilation\n * process. The passed in `el` can be a selector string, an\n * existing Element, or a DocumentFragment (for block\n * instances).\n *\n * @param {Element|DocumentFragment|string} el\n * @public\n */\n\nexports.$mount = function (el) {\n  if (this._isCompiled) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      '$mount() should be called only once.'\n    )\n    return\n  }\n  el = _.query(el)\n  if (!el) {\n    el = document.createElement('div')\n  }\n  this._compile(el)\n  this._initDOMHooks()\n  if (_.inDoc(this.$el)) {\n    this._callHook('attached')\n    ready.call(this)\n  } else {\n    this.$once('hook:attached', ready)\n  }\n  return this\n}\n\n/**\n * Mark an instance as ready.\n */\n\nfunction ready () {\n  this._isAttached = true\n  this._isReady = true\n  this._callHook('ready')\n}\n\n/**\n * Teardown the instance, simply delegate to the internal\n * _destroy.\n */\n\nexports.$destroy = function (remove, deferCleanup) {\n  this._destroy(remove, deferCleanup)\n}\n\n/**\n * Partially compile a piece of DOM and return a\n * decompile function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Vue} [host]\n * @return {Function}\n */\n\nexports.$compile = function (el, host, scope, frag) {\n  return compiler.compile(el, this.$options, true)(\n    this, el, host, scope, frag\n  )\n}\n\n}).call(this,require('_process'))\n\n},{\"../compiler\":38,\"../util\":91,\"_process\":1}],34:[function(require,module,exports){\n(function (process){\nvar _ = require('./util')\nvar config = require('./config')\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\nvar queue = []\nvar userQueue = []\nvar has = {}\nvar circular = {}\nvar waiting = false\nvar internalQueueDepleted = false\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState () {\n  queue = []\n  userQueue = []\n  has = {}\n  circular = {}\n  waiting = internalQueueDepleted = false\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue () {\n  runBatcherQueue(queue)\n  internalQueueDepleted = true\n  runBatcherQueue(userQueue)\n  // dev tool hook\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (_.inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n      window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('flush')\n    }\n  }\n  resetBatcherState()\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue (queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i]\n    var id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] > config._maxUpdateCount) {\n        queue.splice(has[id], 1)\n        _.warn(\n          'You may have an infinite update loop for watcher ' +\n          'with expression: ' + watcher.expression\n        )\n      }\n    }\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nexports.push = function (watcher) {\n  var id = watcher.id\n  if (has[id] == null) {\n    // if an internal watcher is pushed, but the internal\n    // queue is already depleted, we run it immediately.\n    if (internalQueueDepleted && !watcher.user) {\n      watcher.run()\n      return\n    }\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue\n    has[id] = q.length\n    q.push(watcher)\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n      _.nextTick(flushBatcherQueue)\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"./config\":40,\"./util\":91,\"_process\":1}],35:[function(require,module,exports){\n/**\n * A doubly linked list-based Least Recently Used (LRU)\n * cache. Will keep most recently used items while\n * discarding least recently used items when its limit is\n * reached. This is a bare-bone version of\n * Rasmus Andersson's js-lru:\n *\n *   https://github.com/rsms/js-lru\n *\n * @param {Number} limit\n * @constructor\n */\n\nfunction Cache (limit) {\n  this.size = 0\n  this.limit = limit\n  this.head = this.tail = undefined\n  this._keymap = Object.create(null)\n}\n\nvar p = Cache.prototype\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var entry = {\n    key: key,\n    value: value\n  }\n  this._keymap[key] = entry\n  if (this.tail) {\n    this.tail.newer = entry\n    entry.older = this.tail\n  } else {\n    this.head = entry\n  }\n  this.tail = entry\n  if (this.size === this.limit) {\n    return this.shift()\n  } else {\n    this.size++\n  }\n}\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head\n  if (entry) {\n    this.head = this.head.newer\n    this.head.older = undefined\n    entry.newer = entry.older = undefined\n    this._keymap[entry.key] = undefined\n  }\n  return entry\n}\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key]\n  if (entry === undefined) return\n  if (entry === this.tail) {\n    return returnEntry\n      ? entry\n      : entry.value\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer\n    }\n    entry.newer.older = entry.older // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer // C. --> E\n  }\n  entry.newer = undefined // D --x\n  entry.older = this.tail // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry // E. <-- D\n  }\n  this.tail = entry\n  return returnEntry\n    ? entry\n    : entry.value\n}\n\nmodule.exports = Cache\n\n},{}],36:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar dirParser = require('../parsers/directive')\nvar propDef = require('../directives/internal/prop')\nvar propBindingModes = require('../config')._propBindingModes\nvar empty = {}\n\n// regexes\nvar identRE = require('../parsers/path').identRE\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @return {Function} propsLinkFn\n */\n\nmodule.exports = function compileProps (el, propOptions) {\n  var props = []\n  var names = Object.keys(propOptions)\n  var i = names.length\n  var options, name, attr, value, path, parsed, prop, isTitleBinding\n  while (i--) {\n    name = names[i]\n    options = propOptions[name] || empty\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      _.warn('Do not use $data as prop.')\n      continue\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = _.camelize(name)\n    if (!identRE.test(path)) {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'Invalid prop key: \"' + name + '\". Prop keys ' +\n        'must be valid identifiers.'\n      )\n      continue\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY\n    }\n\n    // IE title issues\n    isTitleBinding = false\n    if (name === 'title' && (el.getAttribute(':title') || el.getAttribute('v-bind:title'))) {\n      isTitleBinding = true\n    }\n\n    // first check literal version\n    attr = _.hyphenate(name)\n    value = prop.raw = _.attr(el, attr)\n    if (value === null || isTitleBinding) {\n      // then check dynamic version\n      if ((value = _.getBindAttr(el, attr)) === null) {\n        if ((value = _.getBindAttr(el, attr + '.sync')) !== null) {\n          prop.mode = propBindingModes.TWO_WAY\n        } else if ((value = _.getBindAttr(el, attr + '.once')) !== null) {\n          prop.mode = propBindingModes.ONE_TIME\n        }\n      }\n      prop.raw = value\n      if (value !== null) {\n        parsed = dirParser.parse(value)\n        value = parsed.expression\n        prop.filters = parsed.filters\n        // check binding type\n        if (_.isLiteral(value)) {\n          // for expressions containing literal numbers and\n          // booleans, there's no need to setup a prop binding,\n          // so we can optimize them as a one-time set.\n          prop.optimizedLiteral = true\n        } else {\n          prop.dynamic = true\n          // check non-settable path for two-way bindings\n          if (process.env.NODE_ENV !== 'production' &&\n              prop.mode === propBindingModes.TWO_WAY &&\n              !settablePathRE.test(value)) {\n            prop.mode = propBindingModes.ONE_WAY\n            _.warn(\n              'Cannot bind two-way prop with non-settable ' +\n              'parent path: ' + value\n            )\n          }\n        }\n        prop.parentPath = value\n\n        // warn required two-way\n        if (\n          process.env.NODE_ENV !== 'production' &&\n          options.twoWay &&\n          prop.mode !== propBindingModes.TWO_WAY\n        ) {\n          _.warn(\n            'Prop \"' + name + '\" expects a two-way binding type.'\n          )\n        }\n\n      } else if (options.required) {\n        // warn missing required\n        process.env.NODE_ENV !== 'production' && _.warn(\n          'Missing required prop: ' + name\n        )\n      }\n    }\n\n    // push prop\n    props.push(prop)\n  }\n  return makePropsLinkFn(props)\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn (props) {\n  return function propsLinkFn (vm, scope) {\n    // store resolved props info\n    vm._props = {}\n    var i = props.length\n    var prop, path, options, value, raw\n    while (i--) {\n      prop = props[i]\n      raw = prop.raw\n      path = prop.path\n      options = prop.options\n      vm._props[path] = prop\n      if (raw === null) {\n        // initialize absent prop\n        _.initProp(vm, prop, getDefault(vm, options))\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (vm._context) {\n          if (prop.mode === propBindingModes.ONE_TIME) {\n            // one time binding\n            value = (scope || vm._context).$get(prop.parentPath)\n            _.initProp(vm, prop, value)\n          } else {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope) // el, host, scope\n          }\n        } else {\n          process.env.NODE_ENV !== 'production' && _.warn(\n            'Cannot bind dynamic prop on a root instance' +\n            ' with no parent: ' + prop.name + '=\"' +\n            raw + '\"'\n          )\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        raw = _.stripQuotes(raw)\n        value = _.toBoolean(_.toNumber(raw))\n        _.initProp(vm, prop, value)\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value\n        value = options.type === Boolean && raw === ''\n          ? true\n          : raw\n        _.initProp(vm, prop, value)\n      }\n    }\n  }\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} options\n * @return {*}\n */\n\nfunction getDefault (vm, options) {\n  // no default, return undefined\n  if (!options.hasOwnProperty('default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean\n      ? false\n      : undefined\n  }\n  var def = options.default\n  // warn against non-factory defaults for Object & Array\n  if (_.isObject(def)) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Object/Array as default prop values will be shared ' +\n      'across multiple instances. Use a factory function ' +\n      'to return the default value instead.'\n    )\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function\n    ? def.call(vm)\n    : def\n}\n\n}).call(this,require('_process'))\n\n},{\"../config\":40,\"../directives/internal/prop\":48,\"../parsers/directive\":79,\"../parsers/path\":81,\"../util\":91,\"_process\":1}],37:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar publicDirectives = require('../directives/public')\nvar internalDirectives = require('../directives/internal')\nvar compileProps = require('./compile-props')\nvar textParser = require('../parsers/text')\nvar dirParser = require('../parsers/directive')\nvar templateParser = require('../parsers/template')\nvar resolveAsset = _.resolveAsset\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/\nvar onRE = /^v-on:|^@/\nvar argRE = /:(.*)$/\nvar modifierRE = /\\.[^\\.]+/g\nvar transitionRE = /^(v-bind:|:)?transition$/\n\n// terminal directives\nvar terminalDirectives = [\n  'for',\n  'if'\n]\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nexports.compile = function (el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent\n    ? compileNode(el, options)\n    : null\n  // link function for the childNodes\n  var childLinkFn =\n    !(nodeLinkFn && nodeLinkFn.terminal) &&\n    el.tagName !== 'SCRIPT' &&\n    el.hasChildNodes()\n      ? compileNodeList(el.childNodes, options)\n      : null\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn (vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = _.toArray(el.childNodes)\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer () {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag)\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag)\n    }, vm)\n    return makeUnlinkFn(vm, dirs)\n  }\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture (linker, vm) {\n  var originalDirCount = vm._directives.length\n  linker()\n  var dirs = vm._directives.slice(originalDirCount)\n  dirs.sort(directiveComparator)\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind()\n  }\n  return dirs\n}\n\n/**\n * Directive priority sort comparator\n *\n * @param {Object} a\n * @param {Object} b\n */\n\nfunction directiveComparator (a, b) {\n  a = a.descriptor.def.priority || DEFAULT_PRIORITY\n  b = b.descriptor.def.priority || DEFAULT_PRIORITY\n  return a > b ? -1 : a === b ? 0 : 1\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn (vm, dirs, context, contextDirs) {\n  return function unlink (destroying) {\n    teardownDirs(vm, dirs, destroying)\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs)\n    }\n  }\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs (vm, dirs, destroying) {\n  var i = dirs.length\n  while (i--) {\n    dirs[i]._teardown()\n    if (!destroying) {\n      vm._directives.$remove(dirs[i])\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nexports.compileAndLinkProps = function (vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props)\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope)\n  }, vm)\n  return makeUnlinkFn(vm, propDirs)\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nexports.compileRoot = function (el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs\n  var replacerAttrs = options._replacerAttrs\n  var contextLinkFn, replacerLinkFn\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions)\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options)\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options)\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.map(function (attr) {\n      return '\"' + attr.name + '\"'\n    }).join(', ')\n    var plural = containerAttrs.length > 1\n    _.warn(\n      'Attribute' + (plural ? 's ' : ' ') + names +\n      (plural ? ' are' : ' is') + ' ignored on component ' +\n      '<' + options.el.tagName.toLowerCase() + '> because ' +\n      'the component is a fragment instance: ' +\n      'http://vuejs.org/guide/components.html#Fragment_Instance'\n    )\n  }\n\n  return function rootLinkFn (vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context\n    var contextDirs\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope)\n      }, context)\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el)\n    }, vm)\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs)\n  }\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode (node, options) {\n  var type = node.nodeType\n  if (type === 1 && node.tagName !== 'SCRIPT') {\n    return compileElement(node, options)\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options)\n  } else {\n    return null\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement (el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    var tokens = textParser.parse(el.value)\n    if (tokens) {\n      el.setAttribute(':value', textParser.tokensToExp(tokens))\n      el.value = ''\n    }\n  }\n  var linkFn\n  var hasAttrs = el.hasAttributes()\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, options)\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options)\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options)\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(el.attributes, options)\n  }\n  return linkFn\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode (node, options) {\n  var tokens = textParser.parse(node.data)\n  if (!tokens) {\n    return null\n  }\n  var frag = document.createDocumentFragment()\n  var el, token\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i]\n    el = token.tag\n      ? processTextToken(token, options)\n      : document.createTextNode(token.value)\n    frag.appendChild(el)\n  }\n  return makeTextNodeLinkFn(tokens, frag, options)\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken (token, options) {\n  var el\n  if (token.oneTime) {\n    el = document.createTextNode(token.value)\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html')\n      setTokenType('html')\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ')\n      setTokenType('text')\n    }\n  }\n  function setTokenType (type) {\n    if (token.descriptor) return\n    var parsed = dirParser.parse(token.value)\n    token.descriptor = {\n      name: type,\n      def: publicDirectives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    }\n  }\n  return el\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn (tokens, frag) {\n  return function textNodeLinkFn (vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true)\n    var childNodes = _.toArray(fragClone.childNodes)\n    var token, value, node\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i]\n      value = token.value\n      if (token.tag) {\n        node = childNodes[i]\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value)\n          if (token.html) {\n            _.replace(node, templateParser.parse(value, true))\n          } else {\n            node.data = value\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope)\n        }\n      }\n    }\n    _.replace(el, fragClone)\n  }\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList (nodeList, options) {\n  var linkFns = []\n  var nodeLinkFn, childLinkFn, node\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i]\n    nodeLinkFn = compileNode(node, options)\n    childLinkFn =\n      !(nodeLinkFn && nodeLinkFn.terminal) &&\n      node.tagName !== 'SCRIPT' &&\n      node.hasChildNodes()\n        ? compileNodeList(node.childNodes, options)\n        : null\n    linkFns.push(nodeLinkFn, childLinkFn)\n  }\n  return linkFns.length\n    ? makeChildLinkFn(linkFns)\n    : null\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn (linkFns) {\n  return function childLinkFn (vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n]\n      nodeLinkFn = linkFns[i++]\n      childrenLinkFn = linkFns[i++]\n      // cache childNodes before linking parent, fix #657\n      var childNodes = _.toArray(node.childNodes)\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag)\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag)\n      }\n    }\n  }\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives (el, options) {\n  var tag = el.tagName.toLowerCase()\n  if (_.commonTagRE.test(tag)) return\n  var def = resolveAsset(options, 'elementDirectives', tag)\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def)\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent (el, options) {\n  var component = _.checkComponent(el, options)\n  if (component) {\n    var descriptor = {\n      name: 'component',\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    }\n    var componentLinkFn = function (vm, el, host, scope, frag) {\n      vm._bindDir(descriptor, el, host, scope, frag)\n    }\n    componentLinkFn.terminal = true\n    return componentLinkFn\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives (el, options) {\n  // skip v-pre\n  if (_.attr(el, 'v-pre') !== null) {\n    return skip\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip\n    }\n  }\n  var value, dirName\n  for (var i = 0, l = terminalDirectives.length; i < l; i++) {\n    dirName = terminalDirectives[i]\n    /* eslint-disable no-cond-assign */\n    if (value = el.getAttribute('v-' + dirName)) {\n      return makeTerminalNodeLinkFn(el, dirName, value, options)\n    }\n    /* eslint-enable no-cond-assign */\n  }\n}\n\nfunction skip () {}\nskip.terminal = true\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} [def]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn (el, dirName, value, options, def) {\n  var parsed = dirParser.parse(value)\n  var descriptor = {\n    name: dirName,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    // either an element directive, or if/for\n    def: def || publicDirectives[dirName]\n  }\n  var fn = function terminalNodeLinkFn (vm, el, host, scope, frag) {\n    vm._bindDir(descriptor, el, host, scope, frag)\n  }\n  fn.terminal = true\n  return fn\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives (attrs, options) {\n  var i = attrs.length\n  var dirs = []\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens\n  while (i--) {\n    attr = attrs[i]\n    name = rawName = attr.name\n    value = rawValue = attr.value\n    tokens = textParser.parse(value)\n    // reset arg\n    arg = null\n    // check modifiers\n    modifiers = parseModifiers(name)\n    name = name.replace(modifierRE, '')\n\n    // attribute interpolations\n    if (tokens) {\n      value = textParser.tokensToExp(tokens)\n      arg = name\n      pushDir('bind', publicDirectives.bind, true)\n    } else\n\n    // special attribute: transition\n    if (transitionRE.test(name)) {\n      modifiers.literal = !bindRE.test(name)\n      pushDir('transition', internalDirectives.transition)\n    } else\n\n    // event handlers\n    if (onRE.test(name)) {\n      arg = name.replace(onRE, '')\n      pushDir('on', publicDirectives.on)\n    } else\n\n    // attribute bindings\n    if (bindRE.test(name)) {\n      dirName = name.replace(bindRE, '')\n      if (dirName === 'style' || dirName === 'class') {\n        pushDir(dirName, internalDirectives[dirName])\n      } else {\n        arg = dirName\n        pushDir('bind', publicDirectives.bind)\n      }\n    } else\n\n    // normal directives\n    if (name.indexOf('v-') === 0) {\n      // check arg\n      arg = (arg = name.match(argRE)) && arg[1]\n      if (arg) {\n        name = name.replace(argRE, '')\n      }\n      // extract directive name\n      dirName = name.slice(2)\n\n      // skip v-else (when used with v-show)\n      if (dirName === 'else') {\n        continue\n      }\n\n      dirDef = resolveAsset(options, 'directives', dirName)\n\n      if (process.env.NODE_ENV !== 'production') {\n        _.assertAsset(dirDef, 'directive', dirName)\n      }\n\n      if (dirDef) {\n        if (_.isLiteral(value)) {\n          value = _.stripQuotes(value)\n          modifiers.literal = true\n        }\n        pushDir(dirName, dirDef)\n      }\n    }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Boolean} [interp]\n   */\n\n  function pushDir (dirName, def, interp) {\n    var parsed = dirParser.parse(value)\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      expression: parsed.expression,\n      filters: parsed.filters,\n      interp: interp\n    })\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs)\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers (name) {\n  var res = Object.create(null)\n  var match = name.match(modifierRE)\n  if (match) {\n    var i = match.length\n    while (i--) {\n      res[match[i].slice(1)] = true\n    }\n  }\n  return res\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn (directives) {\n  return function nodeLinkFn (vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag)\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../directives/internal\":47,\"../directives/public\":57,\"../parsers/directive\":79,\"../parsers/template\":82,\"../parsers/text\":83,\"../util\":91,\"./compile-props\":36,\"_process\":1}],38:[function(require,module,exports){\nvar _ = require('../util')\n\n_.extend(exports, require('./compile'))\n_.extend(exports, require('./transclude'))\n\n},{\"../util\":91,\"./compile\":37,\"./transclude\":39}],39:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar templateParser = require('../parsers/template')\nvar specialCharRE = /[^\\w\\-:\\.]/\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nexports.transclude = function (el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el)\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (_.isTemplate(el)) {\n    el = templateParser.parse(el)\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>'\n    }\n    if (options.template) {\n      options._content = _.extractContent(el)\n      el = transcludeTemplate(el, options)\n    }\n  }\n  if (el instanceof DocumentFragment) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    _.prepend(_.createAnchor('v-start', true), el)\n    el.appendChild(_.createAnchor('v-end', true))\n  }\n  return el\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate (el, options) {\n  var template = options.template\n  var frag = templateParser.parse(template, true)\n  if (frag) {\n    var replacer = frag.firstChild\n    var tag = replacer.tagName && replacer.tagName.toLowerCase()\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && _.warn(\n          'You are mounting an instance with a template to ' +\n          '<body>. This will replace <body> entirely. You ' +\n          'should probably use `replace: false` here.'\n        )\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n        // multi-children template\n        frag.childNodes.length > 1 ||\n        // non-element template\n        replacer.nodeType !== 1 ||\n        // single nested component\n        tag === 'component' ||\n        _.resolveAsset(options, 'components', tag) ||\n        replacer.hasAttribute('is') ||\n        replacer.hasAttribute(':is') ||\n        replacer.hasAttribute('v-bind:is') ||\n        // element directive\n        _.resolveAsset(options, 'elementDirectives', tag) ||\n        // for block\n        replacer.hasAttribute('v-for') ||\n        // if block\n        replacer.hasAttribute('v-if')\n      ) {\n        return frag\n      } else {\n        options._replacerAttrs = extractAttrs(replacer)\n        mergeAttrs(el, replacer)\n        return replacer\n      }\n    } else {\n      el.appendChild(frag)\n      return el\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Invalid template option: ' + template\n    )\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs (el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return _.toArray(el.attributes)\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs (from, to) {\n  var attrs = from.attributes\n  var i = attrs.length\n  var name, value\n  while (i--) {\n    name = attrs[i].name\n    value = attrs[i].value\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value)\n    } else if (name === 'class') {\n      value = to.getAttribute(name) + ' ' + value\n      to.setAttribute(name, value)\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../parsers/template\":82,\"../util\":91,\"_process\":1}],40:[function(require,module,exports){\nmodule.exports = {\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: [\n    'component',\n    'directive',\n    'elementDirective',\n    'filter',\n    'transition',\n    'partial'\n  ],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}\n\n/**\n * Interpolation delimiters. Changing these would trigger\n * the text parser to re-compile the regular expressions.\n *\n * @type {Array<String>}\n */\n\nvar delimiters = ['{{', '}}']\nvar unsafeDelimiters = ['{{{', '}}}']\nvar textParser = require('./parsers/text')\n\nObject.defineProperty(module.exports, 'delimiters', {\n  get: function () {\n    return delimiters\n  },\n  set: function (val) {\n    delimiters = val\n    textParser.compileRegex()\n  }\n})\n\nObject.defineProperty(module.exports, 'unsafeDelimiters', {\n  get: function () {\n    return unsafeDelimiters\n  },\n  set: function (val) {\n    unsafeDelimiters = val\n    textParser.compileRegex()\n  }\n})\n\n},{\"./parsers/text\":83}],41:[function(require,module,exports){\n(function (process){\nvar _ = require('./util')\nvar Watcher = require('./watcher')\nvar expParser = require('./parsers/expression')\nfunction noop () {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {String} name\n * @param {Node} el\n * @param {Vue} vm\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} raw\n * @param {Object} def - directive definition object\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\n\nfunction Directive (descriptor, vm, el, host, scope, frag) {\n  this.vm = vm\n  this.el = el\n  // copy descriptor properties\n  this.descriptor = descriptor\n  this.name = descriptor.name\n  this.expression = descriptor.expression\n  this.arg = descriptor.arg\n  this.modifiers = descriptor.modifiers\n  this.filters = descriptor.filters\n  this.literal = this.modifiers && this.modifiers.literal\n  // private\n  this._locked = false\n  this._bound = false\n  this._listeners = null\n  // link context\n  this._host = host\n  this._scope = scope\n  this._frag = frag\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || []\n    this.el._vue_directives.push(this)\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n *\n * @param {Object} def\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name\n  var descriptor = this.descriptor\n\n  // remove attribute\n  if (\n    (name !== 'cloak' || this.vm._isCompiled) &&\n    this.el && this.el.removeAttribute\n  ) {\n    var attr = descriptor.attr || ('v-' + name)\n    this.el.removeAttribute(attr)\n  }\n\n  // copy def properties\n  var def = descriptor.def\n  if (typeof def === 'function') {\n    this.update = def\n  } else {\n    _.extend(this, def)\n  }\n\n  // setup directive params\n  this._setupParams()\n\n  // initial bind\n  if (this.bind) {\n    this.bind()\n  }\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw)\n  } else if (\n    (this.expression || this.modifiers) &&\n    (this.update || this.twoWay) &&\n    !this._checkStatement()\n  ) {\n    // wrapped updater for context\n    var dir = this\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal)\n        }\n      }\n    } else {\n      this._update = noop\n    }\n    var preProcess = this._preProcess\n      ? _.bind(this._preProcess, this)\n      : null\n    var postProcess = this._postProcess\n      ? _.bind(this._postProcess, this)\n      : null\n    var watcher = this._watcher = new Watcher(\n      this.vm,\n      this.expression,\n      this._update, // callback\n      {\n        filters: this.filters,\n        twoWay: this.twoWay,\n        deep: this.deep,\n        preProcess: preProcess,\n        postProcess: postProcess,\n        scope: this._scope\n      }\n    )\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind()\n    } else if (this.update) {\n      this.update(watcher.value)\n    }\n  }\n  this._bound = true\n}\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return\n  }\n  var params = this.params\n  // swap the params array with a fresh object.\n  this.params = Object.create(null)\n  var i = params.length\n  var key, val, mappedKey\n  while (i--) {\n    key = params[i]\n    mappedKey = _.camelize(key)\n    val = _.getBindAttr(this.el, key)\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val)\n    } else {\n      // static\n      val = _.attr(this.el, key)\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val\n      }\n    }\n  }\n}\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this\n  var called = false\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key]\n      if (cb) {\n        cb.call(self, val, oldVal)\n      }\n    } else {\n      called = true\n    }\n  }, {\n    immediate: true\n  })\n  ;(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch)\n}\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression\n  if (\n    expression && this.acceptStatement &&\n    !expParser.isSimplePath(expression)\n  ) {\n    var fn = expParser.parse(expression).get\n    var scope = this._scope || this.vm\n    var handler = function () {\n      fn.call(scope, scope)\n    }\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters)\n    }\n    this.update(handler)\n    return true\n  }\n}\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value)\n    })\n  } else if (process.env.NODE_ENV !== 'production') {\n    _.warn(\n      'Directive.set() can only be used inside twoWay' +\n      'directives.'\n    )\n  }\n}\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this\n  self._locked = true\n  fn.call(self)\n  _.nextTick(function () {\n    self._locked = false\n  })\n}\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n */\n\nDirective.prototype.on = function (event, handler) {\n  _.on(this.el, event, handler)\n  ;(this._listeners || (this._listeners = []))\n    .push([event, handler])\n}\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false\n    if (this.unbind) {\n      this.unbind()\n    }\n    if (this._watcher) {\n      this._watcher.teardown()\n    }\n    var listeners = this._listeners\n    var i\n    if (listeners) {\n      i = listeners.length\n      while (i--) {\n        _.off(this.el, listeners[i][0], listeners[i][1])\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns\n    if (unwatchFns) {\n      i = unwatchFns.length\n      while (i--) {\n        unwatchFns[i]()\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this)\n    }\n    this.vm = this.el = this._watcher = this._listeners = null\n  }\n}\n\nmodule.exports = Directive\n\n}).call(this,require('_process'))\n\n},{\"./parsers/expression\":80,\"./util\":91,\"./watcher\":95,\"_process\":1}],42:[function(require,module,exports){\nexports.slot = require('./slot')\nexports.partial = require('./partial')\n\n},{\"./partial\":43,\"./slot\":44}],43:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\nvar vIf = require('../public/if')\nvar FragmentFactory = require('../../fragment/factory')\n\nmodule.exports = {\n\n  priority: 1750,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function (value) {\n      vIf.remove.call(this)\n      if (value) {\n        this.insert(value)\n      }\n    }\n  },\n\n  bind: function () {\n    this.anchor = _.createAnchor('v-partial')\n    _.replace(this.el, this.anchor)\n    this.insert(this.params.name)\n  },\n\n  insert: function (id) {\n    var partial = _.resolveAsset(this.vm.$options, 'partials', id)\n    if (process.env.NODE_ENV !== 'production') {\n      _.assertAsset(partial, 'partial', id)\n    }\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial)\n      vIf.insert.call(this)\n    }\n  },\n\n  unbind: function () {\n    if (this.frag) {\n      this.frag.destroy()\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../fragment/factory\":69,\"../../util\":91,\"../public/if\":56,\"_process\":1}],44:[function(require,module,exports){\nvar _ = require('../../util')\nvar templateParser = require('../../parsers/template')\n\n// This is the elementDirective that handles <content>\n// transclusions. It relies on the raw content of an\n// instance being stored as `$options._content` during\n// the transclude phase.\n\nmodule.exports = {\n\n  priority: 1750,\n\n  params: ['name'],\n\n  bind: function () {\n    var host = this.vm\n    var raw = host.$options._content\n    var content\n    if (!raw) {\n      this.fallback()\n      return\n    }\n    var context = host._context\n    var slotName = this.params.name\n    if (!slotName) {\n      // Default content\n      var self = this\n      var compileDefaultContent = function () {\n        self.compile(\n          extractFragment(raw.childNodes, raw, true),\n          context,\n          host\n        )\n      }\n      if (!host._isCompiled) {\n        // defer until the end of instance compilation,\n        // because the default outlet must wait until all\n        // other possible outlets with selectors have picked\n        // out their contents.\n        host.$once('hook:compiled', compileDefaultContent)\n      } else {\n        compileDefaultContent()\n      }\n    } else {\n      var selector = '[slot=\"' + slotName + '\"]'\n      var nodes = raw.querySelectorAll(selector)\n      if (nodes.length) {\n        content = extractFragment(nodes, raw)\n        if (content.hasChildNodes()) {\n          this.compile(content, context, host)\n        } else {\n          this.fallback()\n        }\n      } else {\n        this.fallback()\n      }\n    }\n  },\n\n  fallback: function () {\n    this.compile(_.extractContent(this.el, true), this.vm)\n  },\n\n  compile: function (content, context, host) {\n    if (content && context) {\n      var scope = host\n        ? host._scope\n        : this._scope\n      this.unlink = context.$compile(\n        content, host, scope, this._frag\n      )\n    }\n    if (content) {\n      _.replace(this.el, content)\n    } else {\n      _.remove(this.el)\n    }\n  },\n\n  unbind: function () {\n    if (this.unlink) {\n      this.unlink()\n    }\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @param {Element} parent\n * @param {Boolean} main\n * @return {DocumentFragment}\n */\n\nfunction extractFragment (nodes, parent, main) {\n  var frag = document.createDocumentFragment()\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i]\n    // if this is the main outlet, we want to skip all\n    // previously selected nodes;\n    // otherwise, we want to mark the node as selected.\n    // clone the node so the original raw content remains\n    // intact. this ensures proper re-compilation in cases\n    // where the outlet is inside a conditional block\n    if (main && !node.__v_selected) {\n      append(node)\n    } else if (!main && node.parentNode === parent) {\n      node.__v_selected = true\n      append(node)\n    }\n  }\n  return frag\n\n  function append (node) {\n    if (_.isTemplate(node) &&\n        !node.hasAttribute('v-if') &&\n        !node.hasAttribute('v-for')) {\n      node = templateParser.parse(node)\n    }\n    node = templateParser.clone(node)\n    frag.appendChild(node)\n  }\n}\n\n},{\"../../parsers/template\":82,\"../../util\":91}],45:[function(require,module,exports){\nvar _ = require('../../util')\nvar addClass = _.addClass\nvar removeClass = _.removeClass\n\nmodule.exports = {\n\n  deep: true,\n\n  update: function (value) {\n    if (value && typeof value === 'string') {\n      this.handleObject(stringToObject(value))\n    } else if (_.isPlainObject(value)) {\n      this.handleObject(value)\n    } else if (_.isArray(value)) {\n      this.handleArray(value)\n    } else {\n      this.cleanup()\n    }\n  },\n\n  handleObject: function (value) {\n    this.cleanup(value)\n    var keys = this.prevKeys = Object.keys(value)\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i]\n      if (value[key]) {\n        addClass(this.el, key)\n      } else {\n        removeClass(this.el, key)\n      }\n    }\n  },\n\n  handleArray: function (value) {\n    this.cleanup(value)\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (value[i]) {\n        addClass(this.el, value[i])\n      }\n    }\n    this.prevKeys = value.slice()\n  },\n\n  cleanup: function (value) {\n    if (this.prevKeys) {\n      var i = this.prevKeys.length\n      while (i--) {\n        var key = this.prevKeys[i]\n        if (key && (!value || !contains(value, key))) {\n          removeClass(this.el, key)\n        }\n      }\n    }\n  }\n}\n\nfunction stringToObject (value) {\n  var res = {}\n  var keys = value.trim().split(/\\s+/)\n  var i = keys.length\n  while (i--) {\n    res[keys[i]] = true\n  }\n  return res\n}\n\nfunction contains (value, key) {\n  return _.isArray(value)\n    ? value.indexOf(key) > -1\n    : value.hasOwnProperty(key)\n}\n\n},{\"../../util\":91}],46:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\nvar templateParser = require('../../parsers/template')\n\nmodule.exports = {\n\n  priority: 1500,\n\n  params: [\n    'keep-alive',\n    'transition-mode',\n    'inline-template'\n  ],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function () {\n    if (!this.el.__vue__) {\n      // check ref\n      this.ref = _.findRef(this.el)\n      var refs = (this._scope || this.vm).$refs\n      if (this.ref && !refs.hasOwnProperty(this.ref)) {\n        _.defineReactive(refs, this.ref, null)\n      }\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive\n      if (this.keepAlive) {\n        this.cache = {}\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = _.extractContent(this.el, true)\n      }\n      // component resolution related state\n      this.pendingComponentCb =\n      this.Component = null\n      // transition related state\n      this.pendingRemovals = 0\n      this.pendingRemovalCb = null\n      // check dynamic component params\n        // create a ref anchor\n      this.anchor = _.createAnchor('v-component')\n      _.replace(this.el, this.anchor)\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression)\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'cannot mount component \"' + this.expression + '\" ' +\n        'on already mounted element: ' + this.el\n      )\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function (value) {\n    if (!this.literal) {\n      this.setComponent(value)\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function (value, cb) {\n    this.invalidatePending()\n    if (!value) {\n      // just remove current\n      this.unbuild(true)\n      this.remove(this.childVM, cb)\n      this.childVM = null\n    } else {\n      var self = this\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb)\n      })\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   */\n\n  resolveComponent: function (id, cb) {\n    var self = this\n    this.pendingComponentCb = _.cancellable(function (Component) {\n      self.ComponentName = Component.options.name || id\n      self.Component = Component\n      cb()\n    })\n    this.vm._resolveComponent(id, this.pendingComponentCb)\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function (cb) {\n    // actual mount\n    this.unbuild(true)\n    var self = this\n    var activateHook = this.Component.options.activate\n    var cached = this.getCached()\n    var newComponent = this.build()\n    if (activateHook && !cached) {\n      this.waitingFor = newComponent\n      activateHook.call(newComponent, function () {\n        self.waitingFor = null\n        self.transition(newComponent, cb)\n      })\n    } else {\n      this.transition(newComponent, cb)\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function () {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel()\n      this.pendingComponentCb = null\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function (extraOptions) {\n    var cached = this.getCached()\n    if (cached) {\n      return cached\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: templateParser.clone(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      }\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        _.extend(options, extraOptions)\n      }\n      var child = new this.Component(options)\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' &&\n          this.el.hasAttribute('transition') &&\n          child._isFragment) {\n        _.warn(\n          'Transitions will not work on a fragment instance. ' +\n          'Template: ' + child.$options.template\n        )\n      }\n      return child\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function () {\n    return this.keepAlive && this.cache[this.Component.cid]\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function (defer) {\n    if (this.waitingFor) {\n      this.waitingFor.$destroy()\n      this.waitingFor = null\n    }\n    var child = this.childVM\n    if (!child || this.keepAlive) {\n      return\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer)\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function (child, cb) {\n    var keepAlive = this.keepAlive\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++\n      this.pendingRemovalCb = cb\n      var self = this\n      child.$remove(function () {\n        self.pendingRemovals--\n        if (!keepAlive) child._cleanup()\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb()\n          self.pendingRemovalCb = null\n        }\n      })\n    } else if (cb) {\n      cb()\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function (target, cb) {\n    var self = this\n    var current = this.childVM\n    // for devtool inspection\n    if (process.env.NODE_ENV !== 'production') {\n      if (current) current._inactive = true\n      target._inactive = false\n    }\n    this.childVM = target\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb)\n        })\n        break\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb)\n        })\n        break\n      default:\n        self.remove(current)\n        target.$before(self.anchor, cb)\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function () {\n    this.invalidatePending()\n    // Do not defer cleanup when unbinding\n    this.unbuild()\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy()\n      }\n      this.cache = null\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../parsers/template\":82,\"../../util\":91,\"_process\":1}],47:[function(require,module,exports){\nexports.style = require('./style')\nexports['class'] = require('./class')\nexports.component = require('./component')\nexports.prop = require('./prop')\nexports.transition = require('./transition')\n\n},{\"./class\":45,\"./component\":46,\"./prop\":48,\"./style\":49,\"./transition\":50}],48:[function(require,module,exports){\n// NOTE: the prop internal directive is compiled and linked\n// during _initScope(), before the created hook is called.\n// The purpose is to make the initial prop values available\n// inside `created` hooks and `data` functions.\n\nvar _ = require('../../util')\nvar Watcher = require('../../watcher')\nvar bindingModes = require('../../config')._propBindingModes\n\nmodule.exports = {\n\n  bind: function () {\n\n    var child = this.vm\n    var parent = child._context\n    // passed in from compiler directly\n    var prop = this.descriptor.prop\n    var childKey = prop.path\n    var parentKey = prop.parentPath\n    var twoWay = prop.mode === bindingModes.TWO_WAY\n\n    var parentWatcher = this.parentWatcher = new Watcher(\n      parent,\n      parentKey,\n      function (val) {\n        if (_.assertProp(prop, val)) {\n          child[childKey] = val\n        }\n      }, {\n        twoWay: twoWay,\n        filters: prop.filters,\n        // important: props need to be observed on the\n        // v-for scope if present\n        scope: this._scope\n      }\n    )\n\n    // set the child initial value.\n    _.initProp(child, prop, parentWatcher.value)\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this\n      child.$once('hook:created', function () {\n        self.childWatcher = new Watcher(\n          child,\n          childKey,\n          function (val) {\n            parentWatcher.set(val)\n          }\n        )\n      })\n    }\n  },\n\n  unbind: function () {\n    this.parentWatcher.teardown()\n    if (this.childWatcher) {\n      this.childWatcher.teardown()\n    }\n  }\n}\n\n},{\"../../config\":40,\"../../util\":91,\"../../watcher\":95}],49:[function(require,module,exports){\nvar _ = require('../../util')\nvar prefixes = ['-webkit-', '-moz-', '-ms-']\nvar camelPrefixes = ['Webkit', 'Moz', 'ms']\nvar importantRE = /!important;?$/\nvar testEl = null\nvar propCache = {}\n\nmodule.exports = {\n\n  deep: true,\n\n  update: function (value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value\n    } else if (_.isArray(value)) {\n      this.handleObject(value.reduce(_.extend, {}))\n    } else {\n      this.handleObject(value || {})\n    }\n  },\n\n  handleObject: function (value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {})\n    var name, val\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null)\n        delete cache[name]\n      }\n    }\n    for (name in value) {\n      val = value[name]\n      if (val !== cache[name]) {\n        cache[name] = val\n        this.handleSingle(name, val)\n      }\n    }\n  },\n\n  handleSingle: function (prop, value) {\n    prop = normalize(prop)\n    if (!prop) return // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += ''\n    if (value) {\n      var isImportant = importantRE.test(value)\n        ? 'important'\n        : ''\n      if (isImportant) {\n        value = value.replace(importantRE, '').trim()\n      }\n      this.el.style.setProperty(prop, value, isImportant)\n    } else {\n      this.el.style.removeProperty(prop)\n    }\n  }\n\n}\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize (prop) {\n  if (propCache[prop]) {\n    return propCache[prop]\n  }\n  var res = prefix(prop)\n  propCache[prop] = propCache[res] = res\n  return res\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix (prop) {\n  prop = _.hyphenate(prop)\n  var camel = _.camelize(prop)\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1)\n  if (!testEl) {\n    testEl = document.createElement('div')\n  }\n  if (camel in testEl.style) {\n    return prop\n  }\n  var i = prefixes.length\n  var prefixed\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper\n    if (prefixed in testEl.style) {\n      return prefixes[i] + prop\n    }\n  }\n}\n\n},{\"../../util\":91}],50:[function(require,module,exports){\nvar _ = require('../../util')\nvar Transition = require('../../transition/transition')\n\nmodule.exports = {\n\n  priority: 1000,\n\n  update: function (id, oldId) {\n    var el = this.el\n    // resolve on owner vm\n    var hooks = _.resolveAsset(this.vm.$options, 'transitions', id)\n    id = id || 'v'\n    // apply on closest vm\n    el.__v_trans = new Transition(el, id, hooks, this.el.__vue__ || this.vm)\n    if (oldId) {\n      _.removeClass(el, oldId + '-transition')\n    }\n    _.addClass(el, id + '-transition')\n  }\n}\n\n},{\"../../transition/transition\":86,\"../../util\":91}],51:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink'\nvar xlinkRE = /^xlink:/\n\n// these input element attributes should also set their\n// corresponding properties\nvar inputProps = {\n  value: 1,\n  checked: 1,\n  selected: 1\n}\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n}\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/\n\nmodule.exports = {\n\n  priority: 850,\n\n  bind: function () {\n    var attr = this.arg\n    var tag = this.el.tagName\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true\n    }\n    // handle interpolation bindings\n    if (this.descriptor.interp) {\n      // only allow binding on native attributes\n      if (\n        disallowedInterpAttrRE.test(attr) ||\n        (attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT'))\n      ) {\n        process.env.NODE_ENV !== 'production' && _.warn(\n          attr + '=\"' + this.descriptor.raw + '\": ' +\n          'attribute interpolation is not allowed in Vue.js ' +\n          'directives and special attributes.'\n        )\n        this.el.removeAttribute(attr)\n        this.invalid = true\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + this.descriptor.raw + '\": '\n        // warn src\n        if (attr === 'src') {\n          _.warn(\n            raw + 'interpolation in \"src\" attribute will cause ' +\n            'a 404 request. Use v-bind:src instead.'\n          )\n        }\n\n        // warn style\n        if (attr === 'style') {\n          _.warn(\n            raw + 'interpolation in \"style\" attribute will cause ' +\n            'the attribute to be discarded in Internet Explorer. ' +\n            'Use v-bind:style instead.'\n          )\n        }\n      }\n    }\n  },\n\n  update: function (value) {\n    if (this.invalid) {\n      return\n    }\n    var attr = this.arg\n    if (this.arg) {\n      this.handleSingle(attr, value)\n    } else {\n      this.handleObject(value || {})\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: require('../internal/style').handleObject,\n\n  handleSingle: function (attr, value) {\n    if (inputProps[attr] && attr in this.el) {\n      this.el[attr] = attr === 'value'\n        ? (value || '') // IE9 will set input.value to \"null\" for null...\n        : value\n    }\n    // set model props\n    var modelProp = modelProps[attr]\n    if (modelProp) {\n      this.el[modelProp] = value\n      // update v-model if present\n      var model = this.el.__v_model\n      if (model) {\n        model.listener()\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && this.el.tagName === 'TEXTAREA') {\n      this.el.removeAttribute(attr)\n      return\n    }\n    // update attribute\n    if (value != null && value !== false) {\n      if (xlinkRE.test(attr)) {\n        this.el.setAttributeNS(xlinkNS, attr, value)\n      } else {\n        this.el.setAttribute(attr, value)\n      }\n    } else {\n      this.el.removeAttribute(attr)\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../util\":91,\"../internal/style\":49,\"_process\":1}],52:[function(require,module,exports){\nmodule.exports = {\n  bind: function () {\n    var el = this.el\n    this.vm.$once('hook:compiled', function () {\n      el.removeAttribute('v-cloak')\n    })\n  }\n}\n\n},{}],53:[function(require,module,exports){\nvar _ = require('../../util')\n\nmodule.exports = {\n\n  priority: 1500,\n\n  bind: function () {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return\n    }\n    var id = this.id = _.camelize(this.arg)\n    var refs = (this._scope || this.vm).$els\n    if (refs.hasOwnProperty(id)) {\n      refs[id] = this.el\n    } else {\n      _.defineReactive(refs, id, this.el)\n    }\n  },\n\n  unbind: function () {\n    var refs = (this._scope || this.vm).$els\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null\n    }\n  }\n}\n\n},{\"../../util\":91}],54:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\nvar FragmentFactory = require('../../fragment/factory')\nvar isObject = _.isObject\nvar uid = 0\n\nmodule.exports = {\n\n  priority: 2000,\n\n  params: [\n    'track-by',\n    'stagger',\n    'enter-stagger',\n    'leave-stagger'\n  ],\n\n  bind: function () {\n    // support \"item in items\" syntax\n    var inMatch = this.expression.match(/(.*) in (.*)/)\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/)\n      if (itMatch) {\n        this.iterator = itMatch[1].trim()\n        this.alias = itMatch[2].trim()\n      } else {\n        this.alias = inMatch[1].trim()\n      }\n      this.expression = inMatch[2]\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'Alias is required in v-for.'\n      )\n      return\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + (++uid)\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName\n    this.isOption =\n      (tag === 'OPTION' || tag === 'OPTGROUP') &&\n      this.el.parentNode.tagName === 'SELECT'\n\n    // setup anchor nodes\n    this.start = _.createAnchor('v-for-start')\n    this.end = _.createAnchor('v-for-end')\n    _.replace(this.el, this.end)\n    _.before(this.start, this.end)\n\n    // check ref\n    this.ref = _.findRef(this.el)\n\n    // cache\n    this.cache = Object.create(null)\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el)\n  },\n\n  update: function (data) {\n    this.diff(data)\n    this.updateRef()\n    this.updateModel()\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function (data) {\n    // check if the Array was converted from an Object\n    var item = data[0]\n    var convertedFromObject = this.fromObject =\n      isObject(item) &&\n      item.hasOwnProperty('$key') &&\n      item.hasOwnProperty('$value')\n\n    var trackByKey = this.params.trackBy\n    var oldFrags = this.frags\n    var frags = this.frags = new Array(data.length)\n    var alias = this.alias\n    var iterator = this.iterator\n    var start = this.start\n    var end = this.end\n    var inDoc = _.inDoc(start)\n    var init = !oldFrags\n    var i, l, frag, key, value, primitive\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i]\n      key = convertedFromObject ? item.$key : null\n      value = convertedFromObject ? item.$value : item\n      primitive = !isObject(value)\n      frag = !init && this.getCachedFrag(value, i, key)\n      if (frag) { // reusable fragment\n        frag.reused = true\n        // update $index\n        frag.scope.$index = i\n        // update $key\n        if (key) {\n          frag.scope.$key = key\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          frag.scope[alias] = value\n        }\n      } else { // new isntance\n        frag = this.create(value, alias, i, key)\n        frag.fresh = !init\n      }\n      frags[i] = frag\n      if (init) {\n        frag.before(end)\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0\n    var totalRemoved = oldFrags.length - frags.length\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i]\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag)\n        this.remove(frag, removalIndex++, totalRemoved, inDoc)\n      }\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev\n    var insertionIndex = 0\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i]\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1]\n      prevEl = targetPrev\n        ? targetPrev.staggerCb\n          ? targetPrev.staggerAnchor\n          : targetPrev.end || targetPrev.node\n        : start\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id)\n        if (currentPrev !== targetPrev) {\n          this.move(frag, prevEl)\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDoc)\n      }\n      frag.reused = frag.fresh = false\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function (value, alias, index, key) {\n    var host = this._host\n    // create iteration scope\n    var parentScope = this._scope || this.vm\n    var scope = Object.create(parentScope)\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs)\n    scope.$els = Object.create(parentScope.$els)\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope\n    // for two-way binding on alias\n    scope.$forContext = this\n    // define scope properties\n    _.defineReactive(scope, alias, value)\n    _.defineReactive(scope, '$index', index)\n    if (key) {\n      _.defineReactive(scope, '$key', key)\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      _.define(scope, '$key', null)\n    }\n    if (this.iterator) {\n      _.defineReactive(scope, this.iterator, key !== null ? key : index)\n    }\n    var frag = this.factory.create(host, scope, this._frag)\n    frag.forId = this.id\n    this.cacheFrag(value, frag, index, key)\n    return frag\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function () {\n    var ref = this.ref\n    if (!ref) return\n    var hash = (this._scope || this.vm).$refs\n    var refs\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag)\n    } else {\n      refs = {}\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag)\n      })\n    }\n    if (!hash.hasOwnProperty(ref)) {\n      _.defineReactive(hash, ref, refs)\n    } else {\n      hash[ref] = refs\n    }\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function () {\n    if (this.isOption) {\n      var parent = this.start.parentNode\n      var model = parent && parent.__v_model\n      if (model) {\n        model.forceUpdate()\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDoc\n   */\n\n  insert: function (frag, index, prevEl, inDoc) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel()\n      frag.staggerCb = null\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter')\n    if (inDoc && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor\n      if (!anchor) {\n        anchor = frag.staggerAnchor = _.createAnchor('stagger-anchor')\n        anchor.__vfrag__ = frag\n      }\n      _.after(anchor, prevEl)\n      var op = frag.staggerCb = _.cancellable(function () {\n        frag.staggerCb = null\n        frag.before(anchor)\n        _.remove(anchor)\n      })\n      setTimeout(op, staggerAmount)\n    } else {\n      frag.before(prevEl.nextSibling)\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDoc\n   */\n\n  remove: function (frag, index, total, inDoc) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel()\n      frag.staggerCb = null\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave')\n    if (inDoc && staggerAmount) {\n      var op = frag.staggerCb = _.cancellable(function () {\n        frag.staggerCb = null\n        frag.remove(true)\n      })\n      setTimeout(op, staggerAmount)\n    } else {\n      frag.remove(true)\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function (frag, prevEl) {\n    frag.before(prevEl.nextSibling, false)\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function (value, frag, index, key) {\n    var trackByKey = this.params.trackBy\n    var cache = this.cache\n    var primitive = !isObject(value)\n    var id\n    if (key || trackByKey || primitive) {\n      id = trackByKey\n        ? trackByKey === '$index'\n          ? index\n          : value[trackByKey]\n        : (key || value)\n      if (!cache[id]) {\n        cache[id] = frag\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' &&\n        this.warnDuplicate(value)\n      }\n    } else {\n      id = this.id\n      if (value.hasOwnProperty(id)) {\n        if (value[id] === null) {\n          value[id] = frag\n        } else {\n          process.env.NODE_ENV !== 'production' &&\n          this.warnDuplicate(value)\n        }\n      } else {\n        _.define(value, id, frag)\n      }\n    }\n    frag.raw = value\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function (value, index, key) {\n    var trackByKey = this.params.trackBy\n    var primitive = !isObject(value)\n    var frag\n    if (key || trackByKey || primitive) {\n      var id = trackByKey\n        ? trackByKey === '$index'\n          ? index\n          : value[trackByKey]\n        : (key || value)\n      frag = this.cache[id]\n    } else {\n      frag = value[this.id]\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' &&\n      this.warnDuplicate(value)\n    }\n    return frag\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function (frag) {\n    var value = frag.raw\n    var trackByKey = this.params.trackBy\n    var scope = frag.scope\n    var index = scope.$index\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = scope.hasOwnProperty('$key') && scope.$key\n    var primitive = !isObject(value)\n    if (trackByKey || key || primitive) {\n      var id = trackByKey\n        ? trackByKey === '$index'\n          ? index\n          : value[trackByKey]\n        : (key || value)\n      this.cache[id] = null\n    } else {\n      value[this.id] = null\n      frag.raw = null\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function (frag, index, total, type) {\n    type = type + 'Stagger'\n    var trans = frag.node.__v_trans\n    var hooks = trans && trans.hooks\n    var hook = hooks && (hooks[type] || hooks.stagger)\n    return hook\n      ? hook.call(frag, index, total)\n      : index * parseInt(this.params[type] || this.params.stagger, 10)\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function (value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value\n    return value\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * wathcer's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function (value) {\n    if (_.isArray(value)) {\n      return value\n    } else if (_.isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value)\n      var i = keys.length\n      var res = new Array(i)\n      var key\n      while (i--) {\n        key = keys[i]\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        }\n      }\n      return res\n    } else {\n      var type = typeof value\n      if (type === 'number') {\n        value = range(value)\n      } else if (type === 'string') {\n        value = _.toArray(value)\n      }\n      return value || []\n    }\n  },\n\n  unbind: function () {\n    if (this.ref) {\n      (this._scope || this.vm).$refs[this.ref] = null\n    }\n    if (this.frags) {\n      var i = this.frags.length\n      var frag\n      while (i--) {\n        frag = this.frags[i]\n        this.deleteCachedFrag(frag)\n        frag.destroy()\n      }\n    }\n  }\n}\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag (frag, anchor, id) {\n  var el = frag.node.previousSibling\n  /* istanbul ignore if */\n  if (!el) return\n  frag = el.__vfrag__\n  while (\n    (!frag || frag.forId !== id || !frag.inserted) &&\n    el !== anchor\n  ) {\n    el = el.previousSibling\n    /* istanbul ignore if */\n    if (!el) return\n    frag = el.__vfrag__\n  }\n  return frag\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag (frag) {\n  return frag.node.__vue__ || frag.node.nextSibling.__vue__\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range (n) {\n  var i = -1\n  var ret = new Array(n)\n  while (++i < n) {\n    ret[i] = i\n  }\n  return ret\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  module.exports.warnDuplicate = function (value) {\n    _.warn(\n      'Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' +\n      JSON.stringify(value) + '. Use track-by=\"$index\" if ' +\n      'you are expecting duplicate values.'\n    )\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../fragment/factory\":69,\"../../util\":91,\"_process\":1}],55:[function(require,module,exports){\nvar _ = require('../../util')\nvar templateParser = require('../../parsers/template')\n\nmodule.exports = {\n\n  bind: function () {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = []\n      // replace the placeholder with proper anchor\n      this.anchor = _.createAnchor('v-html')\n      _.replace(this.el, this.anchor)\n    }\n  },\n\n  update: function (value) {\n    value = _.toString(value)\n    if (this.nodes) {\n      this.swap(value)\n    } else {\n      this.el.innerHTML = value\n    }\n  },\n\n  swap: function (value) {\n    // remove old nodes\n    var i = this.nodes.length\n    while (i--) {\n      _.remove(this.nodes[i])\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = templateParser.parse(value, true, true)\n    // save a reference to these nodes so we can remove later\n    this.nodes = _.toArray(frag.childNodes)\n    _.before(frag, this.anchor)\n  }\n}\n\n},{\"../../parsers/template\":82,\"../../util\":91}],56:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\nvar FragmentFactory = require('../../fragment/factory')\n\nmodule.exports = {\n\n  priority: 2000,\n\n  bind: function () {\n    var el = this.el\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling\n      if (next && _.attr(next, 'v-else') !== null) {\n        _.remove(next)\n        this.elseFactory = new FragmentFactory(this.vm, next)\n      }\n      // check main block\n      this.anchor = _.createAnchor('v-if')\n      _.replace(el, this.anchor)\n      this.factory = new FragmentFactory(this.vm, el)\n    } else {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'v-if=\"' + this.expression + '\" cannot be ' +\n        'used on an instance root element.'\n      )\n      this.invalid = true\n    }\n  },\n\n  update: function (value) {\n    if (this.invalid) return\n    if (value) {\n      if (!this.frag) {\n        this.insert()\n      }\n    } else {\n      this.remove()\n    }\n  },\n\n  insert: function () {\n    if (this.elseFrag) {\n      this.elseFrag.remove(true)\n      this.elseFrag = null\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag)\n    this.frag.before(this.anchor)\n  },\n\n  remove: function () {\n    if (this.frag) {\n      this.frag.remove(true)\n      this.frag = null\n    }\n    if (this.elseFactory) {\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag)\n      this.elseFrag.before(this.anchor)\n    }\n  },\n\n  unbind: function () {\n    if (this.frag) {\n      this.frag.destroy()\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../fragment/factory\":69,\"../../util\":91,\"_process\":1}],57:[function(require,module,exports){\n// text & html\nexports.text = require('./text')\nexports.html = require('./html')\n\n// logic control\nexports['for'] = require('./for')\nexports['if'] = require('./if')\nexports.show = require('./show')\n\n// two-way binding\nexports.model = require('./model')\n\n// event handling\nexports.on = require('./on')\n\n// attributes\nexports.bind = require('./bind')\n\n// ref & el\nexports.el = require('./el')\nexports.ref = require('./ref')\n\n// cloak\nexports.cloak = require('./cloak')\n\n},{\"./bind\":51,\"./cloak\":52,\"./el\":53,\"./for\":54,\"./html\":55,\"./if\":56,\"./model\":59,\"./on\":63,\"./ref\":64,\"./show\":65,\"./text\":66}],58:[function(require,module,exports){\nvar _ = require('../../../util')\n\nmodule.exports = {\n\n  bind: function () {\n    var self = this\n    var el = this.el\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value')\n        ? el._value\n        : self.params.number\n          ? _.toNumber(el.value)\n          : el.value\n    }\n\n    function getBooleanValue () {\n      var val = el.checked\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue\n      }\n      return val\n    }\n\n    this.listener = function () {\n      var model = self._watcher.value\n      if (_.isArray(model)) {\n        var val = self.getValue()\n        if (el.checked) {\n          if (_.indexOf(model, val) < 0) {\n            model.push(val)\n          }\n        } else {\n          model.$remove(val)\n        }\n      } else {\n        self.set(getBooleanValue())\n      }\n    }\n\n    this.on('change', this.listener)\n    if (el.checked) {\n      this.afterBind = this.listener\n    }\n  },\n\n  update: function (value) {\n    var el = this.el\n    if (_.isArray(value)) {\n      el.checked = _.indexOf(value, this.getValue()) > -1\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = _.looseEqual(value, el._trueValue)\n      } else {\n        el.checked = !!value\n      }\n    }\n  }\n}\n\n},{\"../../../util\":91}],59:[function(require,module,exports){\n(function (process){\nvar _ = require('../../../util')\n\nvar handlers = {\n  text: require('./text'),\n  radio: require('./radio'),\n  select: require('./select'),\n  checkbox: require('./checkbox')\n}\n\nmodule.exports = {\n\n  priority: 800,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function () {\n    // friendly warning...\n    this.checkFilters()\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'It seems you are using a read-only filter with ' +\n        'v-model. You might want to use a two-way filter ' +\n        'to ensure correct behavior.'\n      )\n    }\n    var el = this.el\n    var tag = el.tagName\n    var handler\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text\n    } else if (tag === 'SELECT') {\n      handler = handlers.select\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text\n    } else {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'v-model does not support element type: ' + tag\n      )\n      return\n    }\n    el.__v_model = this\n    handler.bind.call(this)\n    this.update = handler.update\n    this._unbind = handler.unbind\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function () {\n    var filters = this.filters\n    if (!filters) return\n    var i = filters.length\n    while (i--) {\n      var filter = _.resolveAsset(this.vm.$options, 'filters', filters[i].name)\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true\n      }\n      if (filter.write) {\n        this.hasWrite = true\n      }\n    }\n  },\n\n  unbind: function () {\n    this.el.__v_model = null\n    this._unbind && this._unbind()\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../../util\":91,\"./checkbox\":58,\"./radio\":60,\"./select\":61,\"./text\":62,\"_process\":1}],60:[function(require,module,exports){\nvar _ = require('../../../util')\n\nmodule.exports = {\n\n  bind: function () {\n    var self = this\n    var el = this.el\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value\n      }\n      var val = el.value\n      if (self.params.number) {\n        val = _.toNumber(val)\n      }\n      return val\n    }\n\n    this.listener = function () {\n      self.set(self.getValue())\n    }\n    this.on('change', this.listener)\n\n    if (el.checked) {\n      this.afterBind = this.listener\n    }\n  },\n\n  update: function (value) {\n    this.el.checked = _.looseEqual(value, this.getValue())\n  }\n}\n\n},{\"../../../util\":91}],61:[function(require,module,exports){\nvar _ = require('../../../util')\n\nmodule.exports = {\n\n  bind: function () {\n    var self = this\n    var el = this.el\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get())\n      }\n    }\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple')\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple)\n      value = self.params.number\n        ? _.isArray(value)\n          ? value.map(_.toNumber)\n          : _.toNumber(value)\n        : value\n      self.set(value)\n    }\n    this.on('change', this.listener)\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true)\n    if ((multiple && initValue.length) ||\n        (!multiple && initValue !== null)) {\n      this.afterBind = this.listener\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', this.forceUpdate)\n  },\n\n  update: function (value) {\n    var el = this.el\n    el.selectedIndex = -1\n    var multi = this.multiple && _.isArray(value)\n    var options = el.options\n    var i = options.length\n    var op, val\n    while (i--) {\n      op = options[i]\n      val = op.hasOwnProperty('_value')\n        ? op._value\n        : op.value\n      /* eslint-disable eqeqeq */\n      op.selected = multi\n        ? indexOf(value, val) > -1\n        : _.looseEqual(value, val)\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function () {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate)\n  }\n}\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue (el, multi, init) {\n  var res = multi ? [] : null\n  var op, val, selected\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i]\n    selected = init\n      ? op.hasAttribute('selected')\n      : op.selected\n    if (selected) {\n      val = op.hasOwnProperty('_value')\n        ? op._value\n        : op.value\n      if (multi) {\n        res.push(val)\n      } else {\n        return val\n      }\n    }\n  }\n  return res\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf (arr, val) {\n  var i = arr.length\n  while (i--) {\n    if (_.looseEqual(arr[i], val)) {\n      return i\n    }\n  }\n  return -1\n}\n\n},{\"../../../util\":91}],62:[function(require,module,exports){\nvar _ = require('../../../util')\n\nmodule.exports = {\n\n  bind: function () {\n    var self = this\n    var el = this.el\n    var isRange = el.type === 'range'\n    var lazy = this.params.lazy\n    var number = this.params.number\n    var debounce = this.params.debounce\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false\n    if (!_.isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true\n      })\n      this.on('compositionend', function () {\n        composing = false\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener()\n        }\n      })\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false\n    if (!isRange) {\n      this.on('focus', function () {\n        self.focused = true\n      })\n      this.on('blur', function () {\n        self.focused = false\n        self.listener()\n      })\n    }\n\n    // Now attach the main listener\n    this.listener = function () {\n      if (composing) return\n      var val = number || isRange\n        ? _.toNumber(el.value)\n        : el.value\n      self.set(val)\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      _.nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value)\n        }\n      })\n    }\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _.debounce(this.listener, debounce)\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function'\n    if (this.hasjQuery) {\n      jQuery(el).on('change', this.listener)\n      if (!lazy) {\n        jQuery(el).on('input', this.listener)\n      }\n    } else {\n      this.on('change', this.listener)\n      if (!lazy) {\n        this.on('input', this.listener)\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && _.isIE9) {\n      this.on('cut', function () {\n        _.nextTick(self.listener)\n      })\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener()\n        }\n      })\n    }\n\n    // set initial value if present\n    if (\n      el.hasAttribute('value') ||\n      (el.tagName === 'TEXTAREA' && el.value.trim())\n    ) {\n      this.afterBind = this.listener\n    }\n  },\n\n  update: function (value) {\n    this.el.value = _.toString(value)\n  },\n\n  unbind: function () {\n    var el = this.el\n    if (this.hasjQuery) {\n      jQuery(el).off('change', this.listener)\n      jQuery(el).off('input', this.listener)\n    }\n  }\n}\n\n},{\"../../../util\":91}],63:[function(require,module,exports){\n(function (process){\nvar _ = require('../../util')\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': 46,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n}\n\nfunction keyFilter (handler, keys) {\n  var codes = keys.map(function (key) {\n    var code = keyCodes[key]\n    if (!code) {\n      code = parseInt(key, 10)\n    }\n    return code\n  })\n  return function keyHandler (e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e)\n    }\n  }\n}\n\nfunction stopFilter (handler) {\n  return function stopHandler (e) {\n    e.stopPropagation()\n    return handler.call(this, e)\n  }\n}\n\nfunction preventFilter (handler) {\n  return function preventHandler (e) {\n    e.preventDefault()\n    return handler.call(this, e)\n  }\n}\n\nmodule.exports = {\n\n  acceptStatement: true,\n  priority: 700,\n\n  bind: function () {\n    // deal with iframes\n    if (\n      this.el.tagName === 'IFRAME' &&\n      this.arg !== 'load'\n    ) {\n      var self = this\n      this.iframeBind = function () {\n        _.on(self.el.contentWindow, self.arg, self.handler)\n      }\n      this.on('load', this.iframeBind)\n    }\n  },\n\n  update: function (handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {}\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'v-on:' + this.arg + '=\"' +\n        this.expression + '\" expects a function value, ' +\n        'got ' + handler\n      )\n      return\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler)\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler)\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers)\n      .filter(function (key) {\n        return key !== 'stop' && key !== 'prevent'\n      })\n    if (keys.length) {\n      handler = keyFilter(handler, keys)\n    }\n\n    this.reset()\n    var scope = this._scope || this.vm\n    this.handler = function (e) {\n      scope.$event = e\n      var res = handler(e)\n      scope.$event = null\n      return res\n    }\n    if (this.iframeBind) {\n      this.iframeBind()\n    } else {\n      _.on(this.el, this.arg, this.handler)\n    }\n  },\n\n  reset: function () {\n    var el = this.iframeBind\n      ? this.el.contentWindow\n      : this.el\n    if (this.handler) {\n      _.off(el, this.arg, this.handler)\n    }\n  },\n\n  unbind: function () {\n    this.reset()\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../util\":91,\"_process\":1}],64:[function(require,module,exports){\n(function (process){\nif (process.env.NODE_ENV !== 'production') {\n  module.exports = {\n    bind: function () {\n      require('../../util').warn(\n        'v-ref:' + this.arg + ' must be used on a child ' +\n        'component. Found on <' + this.el.tagName.toLowerCase() + '>.'\n      )\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../../util\":91,\"_process\":1}],65:[function(require,module,exports){\nvar _ = require('../../util')\nvar transition = require('../../transition')\n\nmodule.exports = {\n\n  bind: function () {\n    // check else block\n    var next = this.el.nextElementSibling\n    if (next && _.attr(next, 'v-else') !== null) {\n      this.elseEl = next\n    }\n  },\n\n  update: function (value) {\n    var el = this.el\n    transition.apply(el, value ? 1 : -1, function () {\n      el.style.display = value ? '' : 'none'\n    }, this.vm)\n    var elseEl = this.elseEl\n    if (elseEl) {\n      transition.apply(elseEl, value ? -1 : 1, function () {\n        elseEl.style.display = value ? 'none' : ''\n      }, this.vm)\n    }\n  }\n}\n\n},{\"../../transition\":84,\"../../util\":91}],66:[function(require,module,exports){\nvar _ = require('../../util')\n\nmodule.exports = {\n\n  bind: function () {\n    this.attr = this.el.nodeType === 3\n      ? 'data'\n      : 'textContent'\n  },\n\n  update: function (value) {\n    this.el[this.attr] = _.toString(value)\n  }\n}\n\n},{\"../../util\":91}],67:[function(require,module,exports){\nvar _ = require('../util')\nvar Path = require('../parsers/path')\nvar toArray = require('../directives/public/for')._postProcess\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n */\n\nexports.limitBy = function (arr, n) {\n  return typeof n === 'number'\n    ? arr.slice(0, n)\n    : arr\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} searchKey\n * @param {String} [delimiter]\n * @param {String} dataKey\n */\n\nexports.filterBy = function (arr, search, delimiter /* ...dataKeys */) {\n  arr = toArray(arr)\n  if (search == null) {\n    return arr\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search)\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase()\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2\n  // extract and flatten keys\n  var keys = _.toArray(arguments, n).reduce(function (prev, cur) {\n    return prev.concat(cur)\n  }, [])\n  var res = []\n  var item, key, val, j\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i]\n    val = (item && item.$value) || item\n    j = keys.length\n    if (j) {\n      while (j--) {\n        key = keys[j]\n        if ((key === '$key' && contains(item.$key, search)) ||\n            contains(Path.get(val, key), search)) {\n          res.push(item)\n          break\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item)\n    }\n  }\n  return res\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} sortKey\n * @param {String} reverse\n */\n\nexports.orderBy = function (arr, sortKey, reverse) {\n  arr = toArray(arr)\n  if (!sortKey) {\n    return arr\n  }\n  var order = (reverse && reverse < 0) ? -1 : 1\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(function (a, b) {\n    if (sortKey !== '$key') {\n      if (_.isObject(a) && '$value' in a) a = a.$value\n      if (_.isObject(b) && '$value' in b) b = b.$value\n    }\n    a = _.isObject(a) ? Path.get(a, sortKey) : a\n    b = _.isObject(b) ? Path.get(b, sortKey) : b\n    return a === b ? 0 : a > b ? order : -order\n  })\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains (val, search) {\n  var i\n  if (_.isPlainObject(val)) {\n    var keys = Object.keys(val)\n    i = keys.length\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true\n      }\n    }\n  } else if (_.isArray(val)) {\n    i = val.length\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1\n  }\n}\n\n},{\"../directives/public/for\":54,\"../parsers/path\":81,\"../util\":91}],68:[function(require,module,exports){\nvar _ = require('../util')\n\n/**\n * Stringify value.\n *\n * @param {Number} indent\n */\n\nexports.json = {\n  read: function (value, indent) {\n    return typeof value === 'string'\n      ? value\n      : JSON.stringify(value, null, Number(indent) || 2)\n  },\n  write: function (value) {\n    try {\n      return JSON.parse(value)\n    } catch (e) {\n      return value\n    }\n  }\n}\n\n/**\n * 'abc' => 'Abc'\n */\n\nexports.capitalize = function (value) {\n  if (!value && value !== 0) return ''\n  value = value.toString()\n  return value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * 'abc' => 'ABC'\n */\n\nexports.uppercase = function (value) {\n  return (value || value === 0)\n    ? value.toString().toUpperCase()\n    : ''\n}\n\n/**\n * 'AbC' => 'abc'\n */\n\nexports.lowercase = function (value) {\n  return (value || value === 0)\n    ? value.toString().toLowerCase()\n    : ''\n}\n\n/**\n * 12345 => $12,345.00\n *\n * @param {String} sign\n */\n\nvar digitsRE = /(\\d{3})(?=\\d)/g\nexports.currency = function (value, currency) {\n  value = parseFloat(value)\n  if (!isFinite(value) || (!value && value !== 0)) return ''\n  currency = currency != null ? currency : '$'\n  var stringified = Math.abs(value).toFixed(2)\n  var _int = stringified.slice(0, -3)\n  var i = _int.length % 3\n  var head = i > 0\n    ? (_int.slice(0, i) + (_int.length > 3 ? ',' : ''))\n    : ''\n  var _float = stringified.slice(-3)\n  var sign = value < 0 ? '-' : ''\n  return currency + sign + head +\n    _int.slice(i).replace(digitsRE, '$1,') +\n    _float\n}\n\n/**\n * 'item' => 'items'\n *\n * @params\n *  an array of strings corresponding to\n *  the single, double, triple ... forms of the word to\n *  be pluralized. When the number to be pluralized\n *  exceeds the length of the args, it will use the last\n *  entry in the array.\n *\n *  e.g. ['single', 'double', 'triple', 'multiple']\n */\n\nexports.pluralize = function (value) {\n  var args = _.toArray(arguments, 1)\n  return args.length > 1\n    ? (args[value % 10 - 1] || args[args.length - 1])\n    : (args[0] + (value === 1 ? '' : 's'))\n}\n\n/**\n * Debounce a handler function.\n *\n * @param {Function} handler\n * @param {Number} delay = 300\n * @return {Function}\n */\n\nexports.debounce = function (handler, delay) {\n  if (!handler) return\n  if (!delay) {\n    delay = 300\n  }\n  return _.debounce(handler, delay)\n}\n\n/**\n * Install special array filters\n */\n\n_.extend(exports, require('./array-filters'))\n\n},{\"../util\":91,\"./array-filters\":67}],69:[function(require,module,exports){\nvar _ = require('../util')\nvar compiler = require('../compiler')\nvar templateParser = require('../parsers/template')\nvar Fragment = require('./fragment')\nvar Cache = require('../cache')\nvar linkerCache = new Cache(5000)\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\n\nfunction FragmentFactory (vm, el) {\n  this.vm = vm\n  var template\n  var isString = typeof el === 'string'\n  if (isString || _.isTemplate(el)) {\n    template = templateParser.parse(el, true)\n  } else {\n    template = document.createDocumentFragment()\n    template.appendChild(el)\n  }\n  this.template = template\n  // linker can be cached, but only for components\n  var linker\n  var cid = vm.constructor.cid\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : el.outerHTML)\n    linker = linkerCache.get(cacheId)\n    if (!linker) {\n      linker = compiler.compile(template, vm.$options, true)\n      linkerCache.put(cacheId, linker)\n    }\n  } else {\n    linker = compiler.compile(template, vm.$options, true)\n  }\n  this.linker = linker\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = templateParser.clone(this.template)\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag)\n}\n\nmodule.exports = FragmentFactory\n\n},{\"../cache\":35,\"../compiler\":38,\"../parsers/template\":82,\"../util\":91,\"./fragment\":70}],70:[function(require,module,exports){\nvar _ = require('../util')\nvar transition = require('../transition')\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n */\n\nfunction Fragment (linker, vm, frag, host, scope, parentFrag) {\n  this.children = []\n  this.childFrags = []\n  this.vm = vm\n  this.scope = scope\n  this.inserted = false\n  this.parentFrag = parentFrag\n  if (parentFrag) {\n    parentFrag.childFrags.push(this)\n  }\n  this.unlink = linker(vm, frag, host, scope, this)\n  var single = this.single = frag.childNodes.length === 1\n  if (single) {\n    this.node = frag.childNodes[0]\n    this.before = singleBefore\n    this.remove = singleRemove\n  } else {\n    this.node = _.createAnchor('fragment-start')\n    this.end = _.createAnchor('fragment-end')\n    this.frag = frag\n    _.prepend(this.node, frag)\n    frag.appendChild(this.end)\n    this.before = multiBefore\n    this.remove = multiRemove\n  }\n  this.node.__vfrag__ = this\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i])\n  }\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook)\n  }\n}\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this)\n  }\n  this.unlink()\n}\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore (target, withTransition) {\n  this.inserted = true\n  var method = withTransition !== false\n    ? transition.before\n    : _.before\n  method(this.node, target, this.vm)\n  if (_.inDoc(this.node)) {\n    this.callHook(attach)\n  }\n}\n\n/**\n * Remove fragment, single node version\n *\n * @param {Boolean} [destroy]\n */\n\nfunction singleRemove (destroy) {\n  this.inserted = false\n  var shouldCallRemove = _.inDoc(this.node)\n  var self = this\n  transition.remove(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach)\n    }\n    if (destroy) {\n      self.destroy()\n    }\n  })\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore (target, withTransition) {\n  this.inserted = true\n  var vm = this.vm\n  var method = withTransition !== false\n    ? transition.before\n    : _.before\n  _.mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm)\n  })\n  if (_.inDoc(this.node)) {\n    this.callHook(attach)\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n *\n * @param {Boolean} [destroy]\n */\n\nfunction multiRemove (destroy) {\n  this.inserted = false\n  var self = this\n  var shouldCallRemove = _.inDoc(this.node)\n  _.removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach)\n    }\n    if (destroy) {\n      self.destroy()\n    }\n  })\n}\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach (child) {\n  if (!child._isAttached) {\n    child._callHook('attached')\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach (child) {\n  if (child._isAttached) {\n    child._callHook('detached')\n  }\n}\n\nmodule.exports = Fragment\n\n},{\"../transition\":84,\"../util\":91}],71:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar inDoc = _.inDoc\nvar eventRE = /^v-on:|^@/\n\n/**\n * Setup the instance's option events & watchers.\n * If the value is a string, we pull it from the\n * instance's methods by name.\n */\n\nexports._initEvents = function () {\n  var options = this.$options\n  if (options._asComponent) {\n    registerComponentEvents(this, options.el)\n  }\n  registerCallbacks(this, '$on', options.events)\n  registerCallbacks(this, '$watch', options.watch)\n}\n\n/**\n * Register v-on events on a child component\n *\n * @param {Vue} vm\n * @param {Element} el\n */\n\nfunction registerComponentEvents (vm, el) {\n  var attrs = el.attributes\n  var name, handler\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    name = attrs[i].name\n    if (eventRE.test(name)) {\n      name = name.replace(eventRE, '')\n      handler = (vm._scope || vm._context).$eval(attrs[i].value, true)\n      vm.$on(name.replace(eventRE), handler)\n    }\n  }\n}\n\n/**\n * Register callbacks for option events and watchers.\n *\n * @param {Vue} vm\n * @param {String} action\n * @param {Object} hash\n */\n\nfunction registerCallbacks (vm, action, hash) {\n  if (!hash) return\n  var handlers, key, i, j\n  for (key in hash) {\n    handlers = hash[key]\n    if (_.isArray(handlers)) {\n      for (i = 0, j = handlers.length; i < j; i++) {\n        register(vm, action, key, handlers[i])\n      }\n    } else {\n      register(vm, action, key, handlers)\n    }\n  }\n}\n\n/**\n * Helper to register an event/watch callback.\n *\n * @param {Vue} vm\n * @param {String} action\n * @param {String} key\n * @param {Function|String|Object} handler\n * @param {Object} [options]\n */\n\nfunction register (vm, action, key, handler, options) {\n  var type = typeof handler\n  if (type === 'function') {\n    vm[action](key, handler, options)\n  } else if (type === 'string') {\n    var methods = vm.$options.methods\n    var method = methods && methods[handler]\n    if (method) {\n      vm[action](key, method, options)\n    } else {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'Unknown method: \"' + handler + '\" when ' +\n        'registering callback for ' + action +\n        ': \"' + key + '\".'\n      )\n    }\n  } else if (handler && type === 'object') {\n    register(vm, action, key, handler.handler, handler)\n  }\n}\n\n/**\n * Setup recursive attached/detached calls\n */\n\nexports._initDOMHooks = function () {\n  this.$on('hook:attached', onAttached)\n  this.$on('hook:detached', onDetached)\n}\n\n/**\n * Callback to recursively call attached hook on children\n */\n\nfunction onAttached () {\n  if (!this._isAttached) {\n    this._isAttached = true\n    this.$children.forEach(callAttach)\n  }\n}\n\n/**\n * Iterator to call attached hook\n *\n * @param {Vue} child\n */\n\nfunction callAttach (child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached')\n  }\n}\n\n/**\n * Callback to recursively call detached hook on children\n */\n\nfunction onDetached () {\n  if (this._isAttached) {\n    this._isAttached = false\n    this.$children.forEach(callDetach)\n  }\n}\n\n/**\n * Iterator to call detached hook\n *\n * @param {Vue} child\n */\n\nfunction callDetach (child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached')\n  }\n}\n\n/**\n * Trigger all handlers for a hook\n *\n * @param {String} hook\n */\n\nexports._callHook = function (hook) {\n  var handlers = this.$options[hook]\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      handlers[i].call(this)\n    }\n  }\n  this.$emit('hook:' + hook)\n}\n\n}).call(this,require('_process'))\n\n},{\"../util\":91,\"_process\":1}],72:[function(require,module,exports){\nvar mergeOptions = require('../util').mergeOptions\nvar uid = 0\n\n/**\n * The main init sequence. This is called for every\n * instance, including ones that are created from extended\n * constructors.\n *\n * @param {Object} options - this options object should be\n *                           the result of merging class\n *                           options and the options passed\n *                           in to the constructor.\n */\n\nexports._init = function (options) {\n\n  options = options || {}\n\n  this.$el = null\n  this.$parent = options.parent\n  this.$root = this.$parent\n    ? this.$parent.$root\n    : this\n  this.$children = []\n  this.$refs = {}       // child vm references\n  this.$els = {}        // element references\n  this._watchers = []   // all watchers as an array\n  this._directives = [] // all directives\n\n  // a uid\n  this._uid = uid++\n\n  // a flag to avoid this being observed\n  this._isVue = true\n\n  // events bookkeeping\n  this._events = {}            // registered callbacks\n  this._eventsCount = {}       // for $broadcast optimization\n  this._shouldPropagate = false // for event propagation\n\n  // fragment instance properties\n  this._isFragment = false\n  this._fragment =         // @type {DocumentFragment}\n  this._fragmentStart =    // @type {Text|Comment}\n  this._fragmentEnd = null // @type {Text|Comment}\n\n  // lifecycle state\n  this._isCompiled =\n  this._isDestroyed =\n  this._isReady =\n  this._isAttached =\n  this._isBeingDestroyed = false\n  this._unlinkFn = null\n\n  // context:\n  // if this is a transcluded component, context\n  // will be the common parent vm of this instance\n  // and its host.\n  this._context = options._context || this.$parent\n\n  // scope:\n  // if this is inside an inline v-for, the scope\n  // will be the intermediate scope created for this\n  // repeat fragment. this is used for linking props\n  // and container directives.\n  this._scope = options._scope\n\n  // fragment:\n  // if this instance is compiled inside a Fragment, it\n  // needs to reigster itself as a child of that fragment\n  // for attach/detach to work properly.\n  this._frag = options._frag\n  if (this._frag) {\n    this._frag.children.push(this)\n  }\n\n  // push self into parent / transclusion host\n  if (this.$parent) {\n    this.$parent.$children.push(this)\n  }\n\n  // set ref\n  if (options._ref) {\n    (this._scope || this._context).$refs[options._ref] = this\n  }\n\n  // merge options.\n  options = this.$options = mergeOptions(\n    this.constructor.options,\n    options,\n    this\n  )\n\n  // initialize data as empty object.\n  // it will be filled up in _initScope().\n  this._data = {}\n\n  // call init hook\n  this._callHook('init')\n\n  // initialize data observation and scope inheritance.\n  this._initState()\n\n  // setup event system and option events.\n  this._initEvents()\n\n  // call created hook\n  this._callHook('created')\n\n  // if `el` option is passed, start compilation.\n  if (options.el) {\n    this.$mount(options.el)\n  }\n}\n\n},{\"../util\":91}],73:[function(require,module,exports){\nvar _ = require('../util')\nvar Directive = require('../directive')\nvar compiler = require('../compiler')\n\n/**\n * Transclude, compile and link element.\n *\n * If a pre-compiled linker is available, that means the\n * passed in element will be pre-transcluded and compiled\n * as well - all we need to do is to call the linker.\n *\n * Otherwise we need to call transclude/compile/link here.\n *\n * @param {Element} el\n * @return {Element}\n */\n\nexports._compile = function (el) {\n  var options = this.$options\n\n  // transclude and init element\n  // transclude can potentially replace original\n  // so we need to keep reference; this step also injects\n  // the template and caches the original attributes\n  // on the container node and replacer node.\n  var original = el\n  el = compiler.transclude(el, options)\n  this._initElement(el)\n\n  // root is always compiled per-instance, because\n  // container attrs and props can be different every time.\n  var contextOptions = this._context && this._context.$options\n  var rootLinker = compiler.compileRoot(el, options, contextOptions)\n\n  // compile and link the rest\n  var contentLinkFn\n  var ctor = this.constructor\n  // component compilation can be cached\n  // as long as it's not using inline-template\n  if (options._linkerCachable) {\n    contentLinkFn = ctor.linker\n    if (!contentLinkFn) {\n      contentLinkFn = ctor.linker = compiler.compile(el, options)\n    }\n  }\n\n  // link phase\n  // make sure to link root with prop scope!\n  var rootUnlinkFn = rootLinker(this, el, this._scope)\n  var contentUnlinkFn = contentLinkFn\n    ? contentLinkFn(this, el)\n    : compiler.compile(el, options)(this, el)\n\n  // register composite unlink function\n  // to be called during instance destruction\n  this._unlinkFn = function () {\n    rootUnlinkFn()\n    // passing destroying: true to avoid searching and\n    // splicing the directives\n    contentUnlinkFn(true)\n  }\n\n  // finally replace original\n  if (options.replace) {\n    _.replace(original, el)\n  }\n\n  this._isCompiled = true\n  this._callHook('compiled')\n  return el\n}\n\n/**\n * Initialize instance element. Called in the public\n * $mount() method.\n *\n * @param {Element} el\n */\n\nexports._initElement = function (el) {\n  if (el instanceof DocumentFragment) {\n    this._isFragment = true\n    this.$el = this._fragmentStart = el.firstChild\n    this._fragmentEnd = el.lastChild\n    // set persisted text anchors to empty\n    if (this._fragmentStart.nodeType === 3) {\n      this._fragmentStart.data = this._fragmentEnd.data = ''\n    }\n    this._fragment = el\n  } else {\n    this.$el = el\n  }\n  this.$el.__vue__ = this\n  this._callHook('beforeCompile')\n}\n\n/**\n * Create and bind a directive to an element.\n *\n * @param {String} name - directive name\n * @param {Node} node   - target node\n * @param {Object} desc - parsed directive descriptor\n * @param {Object} def  - directive definition object\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n */\n\nexports._bindDir = function (descriptor, node, host, scope, frag) {\n  this._directives.push(\n    new Directive(descriptor, this, node, host, scope, frag)\n  )\n}\n\n/**\n * Teardown an instance, unobserves the data, unbind all the\n * directives, turn off all the event listeners, etc.\n *\n * @param {Boolean} remove - whether to remove the DOM node.\n * @param {Boolean} deferCleanup - if true, defer cleanup to\n *                                 be called later\n */\n\nexports._destroy = function (remove, deferCleanup) {\n  if (this._isBeingDestroyed) {\n    return\n  }\n  this._callHook('beforeDestroy')\n  this._isBeingDestroyed = true\n  var i\n  // remove self from parent. only necessary\n  // if parent is not being destroyed as well.\n  var parent = this.$parent\n  if (parent && !parent._isBeingDestroyed) {\n    parent.$children.$remove(this)\n    // unregister ref\n    var ref = this.$options._ref\n    if (ref) {\n      var scope = this._scope || this._context\n      if (scope.$refs[ref] === this) {\n        scope.$refs[ref] = null\n      }\n    }\n  }\n  // remove self from owner fragment\n  if (this._frag) {\n    this._frag.children.$remove(this)\n  }\n  // destroy all children.\n  i = this.$children.length\n  while (i--) {\n    this.$children[i].$destroy()\n  }\n  // teardown props\n  if (this._propsUnlinkFn) {\n    this._propsUnlinkFn()\n  }\n  // teardown all directives. this also tearsdown all\n  // directive-owned watchers.\n  if (this._unlinkFn) {\n    this._unlinkFn()\n  }\n  i = this._watchers.length\n  while (i--) {\n    this._watchers[i].teardown()\n  }\n  // remove reference to self on $el\n  if (this.$el) {\n    this.$el.__vue__ = null\n  }\n  // remove DOM element\n  var self = this\n  if (remove && this.$el) {\n    this.$remove(function () {\n      self._cleanup()\n    })\n  } else if (!deferCleanup) {\n    this._cleanup()\n  }\n}\n\n/**\n * Clean up to ensure garbage collection.\n * This is called after the leave transition if there\n * is any.\n */\n\nexports._cleanup = function () {\n  // remove reference from data ob\n  // frozen object may not have observer.\n  if (this._data.__ob__) {\n    this._data.__ob__.removeVm(this)\n  }\n  // Clean up references to private properties and other\n  // instances. preserve reference to _data so that proxy\n  // accessors still work. The only potential side effect\n  // here is that mutating the instance after it's destroyed\n  // may affect the state of other components that are still\n  // observing the same object, but that seems to be a\n  // reasonable responsibility for the user rather than\n  // always throwing an error on them.\n  this.$el =\n  this.$parent =\n  this.$root =\n  this.$children =\n  this._watchers =\n  this._context =\n  this._scope =\n  this._directives = null\n  // call the last hook...\n  this._isDestroyed = true\n  this._callHook('destroyed')\n  // turn off all instance listeners.\n  this.$off()\n}\n\n},{\"../compiler\":38,\"../directive\":41,\"../util\":91}],74:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\n\n/**\n * Apply a list of filter (descriptors) to a value.\n * Using plain for loops here because this will be called in\n * the getter of any watcher with filters so it is very\n * performance sensitive.\n *\n * @param {*} value\n * @param {*} [oldValue]\n * @param {Array} filters\n * @param {Boolean} write\n * @return {*}\n */\n\nexports._applyFilters = function (value, oldValue, filters, write) {\n  var filter, fn, args, arg, offset, i, l, j, k\n  for (i = 0, l = filters.length; i < l; i++) {\n    filter = filters[i]\n    fn = _.resolveAsset(this.$options, 'filters', filter.name)\n    if (process.env.NODE_ENV !== 'production') {\n      _.assertAsset(fn, 'filter', filter.name)\n    }\n    if (!fn) continue\n    fn = write ? fn.write : (fn.read || fn)\n    if (typeof fn !== 'function') continue\n    args = write ? [value, oldValue] : [value]\n    offset = write ? 2 : 1\n    if (filter.args) {\n      for (j = 0, k = filter.args.length; j < k; j++) {\n        arg = filter.args[j]\n        args[j + offset] = arg.dynamic\n          ? this.$get(arg.value)\n          : arg.value\n      }\n    }\n    value = fn.apply(this, args)\n  }\n  return value\n}\n\n/**\n * Resolve a component, depending on whether the component\n * is defined normally or using an async factory function.\n * Resolves synchronously if already resolved, otherwise\n * resolves asynchronously and caches the resolved\n * constructor on the factory.\n *\n * @param {String} id\n * @param {Function} cb\n */\n\nexports._resolveComponent = function (id, cb) {\n  var factory = _.resolveAsset(this.$options, 'components', id)\n  if (process.env.NODE_ENV !== 'production') {\n    _.assertAsset(factory, 'component', id)\n  }\n  if (!factory) {\n    return\n  }\n  // async component factory\n  if (!factory.options) {\n    if (factory.resolved) {\n      // cached\n      cb(factory.resolved)\n    } else if (factory.requested) {\n      // pool callbacks\n      factory.pendingCallbacks.push(cb)\n    } else {\n      factory.requested = true\n      var cbs = factory.pendingCallbacks = [cb]\n      factory(function resolve (res) {\n        if (_.isPlainObject(res)) {\n          res = _.Vue.extend(res)\n        }\n        // cache resolved\n        factory.resolved = res\n        // invoke callbacks\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          cbs[i](res)\n        }\n      }, function reject (reason) {\n        process.env.NODE_ENV !== 'production' && _.warn(\n          'Failed to resolve async component: ' + id + '. ' +\n          (reason ? '\\nReason: ' + reason : '')\n        )\n      })\n    }\n  } else {\n    // normal component\n    cb(factory)\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../util\":91,\"_process\":1}],75:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar compiler = require('../compiler')\nvar Observer = require('../observer')\nvar Dep = require('../observer/dep')\nvar Watcher = require('../watcher')\n\n/**\n * Setup the scope of an instance, which contains:\n * - observed data\n * - computed properties\n * - user methods\n * - meta properties\n */\n\nexports._initState = function () {\n  this._initProps()\n  this._initMeta()\n  this._initMethods()\n  this._initData()\n  this._initComputed()\n}\n\n/**\n * Initialize props.\n */\n\nexports._initProps = function () {\n  var options = this.$options\n  var el = options.el\n  var props = options.props\n  if (props && !el) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Props will not be compiled if no `el` option is ' +\n      'provided at instantiation.'\n    )\n  }\n  // make sure to convert string selectors into element now\n  el = options.el = _.query(el)\n  this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compiler.compileAndLinkProps(this, el, props, this._scope)\n    : null\n}\n\n/**\n * Initialize the data.\n */\n\nexports._initData = function () {\n  var propsData = this._data\n  var optionsDataFn = this.$options.data\n  var optionsData = optionsDataFn && optionsDataFn()\n  if (optionsData) {\n    this._data = optionsData\n    for (var prop in propsData) {\n      if (process.env.NODE_ENV !== 'production' &&\n          optionsData.hasOwnProperty(prop)) {\n        _.warn(\n          'Data field \"' + prop + '\" is already defined ' +\n          'as a prop. Use prop default value instead.'\n        )\n      }\n      if (this._props[prop].raw !== null ||\n          !optionsData.hasOwnProperty(prop)) {\n        _.set(optionsData, prop, propsData[prop])\n      }\n    }\n  }\n  var data = this._data\n  // proxy data on instance\n  var keys = Object.keys(data)\n  var i, key\n  i = keys.length\n  while (i--) {\n    key = keys[i]\n    this._proxy(key)\n  }\n  // observe data\n  Observer.create(data, this)\n}\n\n/**\n * Swap the isntance's $data. Called in $data's setter.\n *\n * @param {Object} newData\n */\n\nexports._setData = function (newData) {\n  newData = newData || {}\n  var oldData = this._data\n  this._data = newData\n  var keys, key, i\n  // unproxy keys not present in new data\n  keys = Object.keys(oldData)\n  i = keys.length\n  while (i--) {\n    key = keys[i]\n    if (!(key in newData)) {\n      this._unproxy(key)\n    }\n  }\n  // proxy keys not already proxied,\n  // and trigger change for changed values\n  keys = Object.keys(newData)\n  i = keys.length\n  while (i--) {\n    key = keys[i]\n    if (!this.hasOwnProperty(key)) {\n      // new property\n      this._proxy(key)\n    }\n  }\n  oldData.__ob__.removeVm(this)\n  Observer.create(newData, this)\n  this._digest()\n}\n\n/**\n * Proxy a property, so that\n * vm.prop === vm._data.prop\n *\n * @param {String} key\n */\n\nexports._proxy = function (key) {\n  if (!_.isReserved(key)) {\n    // need to store ref to self here\n    // because these getter/setters might\n    // be called by child scopes via\n    // prototype inheritance.\n    var self = this\n    Object.defineProperty(self, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return self._data[key]\n      },\n      set: function proxySetter (val) {\n        self._data[key] = val\n      }\n    })\n  }\n}\n\n/**\n * Unproxy a property.\n *\n * @param {String} key\n */\n\nexports._unproxy = function (key) {\n  if (!_.isReserved(key)) {\n    delete this[key]\n  }\n}\n\n/**\n * Force update on every watcher in scope.\n */\n\nexports._digest = function () {\n  for (var i = 0, l = this._watchers.length; i < l; i++) {\n    this._watchers[i].update(true) // shallow updates\n  }\n}\n\n/**\n * Setup computed properties. They are essentially\n * special getter/setters\n */\n\nfunction noop () {}\nexports._initComputed = function () {\n  var computed = this.$options.computed\n  if (computed) {\n    for (var key in computed) {\n      var userDef = computed[key]\n      var def = {\n        enumerable: true,\n        configurable: true\n      }\n      if (typeof userDef === 'function') {\n        def.get = makeComputedGetter(userDef, this)\n        def.set = noop\n      } else {\n        def.get = userDef.get\n          ? userDef.cache !== false\n            ? makeComputedGetter(userDef.get, this)\n            : _.bind(userDef.get, this)\n          : noop\n        def.set = userDef.set\n          ? _.bind(userDef.set, this)\n          : noop\n      }\n      Object.defineProperty(this, key, def)\n    }\n  }\n}\n\nfunction makeComputedGetter (getter, owner) {\n  var watcher = new Watcher(owner, getter, null, {\n    lazy: true\n  })\n  return function computedGetter () {\n    if (watcher.dirty) {\n      watcher.evaluate()\n    }\n    if (Dep.target) {\n      watcher.depend()\n    }\n    return watcher.value\n  }\n}\n\n/**\n * Setup instance methods. Methods must be bound to the\n * instance since they might be passed down as a prop to\n * child components.\n */\n\nexports._initMethods = function () {\n  var methods = this.$options.methods\n  if (methods) {\n    for (var key in methods) {\n      this[key] = _.bind(methods[key], this)\n    }\n  }\n}\n\n/**\n * Initialize meta information like $index, $key & $value.\n */\n\nexports._initMeta = function () {\n  var metas = this.$options._meta\n  if (metas) {\n    for (var key in metas) {\n      _.defineReactive(this, key, metas[key])\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../compiler\":38,\"../observer\":78,\"../observer/dep\":77,\"../util\":91,\"../watcher\":95,\"_process\":1}],76:[function(require,module,exports){\nvar _ = require('../util')\nvar arrayProto = Array.prototype\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method]\n  _.define(arrayMethods, method, function mutator () {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length\n    var args = new Array(i)\n    while (i--) {\n      args[i] = arguments[i]\n    }\n    var result = original.apply(this, args)\n    var ob = this.__ob__\n    var inserted\n    switch (method) {\n      case 'push':\n        inserted = args\n        break\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\n_.define(\n  arrayProto,\n  '$set',\n  function $set (index, val) {\n    if (index >= this.length) {\n      this.length = index + 1\n    }\n    return this.splice(index, 1, val)[0]\n  }\n)\n\n/**\n * Convenience method to remove the element at given index.\n *\n * @param {Number} index\n * @param {*} val\n */\n\n_.define(\n  arrayProto,\n  '$remove',\n  function $remove (item) {\n    /* istanbul ignore if */\n    if (!this.length) return\n    var index = _.indexOf(this, item)\n    if (index > -1) {\n      return this.splice(index, 1)\n    }\n  }\n)\n\nmodule.exports = arrayMethods\n\n},{\"../util\":91}],77:[function(require,module,exports){\nvar _ = require('../util')\nvar uid = 0\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\n\nfunction Dep () {\n  this.id = uid++\n  this.subs = []\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub)\n}\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub)\n}\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this)\n}\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = _.toArray(this.subs)\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update()\n  }\n}\n\nmodule.exports = Dep\n\n},{\"../util\":91}],78:[function(require,module,exports){\nvar _ = require('../util')\nvar Dep = require('./dep')\nvar arrayMethods = require('./array')\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer (value) {\n  this.value = value\n  this.dep = new Dep()\n  _.define(value, '__ob__', this)\n  if (_.isArray(value)) {\n    var augment = _.hasProto\n      ? protoAugment\n      : copyAugment\n    augment(value, arrayMethods, arrayKeys)\n    this.observeArray(value)\n  } else {\n    this.walk(value)\n  }\n}\n\n// Static methods\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nObserver.create = function (value, vm) {\n  if (!value || typeof value !== 'object') {\n    return\n  }\n  var ob\n  if (\n    value.hasOwnProperty('__ob__') &&\n    value.__ob__ instanceof Observer\n  ) {\n    ob = value.__ob__\n  } else if (\n    (_.isArray(value) || _.isPlainObject(value)) &&\n    !Object.isFrozen(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (ob && vm) {\n    ob.addVm(vm)\n  }\n  return ob\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj)\n  var i = keys.length\n  while (i--) {\n    this.convert(keys[i], obj[keys[i]])\n  }\n}\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  var i = items.length\n  while (i--) {\n    Observer.create(items[i])\n  }\n}\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val)\n}\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm)\n}\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm)\n}\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction protoAugment (target, src) {\n  target.__proto__ = src\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment (target, src, keys) {\n  var i = keys.length\n  var key\n  while (i--) {\n    key = keys[i]\n    _.define(target, key, src[key])\n  }\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive (obj, key, val) {\n  var dep = new Dep()\n  var childOb = Observer.create(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function metaGetter () {\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n        }\n        if (_.isArray(val)) {\n          for (var e, i = 0, l = val.length; i < l; i++) {\n            e = val[i]\n            e && e.__ob__ && e.__ob__.dep.depend()\n          }\n        }\n      }\n      return val\n    },\n    set: function metaSetter (newVal) {\n      if (newVal === val) return\n      val = newVal\n      childOb = Observer.create(newVal)\n      dep.notify()\n    }\n  })\n}\n\n// Attach to the util object so it can be used elsewhere.\n_.defineReactive = defineReactive\n\nmodule.exports = Observer\n\n},{\"../util\":91,\"./array\":76,\"./dep\":77}],79:[function(require,module,exports){\nvar _ = require('../util')\nvar Cache = require('../cache')\nvar cache = new Cache(1000)\nvar filterTokenRE = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g\nvar reservedArgRE = /^in$|^-?\\d+/\n\n/**\n * Parser state\n */\n\nvar str, dir\nvar c, i, l, lastFilterIndex\nvar inSingle, inDouble, curly, square, paren\n\n/**\n * Push a filter to the current directive object\n */\n\nfunction pushFilter () {\n  var exp = str.slice(lastFilterIndex, i).trim()\n  var filter\n  if (exp) {\n    filter = {}\n    var tokens = exp.match(filterTokenRE)\n    filter.name = tokens[0]\n    if (tokens.length > 1) {\n      filter.args = tokens.slice(1).map(processFilterArg)\n    }\n  }\n  if (filter) {\n    (dir.filters = dir.filters || []).push(filter)\n  }\n  lastFilterIndex = i + 1\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg (arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: _.toNumber(arg),\n      dynamic: false\n    }\n  } else {\n    var stripped = _.stripQuotes(arg)\n    var dynamic = stripped === arg\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    }\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} str\n * @return {Object}\n */\n\nexports.parse = function (s) {\n\n  var hit = cache.get(s)\n  if (hit) {\n    return hit\n  }\n\n  // reset parser state\n  str = s\n  inSingle = inDouble = false\n  curly = square = paren = 0\n  lastFilterIndex = 0\n  dir = {}\n\n  for (i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i)\n    if (inSingle) {\n      // check single quote\n      if (c === 0x27) inSingle = !inSingle\n    } else if (inDouble) {\n      // check double quote\n      if (c === 0x22) inDouble = !inDouble\n    } else if (\n      c === 0x7C && // pipe\n      str.charCodeAt(i + 1) !== 0x7C &&\n      str.charCodeAt(i - 1) !== 0x7C\n    ) {\n      if (dir.expression == null) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1\n        dir.expression = str.slice(0, i).trim()\n      } else {\n        // already has filter\n        pushFilter()\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break // \"\n        case 0x27: inSingle = true; break // '\n        case 0x28: paren++; break         // (\n        case 0x29: paren--; break         // )\n        case 0x5B: square++; break        // [\n        case 0x5D: square--; break        // ]\n        case 0x7B: curly++; break         // {\n        case 0x7D: curly--; break         // }\n      }\n    }\n  }\n\n  if (dir.expression == null) {\n    dir.expression = str.slice(0, i).trim()\n  } else if (lastFilterIndex !== 0) {\n    pushFilter()\n  }\n\n  cache.put(s, dir)\n  return dir\n}\n\n},{\"../cache\":35,\"../util\":91}],80:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar Path = require('./path')\nvar Cache = require('../cache')\nvar expressionCache = new Cache(1000)\n\nvar allowedKeywords =\n  'Math,Date,this,true,false,null,undefined,Infinity,NaN,' +\n  'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' +\n  'encodeURIComponent,parseInt,parseFloat'\nvar allowedKeywordsRE =\n  new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)')\n\n// keywords that don't make sense inside expressions\nvar improperKeywords =\n  'break,case,class,catch,const,continue,debugger,default,' +\n  'delete,do,else,export,extends,finally,for,function,if,' +\n  'import,in,instanceof,let,return,super,switch,throw,try,' +\n  'var,while,with,yield,enum,await,implements,package,' +\n  'proctected,static,interface,private,public'\nvar improperKeywordsRE =\n  new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)')\n\nvar wsRE = /\\s/g\nvar newlineRE = /\\n/g\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('[^']*'|\"[^\"]*\")|new |typeof |void /g\nvar restoreRE = /\"(\\d+)\"/g\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/\nvar pathReplaceRE = /[^\\w$\\.]([A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\])*)/g\nvar booleanLiteralRE = /^(true|false)$/\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = []\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save (str, isString) {\n  var i = saved.length\n  saved[i] = isString\n    ? str.replace(newlineRE, '\\\\n')\n    : str\n  return '\"' + i + '\"'\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite (raw) {\n  var c = raw.charAt(0)\n  var path = raw.slice(1)\n  if (allowedKeywordsRE.test(path)) {\n    return raw\n  } else {\n    path = path.indexOf('\"') > -1\n      ? path.replace(restoreRE, restore)\n      : path\n    return c + 'scope.' + path\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore (str, i) {\n  return saved[i]\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction compileExpFns (exp, needSet) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Avoid using reserved keywords in expression: ' + exp\n    )\n  }\n  // reset state\n  saved.length = 0\n  // save strings and object literal keys\n  var body = exp\n    .replace(saveRE, save)\n    .replace(wsRE, '')\n  // rewrite all paths\n  // pad 1 space here becaue the regex matches 1 extra char\n  body = (' ' + body)\n    .replace(pathReplaceRE, rewrite)\n    .replace(restoreRE, restore)\n  var getter = makeGetter(body)\n  if (getter) {\n    return {\n      get: getter,\n      body: body,\n      set: needSet\n        ? makeSetter(body)\n        : null\n    }\n  }\n}\n\n/**\n * Compile getter setters for a simple path.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compilePathFns (exp) {\n  var getter, path\n  if (exp.indexOf('[') < 0) {\n    // really simple path\n    path = exp.split('.')\n    path.raw = exp\n    getter = Path.compileGetter(path)\n  } else {\n    // do the real parsing\n    path = Path.parse(exp)\n    getter = path.get\n  }\n  return {\n    get: getter,\n    // always generate setter for simple paths\n    set: function (obj, val) {\n      Path.set(obj, path, val)\n    }\n  }\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetter (body) {\n  try {\n    return new Function('scope', 'return ' + body + ';')\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Invalid expression. ' +\n      'Generated function body: ' + body\n    )\n  }\n}\n\n/**\n * Build a setter function.\n *\n * This is only needed in rare situations like \"a[b]\" where\n * a settable path requires dynamic evaluation.\n *\n * This setter function may throw error when called if the\n * expression body is not a valid left-hand expression in\n * assignment.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeSetter (body) {\n  try {\n    return new Function('scope', 'value', body + '=value;')\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Invalid setter function body: ' + body\n    )\n  }\n}\n\n/**\n * Check for setter existence on a cache hit.\n *\n * @param {Function} hit\n */\n\nfunction checkSetter (hit) {\n  if (!hit.set) {\n    hit.set = makeSetter(hit.body)\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nexports.parse = function (exp, needSet) {\n  exp = exp.trim()\n  // try cache\n  var hit = expressionCache.get(exp)\n  if (hit) {\n    if (needSet) {\n      checkSetter(hit)\n    }\n    return hit\n  }\n  // we do a simple path check to optimize for them.\n  // the check fails valid paths with unusal whitespaces,\n  // but that's too rare and we don't care.\n  // also skip boolean literals and paths that start with\n  // global \"Math\"\n  var res = exports.isSimplePath(exp)\n    ? compilePathFns(exp)\n    : compileExpFns(exp, needSet)\n  expressionCache.put(exp, res)\n  return res\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nexports.isSimplePath = function (exp) {\n  return pathTestRE.test(exp) &&\n    // don't treat true/false as paths\n    !booleanLiteralRE.test(exp) &&\n    // Math constants e.g. Math.PI, Math.E etc.\n    exp.slice(0, 5) !== 'Math.'\n}\n\n}).call(this,require('_process'))\n\n},{\"../cache\":35,\"../util\":91,\"./path\":81,\"_process\":1}],81:[function(require,module,exports){\n(function (process){\nvar _ = require('../util')\nvar Cache = require('../cache')\nvar pathCache = new Cache(1000)\nvar identRE = exports.identRE = /^[$_a-zA-Z]+[\\w$]*$/\n\n// actions\nvar APPEND = 0\nvar PUSH = 1\n\n// states\nvar BEFORE_PATH = 0\nvar IN_PATH = 1\nvar BEFORE_IDENT = 2\nvar IN_IDENT = 3\nvar BEFORE_ELEMENT = 4\nvar AFTER_ZERO = 5\nvar IN_INDEX = 6\nvar IN_SINGLE_QUOTE = 7\nvar IN_DOUBLE_QUOTE = 8\nvar IN_SUB_PATH = 9\nvar AFTER_ELEMENT = 10\nvar AFTER_PATH = 11\nvar ERROR = 12\n\nvar pathStateMachine = []\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [BEFORE_ELEMENT],\n  'eof': [AFTER_PATH]\n}\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [BEFORE_ELEMENT],\n  'eof': [AFTER_PATH]\n}\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n}\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [BEFORE_ELEMENT, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n}\n\npathStateMachine[BEFORE_ELEMENT] = {\n  'ws': [BEFORE_ELEMENT],\n  '0': [AFTER_ZERO, APPEND],\n  'number': [IN_INDEX, APPEND],\n  \"'\": [IN_SINGLE_QUOTE, APPEND, ''],\n  '\"': [IN_DOUBLE_QUOTE, APPEND, ''],\n  'ident': [IN_SUB_PATH, APPEND, '*']\n}\n\npathStateMachine[AFTER_ZERO] = {\n  'ws': [AFTER_ELEMENT, PUSH],\n  ']': [IN_PATH, PUSH]\n}\n\npathStateMachine[IN_INDEX] = {\n  '0': [IN_INDEX, APPEND],\n  'number': [IN_INDEX, APPEND],\n  'ws': [AFTER_ELEMENT],\n  ']': [IN_PATH, PUSH]\n}\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [AFTER_ELEMENT],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n}\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [AFTER_ELEMENT],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n}\n\npathStateMachine[IN_SUB_PATH] = {\n  'ident': [IN_SUB_PATH, APPEND],\n  '0': [IN_SUB_PATH, APPEND],\n  'number': [IN_SUB_PATH, APPEND],\n  'ws': [AFTER_ELEMENT],\n  ']': [IN_PATH, PUSH]\n}\n\npathStateMachine[AFTER_ELEMENT] = {\n  'ws': [AFTER_ELEMENT],\n  ']': [IN_PATH, PUSH]\n}\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType (ch) {\n  if (ch === undefined) {\n    return 'eof'\n  }\n\n  var code = ch.charCodeAt(0)\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30: // 0\n      return ch\n\n    case 0x5F: // _\n    case 0x24: // $\n      return 'ident'\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0:  // No-break space\n    case 0xFEFF:  // Byte Order Mark\n    case 0x2028:  // Line Separator\n    case 0x2029:  // Paragraph Separator\n      return 'ws'\n  }\n\n  // a-z, A-Z\n  if (\n    (code >= 0x61 && code <= 0x7A) ||\n    (code >= 0x41 && code <= 0x5A)\n  ) {\n    return 'ident'\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number'\n  }\n\n  return 'else'\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath (path) {\n  var keys = []\n  var index = -1\n  var mode = BEFORE_PATH\n  var c, newChar, key, type, transition, action, typeMap\n\n  var actions = []\n  actions[PUSH] = function () {\n    if (key === undefined) {\n      return\n    }\n    keys.push(key)\n    key = undefined\n  }\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar\n    } else {\n      key += newChar\n    }\n  }\n\n  function maybeUnescapeQuote () {\n    var nextChar = path[index + 1]\n    if ((mode === IN_SINGLE_QUOTE && nextChar === \"'\") ||\n        (mode === IN_DOUBLE_QUOTE && nextChar === '\"')) {\n      index++\n      newChar = nextChar\n      actions[APPEND]()\n      return true\n    }\n  }\n\n  while (mode != null) {\n    index++\n    c = path[index]\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue\n    }\n\n    type = getPathCharType(c)\n    typeMap = pathStateMachine[mode]\n    transition = typeMap[type] || typeMap['else'] || ERROR\n\n    if (transition === ERROR) {\n      return // parse error\n    }\n\n    mode = transition[0]\n    action = actions[transition[1]]\n    if (action) {\n      newChar = transition[2]\n      newChar = newChar === undefined\n        ? c\n        : newChar === '*'\n          ? newChar + c\n          : newChar\n      action()\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path\n      return keys\n    }\n  }\n}\n\n/**\n * Format a accessor segment based on its type.\n *\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction formatAccessor (key) {\n  if (identRE.test(key)) { // identifier\n    return '.' + key\n  } else if (+key === key >>> 0) { // bracket index\n    return '[' + key + ']'\n  } else if (key.charAt(0) === '*') {\n    return '[o' + formatAccessor(key.slice(1)) + ']'\n  } else { // bracket string\n    return '[\"' + key.replace(/\"/g, '\\\\\"') + '\"]'\n  }\n}\n\n/**\n * Compiles a getter function with a fixed path.\n * The fixed path getter supresses errors.\n *\n * @param {Array} path\n * @return {Function}\n */\n\nexports.compileGetter = function (path) {\n  var body = 'return o' + path.map(formatAccessor).join('')\n  return new Function('o', body)\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nexports.parse = function (path) {\n  var hit = pathCache.get(path)\n  if (!hit) {\n    hit = parsePath(path)\n    if (hit) {\n      hit.get = exports.compileGetter(hit)\n      pathCache.put(path, hit)\n    }\n  }\n  return hit\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nexports.get = function (obj, path) {\n  path = exports.parse(path)\n  if (path) {\n    return path.get(obj)\n  }\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path) {\n    _.warn(\n      'You are setting a non-existent path \"' + path.raw + '\" ' +\n      'on a vm instance. Consider pre-initializing the property ' +\n      'with the \"data\" option for more reliable reactivity ' +\n      'and better performance.'\n    )\n  }\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nexports.set = function (obj, path, val) {\n  var original = obj\n  if (typeof path === 'string') {\n    path = exports.parse(path)\n  }\n  if (!path || !_.isObject(obj)) {\n    return false\n  }\n  var last, key\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj\n    key = path[i]\n    if (key.charAt(0) === '*') {\n      key = original[key.slice(1)]\n    }\n    if (i < l - 1) {\n      obj = obj[key]\n      if (!_.isObject(obj)) {\n        obj = {}\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path)\n        }\n        _.set(last, key, obj)\n      }\n    } else {\n      if (_.isArray(obj)) {\n        obj.$set(key, val)\n      } else if (key in obj) {\n        obj[key] = val\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path)\n        }\n        _.set(obj, key, val)\n      }\n    }\n  }\n  return true\n}\n\n}).call(this,require('_process'))\n\n},{\"../cache\":35,\"../util\":91,\"_process\":1}],82:[function(require,module,exports){\nvar _ = require('../util')\nvar Cache = require('../cache')\nvar templateCache = new Cache(1000)\nvar idSelectorCache = new Cache(1000)\n\nvar map = {\n  _default: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [\n    2,\n    '<table><tbody></tbody><colgroup>',\n    '</colgroup></table>'\n  ]\n}\n\nmap.td =\nmap.th = [\n  3,\n  '<table><tbody><tr>',\n  '</tr></tbody></table>'\n]\n\nmap.option =\nmap.optgroup = [\n  1,\n  '<select multiple=\"multiple\">',\n  '</select>'\n]\n\nmap.thead =\nmap.tbody =\nmap.colgroup =\nmap.caption =\nmap.tfoot = [1, '<table>', '</table>']\n\nmap.g =\nmap.defs =\nmap.symbol =\nmap.use =\nmap.image =\nmap.text =\nmap.circle =\nmap.ellipse =\nmap.line =\nmap.path =\nmap.polygon =\nmap.polyline =\nmap.rect = [\n  1,\n  '<svg ' +\n    'xmlns=\"http://www.w3.org/2000/svg\" ' +\n    'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' +\n    'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' +\n    'version=\"1.1\">',\n  '</svg>'\n]\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate (node) {\n  return _.isTemplate(node) &&\n    node.content instanceof DocumentFragment\n}\n\nvar tagRE = /<([\\w:]+)/\nvar entityRE = /&\\w+;|&#\\d+;|&#x[\\dA-F]+;/\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment (templateString) {\n  // try a cache hit first\n  var hit = templateCache.get(templateString)\n  if (hit) {\n    return hit\n  }\n\n  var frag = document.createDocumentFragment()\n  var tagMatch = templateString.match(tagRE)\n  var entityMatch = entityRE.test(templateString)\n\n  if (!tagMatch && !entityMatch) {\n    // text only, return a single text node.\n    frag.appendChild(\n      document.createTextNode(templateString)\n    )\n  } else {\n\n    var tag = tagMatch && tagMatch[1]\n    var wrap = map[tag] || map._default\n    var depth = wrap[0]\n    var prefix = wrap[1]\n    var suffix = wrap[2]\n    var node = document.createElement('div')\n\n    node.innerHTML = prefix + templateString.trim() + suffix\n    while (depth--) {\n      node = node.lastChild\n    }\n\n    var child\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n    /* eslint-enable no-cond-assign */\n      frag.appendChild(child)\n    }\n  }\n\n  templateCache.put(templateString, frag)\n  return frag\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment (node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment.\n  if (isRealTemplate(node)) {\n    _.trimNode(node.content)\n    return node.content\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent)\n  }\n  // normal node, clone it to avoid mutating the original\n  var clone = exports.clone(node)\n  var frag = document.createDocumentFragment()\n  var child\n  /* eslint-disable no-cond-assign */\n  while (child = clone.firstChild) {\n  /* eslint-enable no-cond-assign */\n    frag.appendChild(child)\n  }\n  _.trimNode(frag)\n  return frag\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/show_bug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (_.inBrowser) {\n    var a = document.createElement('div')\n    a.innerHTML = '<template>1</template>'\n    return !a.cloneNode(true).firstChild.innerHTML\n  } else {\n    return false\n  }\n})()\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (_.inBrowser) {\n    var t = document.createElement('textarea')\n    t.placeholder = 't'\n    return t.cloneNode(true).value === 't'\n  } else {\n    return false\n  }\n})()\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nexports.clone = function (node) {\n  if (!node.querySelectorAll) {\n    return node.cloneNode()\n  }\n  var res = node.cloneNode(true)\n  var i, original, cloned\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var clone = res\n    if (isRealTemplate(node)) {\n      node = node.content\n      clone = res.content\n    }\n    original = node.querySelectorAll('template')\n    if (original.length) {\n      cloned = clone.querySelectorAll('template')\n      i = cloned.length\n      while (i--) {\n        cloned[i].parentNode.replaceChild(\n          exports.clone(original[i]),\n          cloned[i]\n        )\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value\n    } else {\n      original = node.querySelectorAll('textarea')\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea')\n        i = cloned.length\n        while (i--) {\n          cloned[i].value = original[i].value\n        }\n      }\n    }\n  }\n  return res\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *    Possible values include:\n *    - DocumentFragment object\n *    - Node object of type Template\n *    - id selector: '#some-template-id'\n *    - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} clone\n * @param {Boolean} noSelector\n * @return {DocumentFragment|undefined}\n */\n\nexports.parse = function (template, clone, noSelector) {\n  var node, frag\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (template instanceof DocumentFragment) {\n    _.trimNode(template)\n    return clone\n      ? exports.clone(template)\n      : template\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!noSelector && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template)\n      if (!frag) {\n        node = document.getElementById(template.slice(1))\n        if (node) {\n          frag = nodeToFragment(node)\n          // save selector to cache\n          idSelectorCache.put(template, frag)\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template)\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template)\n  }\n\n  return frag && clone\n    ? exports.clone(frag)\n    : frag\n}\n\n},{\"../cache\":35,\"../util\":91}],83:[function(require,module,exports){\nvar Cache = require('../cache')\nvar config = require('../config')\nvar dirParser = require('./directive')\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g\nvar cache, tagRE, htmlRE\n\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex (str) {\n  return str.replace(regexEscapeRE, '\\\\$&')\n}\n\nexports.compileRegex = function () {\n  var open = escapeRegex(config.delimiters[0])\n  var close = escapeRegex(config.delimiters[1])\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0])\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1])\n  tagRE = new RegExp(\n    unsafeOpen + '(.+?)' + unsafeClose + '|' +\n    open + '(.+?)' + close,\n    'g'\n  )\n  htmlRE = new RegExp(\n    '^' + unsafeOpen + '.*' + unsafeClose + '$'\n  )\n  // reset cache\n  cache = new Cache(1000)\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nexports.parse = function (text) {\n  if (!cache) {\n    exports.compileRegex()\n  }\n  var hit = cache.get(text)\n  if (hit) {\n    return hit\n  }\n  text = text.replace(/\\n/g, '')\n  if (!tagRE.test(text)) {\n    return null\n  }\n  var tokens = []\n  var lastIndex = tagRE.lastIndex = 0\n  var match, index, html, value, first, oneTime\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n  /* eslint-enable no-cond-assign */\n    index = match.index\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      })\n    }\n    // tag token\n    html = htmlRE.test(match[0])\n    value = html ? match[1] : match[2]\n    first = value.charCodeAt(0)\n    oneTime = first === 42 // *\n    value = oneTime\n      ? value.slice(1)\n      : value\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    })\n    lastIndex = index + match[0].length\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    })\n  }\n  cache.put(text, tokens)\n  return tokens\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @return {String}\n */\n\nexports.tokensToExp = function (tokens) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token)\n    }).join('+')\n  } else {\n    return formatToken(tokens[0], true)\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Boolean} single\n * @return {String}\n */\n\nfunction formatToken (token, single) {\n  return token.tag\n    ? inlineFilters(token.value, single)\n    : '\"' + token.value + '\"'\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/\nfunction inlineFilters (exp, single) {\n  if (!filterRE.test(exp)) {\n    return single\n      ? exp\n      : '(' + exp + ')'\n  } else {\n    var dir = dirParser.parse(exp)\n    if (!dir.filters) {\n      return '(' + exp + ')'\n    } else {\n      return 'this._applyFilters(' +\n        dir.expression + // value\n        ',null,' +       // oldValue (null for read)\n        JSON.stringify(dir.filters) + // filter descriptors\n        ',false)'        // write?\n    }\n  }\n}\n\n},{\"../cache\":35,\"../config\":40,\"./directive\":79}],84:[function(require,module,exports){\nvar _ = require('../util')\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nexports.append = function (el, target, vm, cb) {\n  apply(el, 1, function () {\n    target.appendChild(el)\n  }, vm, cb)\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nexports.before = function (el, target, vm, cb) {\n  apply(el, 1, function () {\n    _.before(el, target)\n  }, vm, cb)\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nexports.remove = function (el, vm, cb) {\n  apply(el, -1, function () {\n    _.remove(el)\n  }, vm, cb)\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nvar apply = exports.apply = function (el, direction, op, vm, cb) {\n  var transition = el.__v_trans\n  if (\n    !transition ||\n    // skip if there are no js hooks and CSS transition is\n    // not supported\n    (!transition.hooks && !_.transitionEndEvent) ||\n    // skip transitions for initial compile\n    !vm._isCompiled ||\n    // if the vm is being manipulated by a parent directive\n    // during the parent's compilation phase, skip the\n    // animation.\n    (vm.$parent && !vm.$parent._isCompiled)\n  ) {\n    op()\n    if (cb) cb()\n    return\n  }\n  var action = direction > 0 ? 'enter' : 'leave'\n  transition[action](op, cb)\n}\n\n},{\"../util\":91}],85:[function(require,module,exports){\nvar _ = require('../util')\nvar queue = []\nvar queued = false\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nexports.push = function (job) {\n  queue.push(job)\n  if (!queued) {\n    queued = true\n    _.nextTick(flush)\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush () {\n  // Force layout\n  var f = document.documentElement.offsetHeight\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]()\n  }\n  queue = []\n  queued = false\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f\n}\n\n},{\"../util\":91}],86:[function(require,module,exports){\nvar _ = require('../util')\nvar queue = require('./queue')\nvar addClass = _.addClass\nvar removeClass = _.removeClass\nvar transitionEndEvent = _.transitionEndEvent\nvar animationEndEvent = _.animationEndEvent\nvar transDurationProp = _.transitionProp + 'Duration'\nvar animDurationProp = _.animationProp + 'Duration'\n\nvar TYPE_TRANSITION = 1\nvar TYPE_ANIMATION = 2\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\n\nfunction Transition (el, id, hooks, vm) {\n  this.id = id\n  this.el = el\n  this.enterClass = id + '-enter'\n  this.leaveClass = id + '-leave'\n  this.hooks = hooks\n  this.vm = vm\n  // async state\n  this.pendingCssEvent =\n  this.pendingCssCb =\n  this.cancel =\n  this.pendingJsCb =\n  this.op =\n  this.cb = null\n  this.justEntered = false\n  this.entered = this.left = false\n  this.typeCache = {}\n  // bind\n  var self = this\n  ;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone']\n    .forEach(function (m) {\n      self[m] = _.bind(self[m], self)\n    })\n}\n\nvar p = Transition.prototype\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np.enter = function (op, cb) {\n  this.cancelPending()\n  this.callHook('beforeEnter')\n  this.cb = cb\n  addClass(this.el, this.enterClass)\n  op()\n  this.entered = false\n  this.callHookWithCb('enter')\n  if (this.entered) {\n    return // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled\n  queue.push(this.enterNextTick)\n}\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np.enterNextTick = function () {\n\n  // Important hack:\n  // in Chrome, if a just-entered element is applied the\n  // leave class while its interpolated property still has\n  // a very small value (within one frame), Chrome will\n  // skip the leave transition entirely and not firing the\n  // transtionend event. Therefore we need to protected\n  // against such cases using a one-frame timeout.\n  this.justEntered = true\n  var self = this\n  setTimeout(function () {\n    self.justEntered = false\n  }, 17)\n\n  var enterDone = this.enterDone\n  var type = this.getCssTransitionType(this.enterClass)\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass)\n      this.setupCssCb(transitionEndEvent, enterDone)\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone)\n    } else {\n      enterDone()\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass)\n  }\n}\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np.enterDone = function () {\n  this.entered = true\n  this.cancel = this.pendingJsCb = null\n  removeClass(this.el, this.enterClass)\n  this.callHook('afterEnter')\n  if (this.cb) this.cb()\n}\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np.leave = function (op, cb) {\n  this.cancelPending()\n  this.callHook('beforeLeave')\n  this.op = op\n  this.cb = cb\n  addClass(this.el, this.leaveClass)\n  this.left = false\n  this.callHookWithCb('leave')\n  if (this.left) {\n    return // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone()\n    } else {\n      queue.push(this.leaveNextTick)\n    }\n  }\n}\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass)\n  if (type) {\n    var event = type === TYPE_TRANSITION\n      ? transitionEndEvent\n      : animationEndEvent\n    this.setupCssCb(event, this.leaveDone)\n  } else {\n    this.leaveDone()\n  }\n}\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np.leaveDone = function () {\n  this.left = true\n  this.cancel = this.pendingJsCb = null\n  this.op()\n  removeClass(this.el, this.leaveClass)\n  this.callHook('afterLeave')\n  if (this.cb) this.cb()\n  this.op = null\n}\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np.cancelPending = function () {\n  this.op = this.cb = null\n  var hasPending = false\n  if (this.pendingCssCb) {\n    hasPending = true\n    _.off(this.el, this.pendingCssEvent, this.pendingCssCb)\n    this.pendingCssEvent = this.pendingCssCb = null\n  }\n  if (this.pendingJsCb) {\n    hasPending = true\n    this.pendingJsCb.cancel()\n    this.pendingJsCb = null\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass)\n    removeClass(this.el, this.leaveClass)\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el)\n    this.cancel = null\n  }\n}\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el)\n  }\n}\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type]\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = _.cancellable(this[type + 'Done'])\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb)\n  }\n}\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (\n    !transitionEndEvent ||\n    // skip CSS transitions if page is not visible -\n    // this solves the issue of transitionend events not\n    // firing until the page is visible again.\n    // pageVisibility API is supported in IE10+, same as\n    // CSS transitions.\n    document.hidden ||\n    // explicit js-only transition\n    (this.hooks && this.hooks.css === false) ||\n    // element is hidden\n    isHidden(this.el)\n  ) {\n    return\n  }\n  var type = this.typeCache[className]\n  if (type) return type\n  var inlineStyles = this.el.style\n  var computedStyles = window.getComputedStyle(this.el)\n  var transDuration =\n    inlineStyles[transDurationProp] ||\n    computedStyles[transDurationProp]\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION\n  } else {\n    var animDuration =\n      inlineStyles[animDurationProp] ||\n      computedStyles[animDurationProp]\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type\n  }\n  return type\n}\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event\n  var self = this\n  var el = this.el\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      _.off(el, event, onEnd)\n      self.pendingCssEvent = self.pendingCssCb = null\n      if (!self.pendingJsCb && cb) {\n        cb()\n      }\n    }\n  }\n  _.on(el, event, onEnd)\n}\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden (el) {\n  return !(\n    el.offsetWidth &&\n    el.offsetHeight &&\n    el.getClientRects().length\n  )\n}\n\nmodule.exports = Transition\n\n},{\"../util\":91,\"./queue\":85}],87:[function(require,module,exports){\n(function (process){\nvar _ = require('./index')\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nexports.commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/\nexports.checkComponent = function (el, options) {\n  var tag = el.tagName.toLowerCase()\n  var hasAttrs = el.hasAttributes()\n  if (!exports.commonTagRE.test(tag) && tag !== 'component') {\n    if (_.resolveAsset(options, 'components', tag)) {\n      return { id: tag }\n    } else {\n      var is = hasAttrs && getIsBinding(el)\n      if (is) {\n        return is\n      } else if (process.env.NODE_ENV !== 'production') {\n        if (\n          tag.indexOf('-') > -1 ||\n          (\n            /HTMLUnknownElement/.test(el.toString()) &&\n            // Chrome returns unknown for several HTML5 elements.\n            // https://code.google.com/p/chromium/issues/detail?id=540526\n            !/^(data|time|rtc|rb)$/.test(tag)\n          )\n        ) {\n          _.warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly?'\n          )\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el)\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @return {Object|undefined}\n */\n\nfunction getIsBinding (el) {\n  // dynamic syntax\n  var exp = _.attr(el, 'is')\n  if (exp != null) {\n    return { id: exp }\n  } else {\n    exp = _.getBindAttr(el, 'is')\n    if (exp != null) {\n      return { id: exp, dynamic: true }\n    }\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nexports.initProp = function (vm, prop, value) {\n  if (exports.assertProp(prop, value)) {\n    var key = prop.path\n    vm[key] = vm._data[key] = value\n  }\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n */\n\nexports.assertProp = function (prop, value) {\n  // if a prop is not provided and is not required,\n  // skip the check.\n  if (prop.raw === null && !prop.required) {\n    return true\n  }\n  var options = prop.options\n  var type = options.type\n  var valid = true\n  var expectedType\n  if (type) {\n    if (type === String) {\n      expectedType = 'string'\n      valid = typeof value === expectedType\n    } else if (type === Number) {\n      expectedType = 'number'\n      valid = typeof value === 'number'\n    } else if (type === Boolean) {\n      expectedType = 'boolean'\n      valid = typeof value === 'boolean'\n    } else if (type === Function) {\n      expectedType = 'function'\n      valid = typeof value === 'function'\n    } else if (type === Object) {\n      expectedType = 'object'\n      valid = _.isPlainObject(value)\n    } else if (type === Array) {\n      expectedType = 'array'\n      valid = _.isArray(value)\n    } else {\n      valid = value instanceof type\n    }\n  }\n  if (!valid) {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'Invalid prop: type check failed for ' +\n      prop.path + '=\"' + prop.raw + '\".' +\n      ' Expected ' + formatType(expectedType) +\n      ', got ' + formatValue(value) + '.'\n    )\n    return false\n  }\n  var validator = options.validator\n  if (validator) {\n    if (!validator.call(null, value)) {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'Invalid prop: custom validator check failed for ' +\n        prop.path + '=\"' + prop.raw + '\"'\n      )\n      return false\n    }\n  }\n  return true\n}\n\nfunction formatType (val) {\n  return val\n    ? val.charAt(0).toUpperCase() + val.slice(1)\n    : 'custom type'\n}\n\nfunction formatValue (val) {\n  return Object.prototype.toString.call(val).slice(8, -1)\n}\n\n}).call(this,require('_process'))\n\n},{\"./index\":91,\"_process\":1}],88:[function(require,module,exports){\n(function (process){\n/**\n * Enable debug utilities.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n\n  var config = require('../config')\n  var hasConsole = typeof console !== 'undefined'\n\n  /**\n   * Log a message.\n   *\n   * @param {String} msg\n   */\n\n  exports.log = function (msg) {\n    if (hasConsole && config.debug) {\n      console.log('[Vue info]: ' + msg)\n    }\n  }\n\n  /**\n   * We've got a problem here.\n   *\n   * @param {String} msg\n   */\n\n  exports.warn = function (msg, e) {\n    if (hasConsole && (!config.silent || config.debug)) {\n      console.warn('[Vue warn]: ' + msg)\n      /* istanbul ignore if */\n      if (config.debug) {\n        console.warn((e || new Error('Warning Stack Trace')).stack)\n      }\n    }\n  }\n\n  /**\n   * Assert asset exists\n   */\n\n  exports.assertAsset = function (val, type, id) {\n    if (!val) {\n      exports.warn('Failed to resolve ' + type + ': ' + id)\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../config\":40,\"_process\":1}],89:[function(require,module,exports){\n(function (process){\nvar _ = require('./index')\nvar config = require('../config')\nvar transition = require('../transition')\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nexports.query = function (el) {\n  if (typeof el === 'string') {\n    var selector = el\n    el = document.querySelector(el)\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'Cannot find element: ' + selector\n      )\n    }\n  }\n  return el\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nexports.inDoc = function (node) {\n  var doc = document.documentElement\n  var parent = node && node.parentNode\n  return doc === node ||\n    doc === parent ||\n    !!(parent && parent.nodeType === 1 && (doc.contains(parent)))\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} attr\n */\n\nexports.attr = function (node, attr) {\n  var val = node.getAttribute(attr)\n  if (val !== null) {\n    node.removeAttribute(attr)\n  }\n  return val\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nexports.getBindAttr = function (node, name) {\n  var val = exports.attr(node, ':' + name)\n  if (val === null) {\n    val = exports.attr(node, 'v-bind:' + name)\n  }\n  return val\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nexports.before = function (el, target) {\n  target.parentNode.insertBefore(el, target)\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nexports.after = function (el, target) {\n  if (target.nextSibling) {\n    exports.before(el, target.nextSibling)\n  } else {\n    target.parentNode.appendChild(el)\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nexports.remove = function (el) {\n  el.parentNode.removeChild(el)\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nexports.prepend = function (el, target) {\n  if (target.firstChild) {\n    exports.before(el, target.firstChild)\n  } else {\n    target.appendChild(el)\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nexports.replace = function (target, el) {\n  var parent = target.parentNode\n  if (parent) {\n    parent.replaceChild(el, target)\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nexports.on = function (el, event, cb) {\n  el.addEventListener(event, cb)\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nexports.off = function (el, event, cb) {\n  el.removeEventListener(event, cb)\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {Strong} cls\n */\n\nexports.addClass = function (el, cls) {\n  if (el.classList) {\n    el.classList.add(cls)\n  } else {\n    var cur = ' ' + (el.getAttribute('class') || '') + ' '\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim())\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {Strong} cls\n */\n\nexports.removeClass = function (el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls)\n  } else {\n    var cur = ' ' + (el.getAttribute('class') || '') + ' '\n    var tar = ' ' + cls + ' '\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ')\n    }\n    el.setAttribute('class', cur.trim())\n  }\n  if (!el.className) {\n    el.removeAttribute('class')\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element}\n */\n\nexports.extractContent = function (el, asFragment) {\n  var child\n  var rawContent\n  /* istanbul ignore if */\n  if (\n    exports.isTemplate(el) &&\n    el.content instanceof DocumentFragment\n  ) {\n    el = el.content\n  }\n  if (el.hasChildNodes()) {\n    exports.trimNode(el)\n    rawContent = asFragment\n      ? document.createDocumentFragment()\n      : document.createElement('div')\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n    /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child)\n    }\n  }\n  return rawContent\n}\n\n/**\n * Trim possible empty head/tail textNodes inside a parent.\n *\n * @param {Node} node\n */\n\nexports.trimNode = function (node) {\n  trim(node, node.firstChild)\n  trim(node, node.lastChild)\n}\n\nfunction trim (parent, node) {\n  if (node && node.nodeType === 3 && !node.data.trim()) {\n    parent.removeChild(node)\n  }\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nexports.isTemplate = function (el) {\n  return el.tagName &&\n    el.tagName.toLowerCase() === 'template'\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nexports.createAnchor = function (content, persist) {\n  return config.debug\n    ? document.createComment(content)\n    : document.createTextNode(persist ? ' ' : '')\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/\nexports.findRef = function (node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name\n      if (refRE.test(name)) {\n        node.removeAttribute(name)\n        return _.camelize(name.replace(refRE, ''))\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nexports.mapNodeRange = function (node, end, op) {\n  var next\n  while (node !== end) {\n    next = node.nextSibling\n    op(node)\n    node = next\n  }\n  op(end)\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nexports.removeNodeRange = function (start, end, vm, frag, cb) {\n  var done = false\n  var removed = 0\n  var nodes = []\n  exports.mapNodeRange(start, end, function (node) {\n    if (node === end) done = true\n    nodes.push(node)\n    transition.remove(node, vm, onRemoved)\n  })\n  function onRemoved () {\n    removed++\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i])\n      }\n      cb && cb()\n    }\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"../config\":40,\"../transition\":84,\"./index\":91,\"_process\":1}],90:[function(require,module,exports){\n// can we use __proto__?\nexports.hasProto = '__proto__' in {}\n\n// Browser environment sniffing\nvar inBrowser = exports.inBrowser =\n  typeof window !== 'undefined' &&\n  Object.prototype.toString.call(window) !== '[object Object]'\n\nexports.isIE9 =\n  inBrowser &&\n  navigator.userAgent.toLowerCase().indexOf('msie 9.0') > 0\n\nexports.isAndroid =\n  inBrowser &&\n  navigator.userAgent.toLowerCase().indexOf('android') > 0\n\n// Transition property/event sniffing\nif (inBrowser && !exports.isIE9) {\n  var isWebkitTrans =\n    window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  var isWebkitAnim =\n    window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  exports.transitionProp = isWebkitTrans\n    ? 'WebkitTransition'\n    : 'transition'\n  exports.transitionEndEvent = isWebkitTrans\n    ? 'webkitTransitionEnd'\n    : 'transitionend'\n  exports.animationProp = isWebkitAnim\n    ? 'WebkitAnimation'\n    : 'animation'\n  exports.animationEndEvent = isWebkitAnim\n    ? 'webkitAnimationEnd'\n    : 'animationend'\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nexports.nextTick = (function () {\n  var callbacks = []\n  var pending = false\n  var timerFunc\n  function nextTickHandler () {\n    pending = false\n    var copies = callbacks.slice(0)\n    callbacks = []\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]()\n    }\n  }\n  /* istanbul ignore if */\n  if (typeof MutationObserver !== 'undefined') {\n    var counter = 1\n    var observer = new MutationObserver(nextTickHandler)\n    var textNode = document.createTextNode(counter)\n    observer.observe(textNode, {\n      characterData: true\n    })\n    timerFunc = function () {\n      counter = (counter + 1) % 2\n      textNode.data = counter\n    }\n  } else {\n    timerFunc = setTimeout\n  }\n  return function (cb, ctx) {\n    var func = ctx\n      ? function () { cb.call(ctx) }\n      : cb\n    callbacks.push(func)\n    if (pending) return\n    pending = true\n    timerFunc(nextTickHandler, 0)\n  }\n})()\n\n},{}],91:[function(require,module,exports){\nvar lang = require('./lang')\nvar extend = lang.extend\n\nextend(exports, lang)\nextend(exports, require('./env'))\nextend(exports, require('./dom'))\nextend(exports, require('./options'))\nextend(exports, require('./component'))\nextend(exports, require('./debug'))\n\n},{\"./component\":87,\"./debug\":88,\"./dom\":89,\"./env\":90,\"./lang\":92,\"./options\":93}],92:[function(require,module,exports){\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @public\n */\n\nexports.set = function set (obj, key, val) {\n  if (obj.hasOwnProperty(key)) {\n    obj[key] = val\n    return\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val)\n    return\n  }\n  var ob = obj.__ob__\n  if (!ob) {\n    obj[key] = val\n    return\n  }\n  ob.convert(key, val)\n  ob.dep.notify()\n  if (ob.vms) {\n    var i = ob.vms.length\n    while (i--) {\n      var vm = ob.vms[i]\n      vm._proxy(key)\n      vm._digest()\n    }\n  }\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nexports.delete = function (obj, key) {\n  if (!obj.hasOwnProperty(key)) {\n    return\n  }\n  delete obj[key]\n  var ob = obj.__ob__\n  if (!ob) {\n    return\n  }\n  ob.dep.notify()\n  if (ob.vms) {\n    var i = ob.vms.length\n    while (i--) {\n      var vm = ob.vms[i]\n      vm._unproxy(key)\n      vm._digest()\n    }\n  }\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/\nexports.isLiteral = function (exp) {\n  return literalValueRE.test(exp)\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nexports.isReserved = function (str) {\n  var c = (str + '').charCodeAt(0)\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nexports.toString = function (value) {\n  return value == null\n    ? ''\n    : value.toString()\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nexports.toNumber = function (value) {\n  if (typeof value !== 'string') {\n    return value\n  } else {\n    var parsed = Number(value)\n    return isNaN(parsed)\n      ? value\n      : parsed\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nexports.toBoolean = function (value) {\n  return value === 'true'\n    ? true\n    : value === 'false'\n      ? false\n      : value\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nexports.stripQuotes = function (str) {\n  var a = str.charCodeAt(0)\n  var b = str.charCodeAt(str.length - 1)\n  return a === b && (a === 0x22 || a === 0x27)\n    ? str.slice(1, -1)\n    : str\n}\n\n/**\n * Camelize a hyphen-delmited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g\nexports.camelize = function (str) {\n  return str.replace(camelizeRE, toUpper)\n}\n\nfunction toUpper (_, c) {\n  return c ? c.toUpperCase() : ''\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([a-z\\d])([A-Z])/g\nexports.hyphenate = function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g\nexports.classify = function (str) {\n  return str.replace(classifyRE, toUpper)\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nexports.bind = function (fn, ctx) {\n  return function (a) {\n    var l = arguments.length\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nexports.toArray = function (list, start) {\n  start = start || 0\n  var i = list.length - start\n  var ret = new Array(i)\n  while (i--) {\n    ret[i] = list[i + start]\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nexports.extend = function (to, from) {\n  var keys = Object.keys(from)\n  var i = keys.length\n  while (i--) {\n    to[keys[i]] = from[keys[i]]\n  }\n  return to\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nexports.isObject = function (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString\nvar OBJECT_STRING = '[object Object]'\nexports.isPlainObject = function (obj) {\n  return toString.call(obj) === OBJECT_STRING\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nexports.isArray = Array.isArray\n\n/**\n * Define a non-enumerable property\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nexports.define = function (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  })\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nexports.debounce = function (func, wait) {\n  var timeout, args, context, timestamp, result\n  var later = function () {\n    var last = Date.now() - timestamp\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last)\n    } else {\n      timeout = null\n      result = func.apply(context, args)\n      if (!timeout) context = args = null\n    }\n  }\n  return function () {\n    context = this\n    args = arguments\n    timestamp = Date.now()\n    if (!timeout) {\n      timeout = setTimeout(later, wait)\n    }\n    return result\n  }\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nexports.indexOf = function (arr, obj) {\n  var i = arr.length\n  while (i--) {\n    if (arr[i] === obj) return i\n  }\n  return -1\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nexports.cancellable = function (fn) {\n  var cb = function () {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments)\n    }\n  }\n  cb.cancel = function () {\n    cb.cancelled = true\n  }\n  return cb\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nexports.looseEqual = function (a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (\n    exports.isObject(a) && exports.isObject(b)\n      ? JSON.stringify(a) === JSON.stringify(b)\n      : false\n  )\n  /* eslint-enable eqeqeq */\n}\n\n},{}],93:[function(require,module,exports){\n(function (process){\nvar _ = require('./index')\nvar config = require('../config')\nvar extend = _.extend\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null)\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData (to, from) {\n  var key, toVal, fromVal\n  for (key in from) {\n    toVal = to[key]\n    fromVal = from[key]\n    if (!to.hasOwnProperty(key)) {\n      _.set(to, key, fromVal)\n    } else if (_.isObject(toVal) && _.isObject(fromVal)) {\n      mergeData(toVal, fromVal)\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && _.warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.'\n      )\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && _.warn(\n      'The \"el\" option should be a function ' +\n      'that returns a per-instance value in component ' +\n      'definitions.'\n    )\n    return\n  }\n  var ret = childVal || parentVal\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function'\n    ? ret.call(vm)\n    : ret\n}\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init =\nstrats.created =\nstrats.ready =\nstrats.attached =\nstrats.detached =\nstrats.beforeCompile =\nstrats.compiled =\nstrats.beforeDestroy =\nstrats.destroyed = function (parentVal, childVal) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : _.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\n/**\n * 0.11 deprecation warning\n */\n\nstrats.paramAttributes = function () {\n  /* istanbul ignore next */\n  process.env.NODE_ENV !== 'production' && _.warn(\n    '\"paramAttributes\" option has been deprecated in 0.12. ' +\n    'Use \"props\" instead.'\n  )\n}\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal)\n  return childVal\n    ? extend(res, guardArrayAssets(childVal))\n    : res\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets\n})\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch =\nstrats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal\n  if (!parentVal) return childVal\n  var ret = {}\n  extend(ret, parentVal)\n  for (var key in childVal) {\n    var parent = ret[key]\n    var child = childVal[key]\n    if (parent && !_.isArray(parent)) {\n      parent = [parent]\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child]\n  }\n  return ret\n}\n\n/**\n * Other object hashes.\n */\n\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal\n  if (!parentVal) return childVal\n  var ret = Object.create(null)\n  extend(ret, parentVal)\n  extend(ret, childVal)\n  return ret\n}\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n}\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents (options) {\n  if (options.components) {\n    var components = options.components =\n      guardArrayAssets(options.components)\n    var def\n    var ids = Object.keys(components)\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i]\n      if (_.commonTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && _.warn(\n          'Do not use built-in HTML elements as component ' +\n          'id: ' + key\n        )\n        continue\n      }\n      def = components[key]\n      if (_.isPlainObject(def)) {\n        components[key] = _.Vue.extend(def)\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps (options) {\n  var props = options.props\n  var i\n  if (_.isArray(props)) {\n    options.props = {}\n    i = props.length\n    while (i--) {\n      options.props[props[i]] = null\n    }\n  } else if (_.isPlainObject(props)) {\n    var keys = Object.keys(props)\n    i = keys.length\n    while (i--) {\n      var val = props[keys[i]]\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val }\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets (assets) {\n  if (_.isArray(assets)) {\n    var res = {}\n    var i = assets.length\n    var asset\n    while (i--) {\n      asset = assets[i]\n      var id = typeof asset === 'function'\n        ? ((asset.options && asset.options.name) || asset.id)\n        : (asset.name || asset.id)\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && _.warn(\n          'Array-syntax assets must provide a \"name\" or \"id\" field.'\n        )\n      } else {\n        res[id] = asset\n      }\n    }\n    return res\n  }\n  return assets\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nexports.mergeOptions = function merge (parent, child, vm) {\n  guardComponents(child)\n  guardProps(child)\n  var options = {}\n  var key\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = merge(parent, child.mixins[i], vm)\n    }\n  }\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!(parent.hasOwnProperty(key))) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @return {Object|Function}\n */\n\nexports.resolveAsset = function resolve (options, type, id) {\n  var assets = options[type]\n  var camelizedId\n  return assets[id] ||\n    // camelCase ID\n    assets[camelizedId = _.camelize(id)] ||\n    // Pascal Case ID\n    assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)]\n}\n\n}).call(this,require('_process'))\n\n},{\"../config\":40,\"./index\":91,\"_process\":1}],94:[function(require,module,exports){\n(function (process){\nvar _ = require('./util')\nvar extend = _.extend\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefiexed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue (options) {\n  this._init(options)\n}\n\n/**\n * Mixin global API\n */\n\nextend(Vue, require('./api/global'))\n\n/**\n * Vue and every constructor that extends Vue has an\n * associated options object, which can be accessed during\n * compilation steps as `this.constructor.options`.\n *\n * These can be seen as the default options of every\n * Vue instance.\n */\n\nVue.options = {\n  replace: true,\n  directives: require('./directives/public'),\n  elementDirectives: require('./directives/element'),\n  filters: require('./filters'),\n  transitions: {},\n  components: {},\n  partials: {}\n}\n\n/**\n * Build up the prototype\n */\n\nvar p = Vue.prototype\n\n/**\n * $data has a setter which does a bunch of\n * teardown/setup work\n */\n\nObject.defineProperty(p, '$data', {\n  get: function () {\n    return this._data\n  },\n  set: function (newData) {\n    if (newData !== this._data) {\n      this._setData(newData)\n    }\n  }\n})\n\n/**\n * Mixin internal instance methods\n */\n\nextend(p, require('./instance/init'))\nextend(p, require('./instance/events'))\nextend(p, require('./instance/state'))\nextend(p, require('./instance/lifecycle'))\nextend(p, require('./instance/misc'))\n\n/**\n * Mixin public API methods\n */\n\nextend(p, require('./api/data'))\nextend(p, require('./api/dom'))\nextend(p, require('./api/events'))\nextend(p, require('./api/lifecycle'))\n\nVue.version = '1.0.4'\nmodule.exports = _.Vue = Vue\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV !== 'production') {\n  if (_.inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n    window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('init', Vue)\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"./api/data\":29,\"./api/dom\":30,\"./api/events\":31,\"./api/global\":32,\"./api/lifecycle\":33,\"./directives/element\":42,\"./directives/public\":57,\"./filters\":68,\"./instance/events\":71,\"./instance/init\":72,\"./instance/lifecycle\":73,\"./instance/misc\":74,\"./instance/state\":75,\"./util\":91,\"_process\":1}],95:[function(require,module,exports){\n(function (process){\nvar _ = require('./util')\nvar config = require('./config')\nvar Dep = require('./observer/dep')\nvar expParser = require('./parsers/expression')\nvar batcher = require('./batcher')\nvar uid = 0\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String} expression\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\n\nfunction Watcher (vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    _.extend(this, options)\n  }\n  var isFn = typeof expOrFn === 'function'\n  this.vm = vm\n  vm._watchers.push(this)\n  this.expression = isFn ? expOrFn.toString() : expOrFn\n  this.cb = cb\n  this.id = ++uid // uid for batching\n  this.active = true\n  this.dirty = this.lazy // for lazy watchers\n  this.deps = Object.create(null)\n  this.newDeps = null\n  this.prevError = null // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn\n    this.setter = undefined\n  } else {\n    var res = expParser.parse(expOrFn, this.twoWay)\n    this.getter = res.get\n    this.setter = res.set\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get()\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false\n}\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id\n  if (!this.newDeps[id]) {\n    this.newDeps[id] = dep\n    if (!this.deps[id]) {\n      this.deps[id] = dep\n      dep.addSub(this)\n    }\n  }\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet()\n  var scope = this.scope || this.vm\n  var value\n  try {\n    value = this.getter.call(scope, scope)\n  } catch (e) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      config.warnExpressionErrors\n    ) {\n      _.warn(\n        'Error when evaluating expression \"' +\n        this.expression + '\". ' +\n        (config.debug\n          ? ''\n          : 'Turn on debug mode to see stack trace.'\n        ), e\n      )\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value)\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value)\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false)\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value)\n  }\n  this.afterGet()\n  return value\n}\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm\n  if (this.filters) {\n    value = scope._applyFilters(\n      value, this.value, this.filters, true)\n  }\n  try {\n    this.setter.call(scope, scope, value)\n  } catch (e) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      config.warnExpressionErrors\n    ) {\n      _.warn(\n        'Error when evaluating setter \"' +\n        this.expression + '\"', e\n      )\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      forContext &&\n      forContext.filters &&\n      (new RegExp(forContext.alias + '\\\\b')).test(this.expression)\n    ) {\n      _.warn(\n        'It seems you are using two-way binding on ' +\n        'a v-for alias (' + this.expression + '), and the ' +\n        'v-for has filters. This will not work properly. ' +\n        'Either remove the filters or use an array of ' +\n        'objects and bind to object properties instead.'\n      )\n    }\n  }\n  if (\n    forContext &&\n    forContext.alias === this.expression &&\n    !forContext.filters\n  ) {\n    if (scope.$key) { // original is an object\n      forContext.rawValue[scope.$key] = value\n    } else {\n      forContext.rawValue.$set(scope.$index, value)\n    }\n  }\n}\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this\n  this.newDeps = Object.create(null)\n}\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null\n  var ids = Object.keys(this.deps)\n  var i = ids.length\n  while (i--) {\n    var id = ids[i]\n    if (!this.newDeps[id]) {\n      this.deps[id].removeSub(this)\n    }\n  }\n  this.deps = this.newDeps\n}\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true\n  } else if (this.sync || !config.async) {\n    this.run()\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued\n      ? shallow\n        ? this.shallow\n        : false\n      : !!shallow\n    this.queued = true\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace')\n    }\n    batcher.push(this)\n  }\n}\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get()\n    if (\n      value !== this.value ||\n      // Deep watchers and Array watchers should fire even\n      // when the value is the same, because the value may\n      // have mutated; but only do so if this is a\n      // non-shallow update (caused by a vm digest).\n      ((_.isArray(value) || this.deep) && !this.shallow)\n    ) {\n      // set new value\n      var oldValue = this.value\n      this.value = value\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' &&\n          config.debug && prevError) {\n        this.prevError = null\n        try {\n          this.cb.call(this.vm, value, oldValue)\n        } catch (e) {\n          _.nextTick(function () {\n            throw prevError\n          }, 0)\n          throw e\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue)\n      }\n    }\n    this.queued = this.shallow = false\n  }\n}\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target\n  this.value = this.get()\n  this.dirty = false\n  Dep.target = current\n}\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var depIds = Object.keys(this.deps)\n  var i = depIds.length\n  while (i--) {\n    this.deps[depIds[i]].depend()\n  }\n}\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // we can skip this if the vm if being destroyed\n    // which can improve teardown performance.\n    if (!this.vm._isBeingDestroyed) {\n      this.vm._watchers.$remove(this)\n    }\n    var depIds = Object.keys(this.deps)\n    var i = depIds.length\n    while (i--) {\n      this.deps[depIds[i]].removeSub(this)\n    }\n    this.active = false\n    this.vm = this.cb = this.value = null\n  }\n}\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nfunction traverse (val) {\n  var i, keys\n  if (_.isArray(val)) {\n    i = val.length\n    while (i--) traverse(val[i])\n  } else if (_.isObject(val)) {\n    keys = Object.keys(val)\n    i = keys.length\n    while (i--) traverse(val[keys[i]])\n  }\n}\n\nmodule.exports = Watcher\n\n}).call(this,require('_process'))\n\n},{\"./batcher\":34,\"./config\":40,\"./observer/dep\":77,\"./parsers/expression\":80,\"./util\":91,\"_process\":1}],96:[function(require,module,exports){\nvar inserted = exports.cache = {}\n\nexports.insert = function (css) {\n  if (inserted[css]) return\n  inserted[css] = true\n\n  var elem = document.createElement('style')\n  elem.setAttribute('type', 'text/css')\n\n  if ('textContent' in elem) {\n    elem.textContent = css\n  } else {\n    elem.styleSheet.cssText = css\n  }\n\n  document.getElementsByTagName('head')[0].appendChild(elem)\n  return elem\n}\n\n},{}],97:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar makePromise = require('./makePromise');\n\tvar Scheduler = require('./Scheduler');\n\tvar async = require('./env').asap;\n\n\treturn makePromise({\n\t\tscheduler: new Scheduler(async)\n\t});\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n},{\"./Scheduler\":98,\"./env\":110,\"./makePromise\":112}],98:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t// Credit to Twisol (https://github.com/Twisol) for suggesting\n\t// this type of extensible queue + trampoline approach for next-tick conflation.\n\n\t/**\n\t * Async task scheduler\n\t * @param {function} async function to schedule a single async function\n\t * @constructor\n\t */\n\tfunction Scheduler(async) {\n\t\tthis._async = async;\n\t\tthis._running = false;\n\n\t\tthis._queue = this;\n\t\tthis._queueLen = 0;\n\t\tthis._afterQueue = {};\n\t\tthis._afterQueueLen = 0;\n\n\t\tvar self = this;\n\t\tthis.drain = function() {\n\t\t\tself._drain();\n\t\t};\n\t}\n\n\t/**\n\t * Enqueue a task\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.enqueue = function(task) {\n\t\tthis._queue[this._queueLen++] = task;\n\t\tthis.run();\n\t};\n\n\t/**\n\t * Enqueue a task to run after the main task queue\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.afterQueue = function(task) {\n\t\tthis._afterQueue[this._afterQueueLen++] = task;\n\t\tthis.run();\n\t};\n\n\tScheduler.prototype.run = function() {\n\t\tif (!this._running) {\n\t\t\tthis._running = true;\n\t\t\tthis._async(this.drain);\n\t\t}\n\t};\n\n\t/**\n\t * Drain the handler queue entirely, and then the after queue\n\t */\n\tScheduler.prototype._drain = function() {\n\t\tvar i = 0;\n\t\tfor (; i < this._queueLen; ++i) {\n\t\t\tthis._queue[i].run();\n\t\t\tthis._queue[i] = void 0;\n\t\t}\n\n\t\tthis._queueLen = 0;\n\t\tthis._running = false;\n\n\t\tfor (i = 0; i < this._afterQueueLen; ++i) {\n\t\t\tthis._afterQueue[i].run();\n\t\t\tthis._afterQueue[i] = void 0;\n\t\t}\n\n\t\tthis._afterQueueLen = 0;\n\t};\n\n\treturn Scheduler;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],99:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t/**\n\t * Custom error type for promises rejected by promise.timeout\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction TimeoutError (message) {\n\t\tError.call(this);\n\t\tthis.message = message;\n\t\tthis.name = TimeoutError.name;\n\t\tif (typeof Error.captureStackTrace === 'function') {\n\t\t\tError.captureStackTrace(this, TimeoutError);\n\t\t}\n\t}\n\n\tTimeoutError.prototype = Object.create(Error.prototype);\n\tTimeoutError.prototype.constructor = TimeoutError;\n\n\treturn TimeoutError;\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n},{}],100:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\tmakeApply.tryCatchResolve = tryCatchResolve;\n\n\treturn makeApply;\n\n\tfunction makeApply(Promise, call) {\n\t\tif(arguments.length < 2) {\n\t\t\tcall = tryCatchResolve;\n\t\t}\n\n\t\treturn apply;\n\n\t\tfunction apply(f, thisArg, args) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar l = args.length;\n\t\t\tvar params = new Array(l);\n\t\t\tcallAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);\n\n\t\t\treturn p;\n\t\t}\n\n\t\tfunction callAndResolve(c, h) {\n\t\t\tif(c.i < 0) {\n\t\t\t\treturn call(c.f, c.thisArg, c.params, h);\n\t\t\t}\n\n\t\t\tvar handler = Promise._handler(c.args[c.i]);\n\t\t\thandler.fold(callAndResolveNext, c, void 0, h);\n\t\t}\n\n\t\tfunction callAndResolveNext(c, x, h) {\n\t\t\tc.params[c.i] = x;\n\t\t\tc.i -= 1;\n\t\t\tcallAndResolve(c, h);\n\t\t}\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tresolver.resolve(f.apply(thisArg, args));\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n\n},{}],101:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar state = require('../state');\n\tvar applier = require('../apply');\n\n\treturn function array(Promise) {\n\n\t\tvar applyFold = applier(Promise);\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\tvar ar = Array.prototype.reduce;\n\t\tvar arr = Array.prototype.reduceRight;\n\t\tvar slice = Array.prototype.slice;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.filter = filter;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param {function} onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(this, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\t\t\tvar l = promises.length>>>0;\n\n\t\t\tvar pending = l;\n\t\t\tvar errors = [];\n\n\t\t\tfor (var h, x, i = 0; i < l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = Promise._handler(x);\n\t\t\t\tif(h.state() > 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tPromise._visitRemaining(promises, i, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, handleFulfill, handleReject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.reject(new RangeError('any(): array must not be empty'));\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction handleFulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\terrors = null;\n\t\t\t\tthis.resolve(x); // this === resolver\n\t\t\t}\n\n\t\t\tfunction handleReject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t *\n\t\t * @deprecated\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\t/*jshint maxcomplexity:7*/\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\n\t\t\tvar results = [];\n\t\t\tvar errors = [];\n\n\t\t\tvar l = promises.length>>>0;\n\t\t\tvar nFulfill = 0;\n\t\t\tvar nReject;\n\t\t\tvar x, i; // reused in both for() loops\n\n\t\t\t// First pass: count actual array items\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++nFulfill;\n\t\t\t}\n\n\t\t\t// Compute actual goals\n\t\t\tn = Math.max(n, 0);\n\t\t\tnReject = (nFulfill - n + 1);\n\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\tif(n > nFulfill) {\n\t\t\t\tresolver.reject(new RangeError('some(): array must contain at least '\n\t\t\t\t+ n + ' item(s), but had ' + nFulfill));\n\t\t\t} else if(nFulfill === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\n\t\t\t// Second pass: observe each array item, make progress toward goals\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tPromise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction fulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresults.push(x);\n\t\t\t\tif(--nFulfill === 0) {\n\t\t\t\t\terrors = null;\n\t\t\t\t\tthis.resolve(results);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--nReject === 0) {\n\t\t\t\t\tresults = null;\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function(x:*, index:Number):*} f mapping function\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f) {\n\t\t\treturn Promise._traverse(f, promises);\n\t\t}\n\n\t\t/**\n\t\t * Filter the provided array of promises using the provided predicate.  Input may\n\t\t * contain promises and values\n\t\t * @param {Array} promises array of promises and values\n\t\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t\t *  Must return truthy (or promise for truthy) for items to retain.\n\t\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t\t *  for which predicate returned truthy.\n\t\t */\n\t\tfunction filter(promises, predicate) {\n\t\t\tvar a = slice.call(promises);\n\t\t\treturn Promise._traverse(predicate, a).then(function(keep) {\n\t\t\t\treturn filterSync(a, keep);\n\t\t\t});\n\t\t}\n\n\t\tfunction filterSync(promises, keep) {\n\t\t\t// Safe because we know all promises have fulfilled if we've made it this far\n\t\t\tvar l = keep.length;\n\t\t\tvar filtered = new Array(l);\n\t\t\tfor(var i=0, j=0; i<l; ++i) {\n\t\t\t\tif(keep[i]) {\n\t\t\t\t\tfiltered[j++] = Promise._handler(promises[i]).value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiltered.length = j;\n\t\t\treturn filtered;\n\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {Array} promises\n\t\t * @returns {Promise} promise for array of settled state descriptors\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(promises.map(settleOne));\n\t\t}\n\n\t\tfunction settleOne(p) {\n\t\t\tvar h = Promise._handler(p);\n\t\t\tif(h.state() === 0) {\n\t\t\t\treturn toPromise(p).then(state.fulfilled, state.rejected);\n\t\t\t}\n\n\t\t\th._unreport();\n\t\t\treturn state.inspect(h);\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduce(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: ar.call(promises, liftCombine(f));\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduceRight(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: arr.call(promises, liftCombine(f));\n\t\t}\n\n\t\tfunction liftCombine(f) {\n\t\t\treturn function(z, x, i) {\n\t\t\t\treturn applyFold(f, void 0, [z,x,i]);\n\t\t\t};\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../apply\":100,\"../state\":113}],102:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function flow(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\t\tvar reject = Promise.reject;\n\t\tvar origCatch = Promise.prototype['catch'];\n\n\t\t/**\n\t\t * Handle the ultimate fulfillment value or rejection reason, and assume\n\t\t * responsibility for all errors.  If an error propagates out of result\n\t\t * or handleFatalError, it will be rethrown to the host, resulting in a\n\t\t * loud stack track on most platforms and a crash on some.\n\t\t * @param {function?} onResult\n\t\t * @param {function?} onError\n\t\t * @returns {undefined}\n\t\t */\n\t\tPromise.prototype.done = function(onResult, onError) {\n\t\t\tthis._handler.visit(this._handler.receiver, onResult, onError);\n\t\t};\n\n\t\t/**\n\t\t * Add Error-type and predicate matching to catch.  Examples:\n\t\t * promise.catch(TypeError, handleTypeError)\n\t\t *   .catch(predicate, handleMatchedErrors)\n\t\t *   .catch(handleRemainingErrors)\n\t\t * @param onRejected\n\t\t * @returns {*}\n\t\t */\n\t\tPromise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {\n\t\t\tif (arguments.length < 2) {\n\t\t\t\treturn origCatch.call(this, onRejected);\n\t\t\t}\n\n\t\t\tif(typeof onRejected !== 'function') {\n\t\t\t\treturn this.ensure(rejectInvalidPredicate);\n\t\t\t}\n\n\t\t\treturn origCatch.call(this, createCatchFilter(arguments[1], onRejected));\n\t\t};\n\n\t\t/**\n\t\t * Wraps the provided catch handler, so that it will only be called\n\t\t * if the predicate evaluates truthy\n\t\t * @param {?function} handler\n\t\t * @param {function} predicate\n\t\t * @returns {function} conditional catch handler\n\t\t */\n\t\tfunction createCatchFilter(handler, predicate) {\n\t\t\treturn function(e) {\n\t\t\t\treturn evaluatePredicate(e, predicate)\n\t\t\t\t\t? handler.call(this, e)\n\t\t\t\t\t: reject(e);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Ensures that onFulfilledOrRejected will be called regardless of whether\n\t\t * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT\n\t\t * receive the promises' value or reason.  Any returned value will be disregarded.\n\t\t * onFulfilledOrRejected may throw or return a rejected promise to signal\n\t\t * an additional error.\n\t\t * @param {function} handler handler to be called regardless of\n\t\t *  fulfillment or rejection\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['finally'] = Promise.prototype.ensure = function(handler) {\n\t\t\tif(typeof handler !== 'function') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.then(function(x) {\n\t\t\t\treturn runSideEffect(handler, this, identity, x);\n\t\t\t}, function(e) {\n\t\t\t\treturn runSideEffect(handler, this, reject, e);\n\t\t\t});\n\t\t};\n\n\t\tfunction runSideEffect (handler, thisArg, propagate, value) {\n\t\t\tvar result = handler.call(thisArg);\n\t\t\treturn maybeThenable(result)\n\t\t\t\t? propagateValue(result, propagate, value)\n\t\t\t\t: propagate(value);\n\t\t}\n\n\t\tfunction propagateValue (result, propagate, x) {\n\t\t\treturn resolve(result).then(function () {\n\t\t\t\treturn propagate(x);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Recover from a failure by returning a defaultValue.  If defaultValue\n\t\t * is a promise, it's fulfillment value will be used.  If defaultValue is\n\t\t * a promise that rejects, the returned promise will reject with the\n\t\t * same reason.\n\t\t * @param {*} defaultValue\n\t\t * @returns {Promise} new promise\n\t\t */\n\t\tPromise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {\n\t\t\treturn this.then(void 0, function() {\n\t\t\t\treturn defaultValue;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Shortcut for .then(function() { return value; })\n\t\t * @param  {*} value\n\t\t * @return {Promise} a promise that:\n\t\t *  - is fulfilled if value is not a promise, or\n\t\t *  - if value is a promise, will fulfill with its value, or reject\n\t\t *    with its reason.\n\t\t */\n\t\tPromise.prototype['yield'] = function(value) {\n\t\t\treturn this.then(function() {\n\t\t\t\treturn value;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Runs a side effect when this promise fulfills, without changing the\n\t\t * fulfillment value.\n\t\t * @param {function} onFulfilledSideEffect\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.tap = function(onFulfilledSideEffect) {\n\t\t\treturn this.then(onFulfilledSideEffect)['yield'](this);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n\tfunction rejectInvalidPredicate() {\n\t\tthrow new TypeError('catch predicate must be a function');\n\t}\n\n\tfunction evaluatePredicate(e, predicate) {\n\t\treturn isError(predicate) ? e instanceof predicate : predicate(e);\n\t}\n\n\tfunction isError(predicate) {\n\t\treturn predicate === Error\n\t\t\t|| (predicate != null && predicate.prototype instanceof Error);\n\t}\n\n\tfunction maybeThenable(x) {\n\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t}\n\n\tfunction identity(x) {\n\t\treturn x;\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],103:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n/** @author Jeff Escalante */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function fold(Promise) {\n\n\t\tPromise.prototype.fold = function(f, z) {\n\t\t\tvar promise = this._beget();\n\n\t\t\tthis._handler.fold(function(z, x, to) {\n\t\t\t\tPromise._handler(z).fold(function(x, z, to) {\n\t\t\t\t\tto.resolve(f.call(this, z, x));\n\t\t\t\t}, x, this, to);\n\t\t\t}, z, promise._handler.receiver, promise._handler);\n\n\t\t\treturn promise;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],104:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar inspect = require('../state').inspect;\n\n\treturn function inspection(Promise) {\n\n\t\tPromise.prototype.inspect = function() {\n\t\t\treturn inspect(Promise._handler(this));\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../state\":113}],105:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function generate(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\n\t\tPromise.iterate = iterate;\n\t\tPromise.unfold = unfold;\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.iterate\n\t\t * Generate a (potentially infinite) stream of promised values:\n\t\t * x, f(x), f(f(x)), etc. until condition(x) returns true\n\t\t * @param {function} f function to generate a new x from the previous x\n\t\t * @param {function} condition function that, given the current x, returns\n\t\t *  truthy when the iterate should stop\n\t\t * @param {function} handler function to handle the value produced by f\n\t\t * @param {*|Promise} x starting value, may be a promise\n\t\t * @return {Promise} the result of the last call to f before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction iterate(f, condition, handler, x) {\n\t\t\treturn unfold(function(x) {\n\t\t\t\treturn [x, f(x)];\n\t\t\t}, condition, handler, x);\n\t\t}\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.unfold\n\t\t * Generate a (potentially infinite) stream of promised values\n\t\t * by applying handler(generator(seed)) iteratively until\n\t\t * condition(seed) returns true.\n\t\t * @param {function} unspool function that generates a [value, newSeed]\n\t\t *  given a seed.\n\t\t * @param {function} condition function that, given the current seed, returns\n\t\t *  truthy when the unfold should stop\n\t\t * @param {function} handler function to handle the value produced by unspool\n\t\t * @param x {*|Promise} starting value, may be a promise\n\t\t * @return {Promise} the result of the last value produced by unspool before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction unfold(unspool, condition, handler, x) {\n\t\t\treturn resolve(x).then(function(seed) {\n\t\t\t\treturn resolve(condition(seed)).then(function(done) {\n\t\t\t\t\treturn done ? seed : resolve(unspool(seed)).spread(next);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction next(item, newSeed) {\n\t\t\t\treturn resolve(handler(item)).then(function() {\n\t\t\t\t\treturn unfold(unspool, condition, handler, newSeed);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],106:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function progress(Promise) {\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Register a progress handler for this promise\n\t\t * @param {function} onProgress\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.progress = function(onProgress) {\n\t\t\treturn this.then(void 0, void 0, onProgress);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],107:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar env = require('../env');\n\tvar TimeoutError = require('../TimeoutError');\n\n\tfunction setTimeout(f, ms, x, y) {\n\t\treturn env.setTimer(function() {\n\t\t\tf(x, y, ms);\n\t\t}, ms);\n\t}\n\n\treturn function timed(Promise) {\n\t\t/**\n\t\t * Return a new promise whose fulfillment value is revealed only\n\t\t * after ms milliseconds\n\t\t * @param {number} ms milliseconds\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.delay = function(ms) {\n\t\t\tvar p = this._beget();\n\t\t\tthis._handler.fold(handleDelay, ms, void 0, p._handler);\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction handleDelay(ms, x, h) {\n\t\t\tsetTimeout(resolveDelay, ms, x, h);\n\t\t}\n\n\t\tfunction resolveDelay(x, h) {\n\t\t\th.resolve(x);\n\t\t}\n\n\t\t/**\n\t\t * Return a new promise that rejects after ms milliseconds unless\n\t\t * this promise fulfills earlier, in which case the returned promise\n\t\t * fulfills with the same value.\n\t\t * @param {number} ms milliseconds\n\t\t * @param {Error|*=} reason optional rejection reason to use, defaults\n\t\t *   to a TimeoutError if not provided\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.timeout = function(ms, reason) {\n\t\t\tvar p = this._beget();\n\t\t\tvar h = p._handler;\n\n\t\t\tvar t = setTimeout(onTimeout, ms, reason, p._handler);\n\n\t\t\tthis._handler.visit(h,\n\t\t\t\tfunction onFulfill(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.resolve(x); // this = h\n\t\t\t\t},\n\t\t\t\tfunction onReject(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.reject(x); // this = h\n\t\t\t\t},\n\t\t\t\th.notify);\n\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction onTimeout(reason, h, ms) {\n\t\t\tvar e = typeof reason === 'undefined'\n\t\t\t\t? new TimeoutError('timed out after ' + ms + 'ms')\n\t\t\t\t: reason;\n\t\t\th.reject(e);\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../TimeoutError\":99,\"../env\":110}],108:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar setTimer = require('../env').setTimer;\n\tvar format = require('../format');\n\n\treturn function unhandledRejection(Promise) {\n\n\t\tvar logError = noop;\n\t\tvar logInfo = noop;\n\t\tvar localConsole;\n\n\t\tif(typeof console !== 'undefined') {\n\t\t\t// Alias console to prevent things like uglify's drop_console option from\n\t\t\t// removing console.log/error. Unhandled rejections fall into the same\n\t\t\t// category as uncaught exceptions, and build tools shouldn't silence them.\n\t\t\tlocalConsole = console;\n\t\t\tlogError = typeof localConsole.error !== 'undefined'\n\t\t\t\t? function (e) { localConsole.error(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\n\t\t\tlogInfo = typeof localConsole.info !== 'undefined'\n\t\t\t\t? function (e) { localConsole.info(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\t\t}\n\n\t\tPromise.onPotentiallyUnhandledRejection = function(rejection) {\n\t\t\tenqueue(report, rejection);\n\t\t};\n\n\t\tPromise.onPotentiallyUnhandledRejectionHandled = function(rejection) {\n\t\t\tenqueue(unreport, rejection);\n\t\t};\n\n\t\tPromise.onFatalRejection = function(rejection) {\n\t\t\tenqueue(throwit, rejection.value);\n\t\t};\n\n\t\tvar tasks = [];\n\t\tvar reported = [];\n\t\tvar running = null;\n\n\t\tfunction report(r) {\n\t\t\tif(!r.handled) {\n\t\t\t\treported.push(r);\n\t\t\t\tlogError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction unreport(r) {\n\t\t\tvar i = reported.indexOf(r);\n\t\t\tif(i >= 0) {\n\t\t\t\treported.splice(i, 1);\n\t\t\t\tlogInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction enqueue(f, x) {\n\t\t\ttasks.push(f, x);\n\t\t\tif(running === null) {\n\t\t\t\trunning = setTimer(flush, 0);\n\t\t\t}\n\t\t}\n\n\t\tfunction flush() {\n\t\t\trunning = null;\n\t\t\twhile(tasks.length > 0) {\n\t\t\t\ttasks.shift()(tasks.shift());\n\t\t\t}\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n\tfunction throwit(e) {\n\t\tthrow e;\n\t}\n\n\tfunction noop() {}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../env\":110,\"../format\":111}],109:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function addWith(Promise) {\n\t\t/**\n\t\t * Returns a promise whose handlers will be called with `this` set to\n\t\t * the supplied receiver.  Subsequent promises derived from the\n\t\t * returned promise will also have their handlers called with receiver\n\t\t * as `this`. Calling `with` with undefined or no arguments will return\n\t\t * a promise whose handlers will again be called in the usual Promises/A+\n\t\t * way (no `this`) thus safely undoing any previous `with` in the\n\t\t * promise chain.\n\t\t *\n\t\t * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n\t\t * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n\t\t *\n\t\t * @param {object} receiver `this` value for all handlers attached to\n\t\t *  the returned promise.\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['with'] = Promise.prototype.withThis = function(receiver) {\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\t\t\tchild.receiver = receiver;\n\t\t\tthis._handler.chain(child, receiver);\n\t\t\treturn p;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n},{}],110:[function(require,module,exports){\n(function (process){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function(define) { 'use strict';\ndefine(function(require) {\n\t/*jshint maxcomplexity:6*/\n\n\t// Sniff \"best\" async scheduling option\n\t// Prefer process.nextTick or MutationObserver, then check for\n\t// setTimeout, and finally vertx, since its the only env that doesn't\n\t// have setTimeout\n\n\tvar MutationObs;\n\tvar capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;\n\n\t// Default env\n\tvar setTimer = function(f, ms) { return setTimeout(f, ms); };\n\tvar clearTimer = function(t) { return clearTimeout(t); };\n\tvar asap = function (f) { return capturedSetTimeout(f, 0); };\n\n\t// Detect specific env\n\tif (isNode()) { // Node\n\t\tasap = function (f) { return process.nextTick(f); };\n\n\t} else if (MutationObs = hasMutationObserver()) { // Modern browser\n\t\tasap = initMutationObserver(MutationObs);\n\n\t} else if (!capturedSetTimeout) { // vert.x\n\t\tvar vertxRequire = require;\n\t\tvar vertx = vertxRequire('vertx');\n\t\tsetTimer = function (f, ms) { return vertx.setTimer(ms, f); };\n\t\tclearTimer = vertx.cancelTimer;\n\t\tasap = vertx.runOnLoop || vertx.runOnContext;\n\t}\n\n\treturn {\n\t\tsetTimer: setTimer,\n\t\tclearTimer: clearTimer,\n\t\tasap: asap\n\t};\n\n\tfunction isNode () {\n\t\treturn typeof process !== 'undefined' &&\n\t\t\tObject.prototype.toString.call(process) === '[object process]';\n\t}\n\n\tfunction hasMutationObserver () {\n\t\treturn (typeof MutationObserver === 'function' && MutationObserver) ||\n\t\t\t(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);\n\t}\n\n\tfunction initMutationObserver(MutationObserver) {\n\t\tvar scheduled;\n\t\tvar node = document.createTextNode('');\n\t\tvar o = new MutationObserver(run);\n\t\to.observe(node, { characterData: true });\n\n\t\tfunction run() {\n\t\t\tvar f = scheduled;\n\t\t\tscheduled = void 0;\n\t\t\tf();\n\t\t}\n\n\t\tvar i = 0;\n\t\treturn function (f) {\n\t\t\tscheduled = f;\n\t\t\tnode.data = (i ^= 1);\n\t\t};\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],111:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tformatError: formatError,\n\t\tformatObject: formatObject,\n\t\ttryStringify: tryStringify\n\t};\n\n\t/**\n\t * Format an error into a string.  If e is an Error and has a stack property,\n\t * it's returned.  Otherwise, e is formatted using formatObject, with a\n\t * warning added about e not being a proper Error.\n\t * @param {*} e\n\t * @returns {String} formatted string, suitable for output to developers\n\t */\n\tfunction formatError(e) {\n\t\tvar s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);\n\t\treturn e instanceof Error ? s : s + ' (WARNING: non-Error used)';\n\t}\n\n\t/**\n\t * Format an object, detecting \"plain\" objects and running them through\n\t * JSON.stringify if possible.\n\t * @param {Object} o\n\t * @returns {string}\n\t */\n\tfunction formatObject(o) {\n\t\tvar s = String(o);\n\t\tif(s === '[object Object]' && typeof JSON !== 'undefined') {\n\t\t\ts = tryStringify(o, s);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Try to return the result of JSON.stringify(x).  If that fails, return\n\t * defaultValue\n\t * @param {*} x\n\t * @param {*} defaultValue\n\t * @returns {String|*} JSON.stringify(x) or defaultValue\n\t */\n\tfunction tryStringify(x, defaultValue) {\n\t\ttry {\n\t\t\treturn JSON.stringify(x);\n\t\t} catch(e) {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],112:[function(require,module,exports){\n(function (process){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function makePromise(environment) {\n\n\t\tvar tasks = environment.scheduler;\n\t\tvar emitRejection = initEmitRejection();\n\n\t\tvar objectCreate = Object.create ||\n\t\t\tfunction(proto) {\n\t\t\t\tfunction Child() {}\n\t\t\t\tChild.prototype = proto;\n\t\t\t\treturn new Child();\n\t\t\t};\n\n\t\t/**\n\t\t * Create a promise whose fate is determined by resolver\n\t\t * @constructor\n\t\t * @returns {Promise} promise\n\t\t * @name Promise\n\t\t */\n\t\tfunction Promise(resolver, handler) {\n\t\t\tthis._handler = resolver === Handler ? handler : init(resolver);\n\t\t}\n\n\t\t/**\n\t\t * Run the supplied resolver\n\t\t * @param resolver\n\t\t * @returns {Pending}\n\t\t */\n\t\tfunction init(resolver) {\n\t\t\tvar handler = new Pending();\n\n\t\t\ttry {\n\t\t\t\tresolver(promiseResolve, promiseReject, promiseNotify);\n\t\t\t} catch (e) {\n\t\t\t\tpromiseReject(e);\n\t\t\t}\n\n\t\t\treturn handler;\n\n\t\t\t/**\n\t\t\t * Transition from pre-resolution state to post-resolution state, notifying\n\t\t\t * all listeners of the ultimate fulfillment or rejection\n\t\t\t * @param {*} x resolution value\n\t\t\t */\n\t\t\tfunction promiseResolve (x) {\n\t\t\t\thandler.resolve(x);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Reject this promise with reason, which will be used verbatim\n\t\t\t * @param {Error|*} reason rejection reason, strongly suggested\n\t\t\t *   to be an Error type\n\t\t\t */\n\t\t\tfunction promiseReject (reason) {\n\t\t\t\thandler.reject(reason);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @deprecated\n\t\t\t * Issue a progress event, notifying all progress listeners\n\t\t\t * @param {*} x progress event payload to pass to all listeners\n\t\t\t */\n\t\t\tfunction promiseNotify (x) {\n\t\t\t\thandler.notify(x);\n\t\t\t}\n\t\t}\n\n\t\t// Creation\n\n\t\tPromise.resolve = resolve;\n\t\tPromise.reject = reject;\n\t\tPromise.never = never;\n\n\t\tPromise._defer = defer;\n\t\tPromise._handler = getHandler;\n\n\t\t/**\n\t\t * Returns a trusted promise. If x is already a trusted promise, it is\n\t\t * returned, otherwise returns a new trusted Promise which follows x.\n\t\t * @param  {*} x\n\t\t * @return {Promise} promise\n\t\t */\n\t\tfunction resolve(x) {\n\t\t\treturn isPromise(x) ? x\n\t\t\t\t: new Promise(Handler, new Async(getHandler(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a reject promise with x as its reason (x is used verbatim)\n\t\t * @param {*} x\n\t\t * @returns {Promise} rejected promise\n\t\t */\n\t\tfunction reject(x) {\n\t\t\treturn new Promise(Handler, new Async(new Rejected(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that remains pending forever\n\t\t * @returns {Promise} forever-pending promise.\n\t\t */\n\t\tfunction never() {\n\t\t\treturn foreverPendingPromise; // Should be frozen\n\t\t}\n\n\t\t/**\n\t\t * Creates an internal {promise, resolver} pair\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction defer() {\n\t\t\treturn new Promise(Handler, new Pending());\n\t\t}\n\n\t\t// Transformation and flow control\n\n\t\t/**\n\t\t * Transform this promise's fulfillment value, returning a new Promise\n\t\t * for the transformed result.  If the promise cannot be fulfilled, onRejected\n\t\t * is called with the reason.  onProgress *may* be called with updates toward\n\t\t * this promise's fulfillment.\n\t\t * @param {function=} onFulfilled fulfillment handler\n\t\t * @param {function=} onRejected rejection handler\n\t\t * @param {function=} onProgress @deprecated progress handler\n\t\t * @return {Promise} new promise\n\t\t */\n\t\tPromise.prototype.then = function(onFulfilled, onRejected, onProgress) {\n\t\t\tvar parent = this._handler;\n\t\t\tvar state = parent.join().state();\n\n\t\t\tif ((typeof onFulfilled !== 'function' && state > 0) ||\n\t\t\t\t(typeof onRejected !== 'function' && state < 0)) {\n\t\t\t\t// Short circuit: value will not change, simply share handler\n\t\t\t\treturn new this.constructor(Handler, parent);\n\t\t\t}\n\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\n\t\t\tparent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);\n\n\t\t\treturn p;\n\t\t};\n\n\t\t/**\n\t\t * If this promise cannot be fulfilled due to an error, call onRejected to\n\t\t * handle the error. Shortcut for .then(undefined, onRejected)\n\t\t * @param {function?} onRejected\n\t\t * @return {Promise}\n\t\t */\n\t\tPromise.prototype['catch'] = function(onRejected) {\n\t\t\treturn this.then(void 0, onRejected);\n\t\t};\n\n\t\t/**\n\t\t * Creates a new, pending promise of the same type as this promise\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype._beget = function() {\n\t\t\treturn begetFrom(this._handler, this.constructor);\n\t\t};\n\n\t\tfunction begetFrom(parent, Promise) {\n\t\t\tvar child = new Pending(parent.receiver, parent.join().context);\n\t\t\treturn new Promise(Handler, child);\n\t\t}\n\n\t\t// Array combinators\n\n\t\tPromise.all = all;\n\t\tPromise.race = race;\n\t\tPromise._traverse = traverse;\n\n\t\t/**\n\t\t * Return a promise that will fulfill when all promises in the\n\t\t * input array have fulfilled, or will reject when one of the\n\t\t * promises rejects.\n\t\t * @param {array} promises array of promises\n\t\t * @returns {Promise} promise for array of fulfillment values\n\t\t */\n\t\tfunction all(promises) {\n\t\t\treturn traverseWith(snd, null, promises);\n\t\t}\n\n\t\t/**\n\t\t * Array<Promise<X>> -> Promise<Array<f(X)>>\n\t\t * @private\n\t\t * @param {function} f function to apply to each promise's value\n\t\t * @param {Array} promises array of promises\n\t\t * @returns {Promise} promise for transformed values\n\t\t */\n\t\tfunction traverse(f, promises) {\n\t\t\treturn traverseWith(tryCatch2, f, promises);\n\t\t}\n\n\t\tfunction traverseWith(tryMap, f, promises) {\n\t\t\tvar handler = typeof f === 'function' ? mapAt : settleAt;\n\n\t\t\tvar resolver = new Pending();\n\t\t\tvar pending = promises.length >>> 0;\n\t\t\tvar results = new Array(pending);\n\n\t\t\tfor (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {\n\t\t\t\tx = promises[i];\n\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttraverseAt(promises, handler, i, x, resolver);\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t}\n\n\t\t\treturn new Promise(Handler, resolver);\n\n\t\t\tfunction mapAt(i, x, resolver) {\n\t\t\t\tif(!resolver.resolved) {\n\t\t\t\t\ttraverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction settleAt(i, x, resolver) {\n\t\t\t\tresults[i] = x;\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction traverseAt(promises, handler, i, x, resolver) {\n\t\t\tif (maybeThenable(x)) {\n\t\t\t\tvar h = getHandlerMaybeThenable(x);\n\t\t\t\tvar s = h.state();\n\n\t\t\t\tif (s === 0) {\n\t\t\t\t\th.fold(handler, i, void 0, resolver);\n\t\t\t\t} else if (s > 0) {\n\t\t\t\t\thandler(i, h.value, resolver);\n\t\t\t\t} else {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandler(i, x, resolver);\n\t\t\t}\n\t\t}\n\n\t\tPromise._visitRemaining = visitRemaining;\n\t\tfunction visitRemaining(promises, start, handler) {\n\t\t\tfor(var i=start; i<promises.length; ++i) {\n\t\t\t\tmarkAsHandled(getHandler(promises[i]), handler);\n\t\t\t}\n\t\t}\n\n\t\tfunction markAsHandled(h, handler) {\n\t\t\tif(h === handler) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar s = h.state();\n\t\t\tif(s === 0) {\n\t\t\t\th.visit(h, void 0, h._unreport);\n\t\t\t} else if(s < 0) {\n\t\t\t\th._unreport();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fulfill-reject competitive race. Return a promise that will settle\n\t\t * to the same state as the earliest input promise to settle.\n\t\t *\n\t\t * WARNING: The ES6 Promise spec requires that race()ing an empty array\n\t\t * must return a promise that is pending forever.  This implementation\n\t\t * returns a singleton forever-pending promise, the same singleton that is\n\t\t * returned by Promise.never(), thus can be checked with ===\n\t\t *\n\t\t * @param {array} promises array of promises to race\n\t\t * @returns {Promise} if input is non-empty, a promise that will settle\n\t\t * to the same outcome as the earliest input promise to settle. if empty\n\t\t * is empty, returns a promise that will never settle.\n\t\t */\n\t\tfunction race(promises) {\n\t\t\tif(typeof promises !== 'object' || promises === null) {\n\t\t\t\treturn reject(new TypeError('non-iterable passed to race()'));\n\t\t\t}\n\n\t\t\t// Sigh, race([]) is untestable unless we return *something*\n\t\t\t// that is recognizable without calling .then() on it.\n\t\t\treturn promises.length === 0 ? never()\n\t\t\t\t : promises.length === 1 ? resolve(promises[0])\n\t\t\t\t : runRace(promises);\n\t\t}\n\n\t\tfunction runRace(promises) {\n\t\t\tvar resolver = new Pending();\n\t\t\tvar i, x, h;\n\t\t\tfor(i=0; i<promises.length; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = getHandler(x);\n\t\t\t\tif(h.state() !== 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Promise(Handler, resolver);\n\t\t}\n\n\t\t// Promise internals\n\t\t// Below this, everything is @private\n\n\t\t/**\n\t\t * Get an appropriate handler for x, without checking for cycles\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandler(x) {\n\t\t\tif(isPromise(x)) {\n\t\t\t\treturn x._handler.join();\n\t\t\t}\n\t\t\treturn maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for thenable x.\n\t\t * NOTE: You must only call this if maybeThenable(x) == true\n\t\t * @param {object|function|Promise} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerMaybeThenable(x) {\n\t\t\treturn isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for potentially untrusted thenable x\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerUntrusted(x) {\n\t\t\ttry {\n\t\t\t\tvar untrustedThen = x.then;\n\t\t\t\treturn typeof untrustedThen === 'function'\n\t\t\t\t\t? new Thenable(untrustedThen, x)\n\t\t\t\t\t: new Fulfilled(x);\n\t\t\t} catch(e) {\n\t\t\t\treturn new Rejected(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Handler for a promise that is pending forever\n\t\t * @constructor\n\t\t */\n\t\tfunction Handler() {}\n\n\t\tHandler.prototype.when\n\t\t\t= Handler.prototype.become\n\t\t\t= Handler.prototype.notify // deprecated\n\t\t\t= Handler.prototype.fail\n\t\t\t= Handler.prototype._unreport\n\t\t\t= Handler.prototype._report\n\t\t\t= noop;\n\n\t\tHandler.prototype._state = 0;\n\n\t\tHandler.prototype.state = function() {\n\t\t\treturn this._state;\n\t\t};\n\n\t\t/**\n\t\t * Recursively collapse handler chain to find the handler\n\t\t * nearest to the fully resolved value.\n\t\t * @returns {object} handler nearest the fully resolved value\n\t\t */\n\t\tHandler.prototype.join = function() {\n\t\t\tvar h = this;\n\t\t\twhile(h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t}\n\t\t\treturn h;\n\t\t};\n\n\t\tHandler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {\n\t\t\tthis.when({\n\t\t\t\tresolver: to,\n\t\t\t\treceiver: receiver,\n\t\t\t\tfulfilled: fulfilled,\n\t\t\t\trejected: rejected,\n\t\t\t\tprogress: progress\n\t\t\t});\n\t\t};\n\n\t\tHandler.prototype.visit = function(receiver, fulfilled, rejected, progress) {\n\t\t\tthis.chain(failIfRejected, receiver, fulfilled, rejected, progress);\n\t\t};\n\n\t\tHandler.prototype.fold = function(f, z, c, to) {\n\t\t\tthis.when(new Fold(f, z, c, to));\n\t\t};\n\n\t\t/**\n\t\t * Handler that invokes fail() on any handler it becomes\n\t\t * @constructor\n\t\t */\n\t\tfunction FailIfRejected() {}\n\n\t\tinherit(Handler, FailIfRejected);\n\n\t\tFailIfRejected.prototype.become = function(h) {\n\t\t\th.fail();\n\t\t};\n\n\t\tvar failIfRejected = new FailIfRejected();\n\n\t\t/**\n\t\t * Handler that manages a queue of consumers waiting on a pending promise\n\t\t * @constructor\n\t\t */\n\t\tfunction Pending(receiver, inheritedContext) {\n\t\t\tPromise.createContext(this, inheritedContext);\n\n\t\t\tthis.consumers = void 0;\n\t\t\tthis.receiver = receiver;\n\t\t\tthis.handler = void 0;\n\t\t\tthis.resolved = false;\n\t\t}\n\n\t\tinherit(Handler, Pending);\n\n\t\tPending.prototype._state = 0;\n\n\t\tPending.prototype.resolve = function(x) {\n\t\t\tthis.become(getHandler(x));\n\t\t};\n\n\t\tPending.prototype.reject = function(x) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.become(new Rejected(x));\n\t\t};\n\n\t\tPending.prototype.join = function() {\n\t\t\tif (!this.resolved) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar h = this;\n\n\t\t\twhile (h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t\tif (h === this) {\n\t\t\t\t\treturn this.handler = cycle();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn h;\n\t\t};\n\n\t\tPending.prototype.run = function() {\n\t\t\tvar q = this.consumers;\n\t\t\tvar handler = this.handler;\n\t\t\tthis.handler = this.handler.join();\n\t\t\tthis.consumers = void 0;\n\n\t\t\tfor (var i = 0; i < q.length; ++i) {\n\t\t\t\thandler.when(q[i]);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.become = function(handler) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.resolved = true;\n\t\t\tthis.handler = handler;\n\t\t\tif(this.consumers !== void 0) {\n\t\t\t\ttasks.enqueue(this);\n\t\t\t}\n\n\t\t\tif(this.context !== void 0) {\n\t\t\t\thandler._report(this.context);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.when = function(continuation) {\n\t\t\tif(this.resolved) {\n\t\t\t\ttasks.enqueue(new ContinuationTask(continuation, this.handler));\n\t\t\t} else {\n\t\t\t\tif(this.consumers === void 0) {\n\t\t\t\t\tthis.consumers = [continuation];\n\t\t\t\t} else {\n\t\t\t\t\tthis.consumers.push(continuation);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tPending.prototype.notify = function(x) {\n\t\t\tif(!this.resolved) {\n\t\t\t\ttasks.enqueue(new ProgressTask(x, this));\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.fail = function(context) {\n\t\t\tvar c = typeof context === 'undefined' ? this.context : context;\n\t\t\tthis.resolved && this.handler.join().fail(c);\n\t\t};\n\n\t\tPending.prototype._report = function(context) {\n\t\t\tthis.resolved && this.handler.join()._report(context);\n\t\t};\n\n\t\tPending.prototype._unreport = function() {\n\t\t\tthis.resolved && this.handler.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Wrap another handler and force it into a future stack\n\t\t * @param {object} handler\n\t\t * @constructor\n\t\t */\n\t\tfunction Async(handler) {\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tinherit(Handler, Async);\n\n\t\tAsync.prototype.when = function(continuation) {\n\t\t\ttasks.enqueue(new ContinuationTask(continuation, this));\n\t\t};\n\n\t\tAsync.prototype._report = function(context) {\n\t\t\tthis.join()._report(context);\n\t\t};\n\n\t\tAsync.prototype._unreport = function() {\n\t\t\tthis.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Handler that wraps an untrusted thenable and assimilates it in a future stack\n\t\t * @param {function} then\n\t\t * @param {{then: function}} thenable\n\t\t * @constructor\n\t\t */\n\t\tfunction Thenable(then, thenable) {\n\t\t\tPending.call(this);\n\t\t\ttasks.enqueue(new AssimilateTask(then, thenable, this));\n\t\t}\n\n\t\tinherit(Pending, Thenable);\n\n\t\t/**\n\t\t * Handler for a fulfilled promise\n\t\t * @param {*} x fulfillment value\n\t\t * @constructor\n\t\t */\n\t\tfunction Fulfilled(x) {\n\t\t\tPromise.createContext(this);\n\t\t\tthis.value = x;\n\t\t}\n\n\t\tinherit(Handler, Fulfilled);\n\n\t\tFulfilled.prototype._state = 1;\n\n\t\tFulfilled.prototype.fold = function(f, z, c, to) {\n\t\t\trunContinuation3(f, z, this, c, to);\n\t\t};\n\n\t\tFulfilled.prototype.when = function(cont) {\n\t\t\trunContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tvar errorId = 0;\n\n\t\t/**\n\t\t * Handler for a rejected promise\n\t\t * @param {*} x rejection reason\n\t\t * @constructor\n\t\t */\n\t\tfunction Rejected(x) {\n\t\t\tPromise.createContext(this);\n\n\t\t\tthis.id = ++errorId;\n\t\t\tthis.value = x;\n\t\t\tthis.handled = false;\n\t\t\tthis.reported = false;\n\n\t\t\tthis._report();\n\t\t}\n\n\t\tinherit(Handler, Rejected);\n\n\t\tRejected.prototype._state = -1;\n\n\t\tRejected.prototype.fold = function(f, z, c, to) {\n\t\t\tto.become(this);\n\t\t};\n\n\t\tRejected.prototype.when = function(cont) {\n\t\t\tif(typeof cont.rejected === 'function') {\n\t\t\t\tthis._unreport();\n\t\t\t}\n\t\t\trunContinuation1(cont.rejected, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tRejected.prototype._report = function(context) {\n\t\t\ttasks.afterQueue(new ReportTask(this, context));\n\t\t};\n\n\t\tRejected.prototype._unreport = function() {\n\t\t\tif(this.handled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.handled = true;\n\t\t\ttasks.afterQueue(new UnreportTask(this));\n\t\t};\n\n\t\tRejected.prototype.fail = function(context) {\n\t\t\tthis.reported = true;\n\t\t\temitRejection('unhandledRejection', this);\n\t\t\tPromise.onFatalRejection(this, context === void 0 ? this.context : context);\n\t\t};\n\n\t\tfunction ReportTask(rejection, context) {\n\t\t\tthis.rejection = rejection;\n\t\t\tthis.context = context;\n\t\t}\n\n\t\tReportTask.prototype.run = function() {\n\t\t\tif(!this.rejection.handled && !this.rejection.reported) {\n\t\t\t\tthis.rejection.reported = true;\n\t\t\t\temitRejection('unhandledRejection', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejection(this.rejection, this.context);\n\t\t\t}\n\t\t};\n\n\t\tfunction UnreportTask(rejection) {\n\t\t\tthis.rejection = rejection;\n\t\t}\n\n\t\tUnreportTask.prototype.run = function() {\n\t\t\tif(this.rejection.reported) {\n\t\t\t\temitRejection('rejectionHandled', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejectionHandled(this.rejection);\n\t\t\t}\n\t\t};\n\n\t\t// Unhandled rejection hooks\n\t\t// By default, everything is a noop\n\n\t\tPromise.createContext\n\t\t\t= Promise.enterContext\n\t\t\t= Promise.exitContext\n\t\t\t= Promise.onPotentiallyUnhandledRejection\n\t\t\t= Promise.onPotentiallyUnhandledRejectionHandled\n\t\t\t= Promise.onFatalRejection\n\t\t\t= noop;\n\n\t\t// Errors and singletons\n\n\t\tvar foreverPendingHandler = new Handler();\n\t\tvar foreverPendingPromise = new Promise(Handler, foreverPendingHandler);\n\n\t\tfunction cycle() {\n\t\t\treturn new Rejected(new TypeError('Promise cycle'));\n\t\t}\n\n\t\t// Task runners\n\n\t\t/**\n\t\t * Run a single consumer\n\t\t * @constructor\n\t\t */\n\t\tfunction ContinuationTask(continuation, handler) {\n\t\t\tthis.continuation = continuation;\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tContinuationTask.prototype.run = function() {\n\t\t\tthis.handler.join().when(this.continuation);\n\t\t};\n\n\t\t/**\n\t\t * Run a queue of progress handlers\n\t\t * @constructor\n\t\t */\n\t\tfunction ProgressTask(value, handler) {\n\t\t\tthis.handler = handler;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tProgressTask.prototype.run = function() {\n\t\t\tvar q = this.handler.consumers;\n\t\t\tif(q === void 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var c, i = 0; i < q.length; ++i) {\n\t\t\t\tc = q[i];\n\t\t\t\trunNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Assimilate a thenable, sending it's value to resolver\n\t\t * @param {function} then\n\t\t * @param {object|function} thenable\n\t\t * @param {object} resolver\n\t\t * @constructor\n\t\t */\n\t\tfunction AssimilateTask(then, thenable, resolver) {\n\t\t\tthis._then = then;\n\t\t\tthis.thenable = thenable;\n\t\t\tthis.resolver = resolver;\n\t\t}\n\n\t\tAssimilateTask.prototype.run = function() {\n\t\t\tvar h = this.resolver;\n\t\t\ttryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);\n\n\t\t\tfunction _resolve(x) { h.resolve(x); }\n\t\t\tfunction _reject(x)  { h.reject(x); }\n\t\t\tfunction _notify(x)  { h.notify(x); }\n\t\t};\n\n\t\tfunction tryAssimilate(then, thenable, resolve, reject, notify) {\n\t\t\ttry {\n\t\t\t\tthen.call(thenable, resolve, reject, notify);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fold a handler value with z\n\t\t * @constructor\n\t\t */\n\t\tfunction Fold(f, z, c, to) {\n\t\t\tthis.f = f; this.z = z; this.c = c; this.to = to;\n\t\t\tthis.resolver = failIfRejected;\n\t\t\tthis.receiver = this;\n\t\t}\n\n\t\tFold.prototype.fulfilled = function(x) {\n\t\t\tthis.f.call(this.c, this.z, x, this.to);\n\t\t};\n\n\t\tFold.prototype.rejected = function(x) {\n\t\t\tthis.to.reject(x);\n\t\t};\n\n\t\tFold.prototype.progress = function(x) {\n\t\t\tthis.to.notify(x);\n\t\t};\n\n\t\t// Other helpers\n\n\t\t/**\n\t\t * @param {*} x\n\t\t * @returns {boolean} true iff x is a trusted Promise\n\t\t */\n\t\tfunction isPromise(x) {\n\t\t\treturn x instanceof Promise;\n\t\t}\n\n\t\t/**\n\t\t * Test just enough to rule out primitives, in order to take faster\n\t\t * paths in some code\n\t\t * @param {*} x\n\t\t * @returns {boolean} false iff x is guaranteed *not* to be a thenable\n\t\t */\n\t\tfunction maybeThenable(x) {\n\t\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t\t}\n\n\t\tfunction runContinuation1(f, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject(f, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction runContinuation3(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject3(f, x, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tfunction runNotify(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.notify(x);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReturn(f, x, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction tryCatch2(f, a, b) {\n\t\t\ttry {\n\t\t\t\treturn f(a, b);\n\t\t\t} catch(e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Return f.call(thisArg, x), or if it throws return a rejected promise for\n\t\t * the thrown exception\n\t\t */\n\t\tfunction tryCatchReject(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.become(getHandler(f.call(thisArg, x)));\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Same as above, but includes the extra argument parameter.\n\t\t */\n\t\tfunction tryCatchReject3(f, x, y, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tf.call(thisArg, x, y, next);\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Return f.call(thisArg, x), or if it throws, *return* the exception\n\t\t */\n\t\tfunction tryCatchReturn(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.notify(f.call(thisArg, x));\n\t\t\t} catch(e) {\n\t\t\t\tnext.notify(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction inherit(Parent, Child) {\n\t\t\tChild.prototype = objectCreate(Parent.prototype);\n\t\t\tChild.prototype.constructor = Child;\n\t\t}\n\n\t\tfunction snd(x, y) {\n\t\t\treturn y;\n\t\t}\n\n\t\tfunction noop() {}\n\n\t\tfunction initEmitRejection() {\n\t\t\t/*global process, self, CustomEvent*/\n\t\t\tif(typeof process !== 'undefined' && process !== null\n\t\t\t\t&& typeof process.emit === 'function') {\n\t\t\t\t// Returning falsy here means to call the default\n\t\t\t\t// onPotentiallyUnhandledRejection API.  This is safe even in\n\t\t\t\t// browserify since process.emit always returns falsy in browserify:\n\t\t\t\t// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46\n\t\t\t\treturn function(type, rejection) {\n\t\t\t\t\treturn type === 'unhandledRejection'\n\t\t\t\t\t\t? process.emit(type, rejection.value, rejection)\n\t\t\t\t\t\t: process.emit(type, rejection);\n\t\t\t\t};\n\t\t\t} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {\n\t\t\t\treturn (function(noop, self, CustomEvent) {\n\t\t\t\t\tvar hasCustomEvent = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar ev = new CustomEvent('unhandledRejection');\n\t\t\t\t\t\thasCustomEvent = ev instanceof CustomEvent;\n\t\t\t\t\t} catch (e) {}\n\n\t\t\t\t\treturn !hasCustomEvent ? noop : function(type, rejection) {\n\t\t\t\t\t\tvar ev = new CustomEvent(type, {\n\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\treason: rejection.value,\n\t\t\t\t\t\t\t\tkey: rejection\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: true\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !self.dispatchEvent(ev);\n\t\t\t\t\t};\n\t\t\t\t}(noop, self, CustomEvent));\n\t\t\t}\n\n\t\t\treturn noop;\n\t\t}\n\n\t\treturn Promise;\n\t};\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],113:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tpending: toPendingState,\n\t\tfulfilled: toFulfilledState,\n\t\trejected: toRejectedState,\n\t\tinspect: inspect\n\t};\n\n\tfunction toPendingState() {\n\t\treturn { state: 'pending' };\n\t}\n\n\tfunction toRejectedState(e) {\n\t\treturn { state: 'rejected', reason: e };\n\t}\n\n\tfunction toFulfilledState(x) {\n\t\treturn { state: 'fulfilled', value: x };\n\t}\n\n\tfunction inspect(handler) {\n\t\tvar state = handler.state();\n\t\treturn state === 0 ? toPendingState()\n\t\t\t : state > 0   ? toFulfilledState(handler.value)\n\t\t\t               : toRejectedState(handler.value);\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],114:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/**\n * Promises/A+ and when() implementation\n * when is part of the cujoJS family of libraries (http://cujojs.com/)\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar timed = require('./lib/decorators/timed');\n\tvar array = require('./lib/decorators/array');\n\tvar flow = require('./lib/decorators/flow');\n\tvar fold = require('./lib/decorators/fold');\n\tvar inspect = require('./lib/decorators/inspect');\n\tvar generate = require('./lib/decorators/iterate');\n\tvar progress = require('./lib/decorators/progress');\n\tvar withThis = require('./lib/decorators/with');\n\tvar unhandledRejection = require('./lib/decorators/unhandledRejection');\n\tvar TimeoutError = require('./lib/TimeoutError');\n\n\tvar Promise = [array, flow, fold, generate, progress,\n\t\tinspect, withThis, timed, unhandledRejection]\n\t\t.reduce(function(Promise, feature) {\n\t\t\treturn feature(Promise);\n\t\t}, require('./lib/Promise'));\n\n\tvar apply = require('./lib/apply')(Promise);\n\n\t// Public API\n\n\twhen.promise     = promise;              // Create a pending promise\n\twhen.resolve     = Promise.resolve;      // Create a resolved promise\n\twhen.reject      = Promise.reject;       // Create a rejected promise\n\n\twhen.lift        = lift;                 // lift a function to return promises\n\twhen['try']      = attempt;              // call a function and return a promise\n\twhen.attempt     = attempt;              // alias for when.try\n\n\twhen.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\twhen.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n\twhen.join        = join;                 // Join 2 or more promises\n\n\twhen.all         = all;                  // Resolve a list of promises\n\twhen.settle      = settle;               // Settle a list of promises\n\n\twhen.any         = lift(Promise.any);    // One-winner race\n\twhen.some        = lift(Promise.some);   // Multi-winner race\n\twhen.race        = lift(Promise.race);   // First-to-settle race\n\n\twhen.map         = map;                  // Array.map() for promises\n\twhen.filter      = filter;               // Array.filter() for promises\n\twhen.reduce      = lift(Promise.reduce);       // Array.reduce() for promises\n\twhen.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises\n\n\twhen.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable\n\n\twhen.Promise     = Promise;              // Promise constructor\n\twhen.defer       = defer;                // Create a {promise, resolve, reject} tuple\n\n\t// Error types\n\n\twhen.TimeoutError = TimeoutError;\n\n\t/**\n\t * Get a trusted promise for x, or by transforming x with onFulfilled\n\t *\n\t * @param {*} x\n\t * @param {function?} onFulfilled callback to be called when x is\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n\t *   will be invoked immediately.\n\t * @param {function?} onRejected callback to be called when x is\n\t *   rejected.\n\t * @param {function?} onProgress callback to be called when progress updates\n\t *   are issued for x. @deprecated\n\t * @returns {Promise} a new promise that will fulfill with the return\n\t *   value of callback or errback or the completion value of promiseOrValue if\n\t *   callback and/or errback is not supplied.\n\t */\n\tfunction when(x, onFulfilled, onRejected, onProgress) {\n\t\tvar p = Promise.resolve(x);\n\t\tif (arguments.length < 2) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn p.then(onFulfilled, onRejected, onProgress);\n\t}\n\n\t/**\n\t * Creates a new promise whose fate is determined by resolver.\n\t * @param {function} resolver function(resolve, reject, notify)\n\t * @returns {Promise} promise whose fate is determine by resolver\n\t */\n\tfunction promise(resolver) {\n\t\treturn new Promise(resolver);\n\t}\n\n\t/**\n\t * Lift the supplied function, creating a version of f that returns\n\t * promises, and accepts promises as arguments.\n\t * @param {function} f\n\t * @returns {Function} version of f that returns promises\n\t */\n\tfunction lift(f) {\n\t\treturn function() {\n\t\t\tfor(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {\n\t\t\t\ta[i] = arguments[i];\n\t\t\t}\n\t\t\treturn apply(f, this, a);\n\t\t};\n\t}\n\n\t/**\n\t * Call f in a future turn, with the supplied args, and return a promise\n\t * for the result.\n\t * @param {function} f\n\t * @returns {Promise}\n\t */\n\tfunction attempt(f /*, args... */) {\n\t\t/*jshint validthis:true */\n\t\tfor(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {\n\t\t\ta[i] = arguments[i+1];\n\t\t}\n\t\treturn apply(f, this, a);\n\t}\n\n\t/**\n\t * Creates a {promise, resolver} pair, either or both of which\n\t * may be given out safely to consumers.\n\t * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n\t */\n\tfunction defer() {\n\t\treturn new Deferred();\n\t}\n\n\tfunction Deferred() {\n\t\tvar p = Promise._defer();\n\n\t\tfunction resolve(x) { p._handler.resolve(x); }\n\t\tfunction reject(x) { p._handler.reject(x); }\n\t\tfunction notify(x) { p._handler.notify(x); }\n\n\t\tthis.promise = p;\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t\tthis.notify = notify;\n\t\tthis.resolver = { resolve: resolve, reject: reject, notify: notify };\n\t}\n\n\t/**\n\t * Determines if x is promise-like, i.e. a thenable object\n\t * NOTE: Will return true for *any thenable object*, and isn't truly\n\t * safe, since it may attempt to access the `then` property of x (i.e.\n\t *  clever/malicious getters may do weird things)\n\t * @param {*} x anything\n\t * @returns {boolean} true if x is promise-like\n\t */\n\tfunction isPromiseLike(x) {\n\t\treturn x && typeof x.then === 'function';\n\t}\n\n\t/**\n\t * Return a promise that will resolve only once all the supplied arguments\n\t * have resolved. The resolution value of the returned promise will be an array\n\t * containing the resolution values of each of the arguments.\n\t * @param {...*} arguments may be a mix of promises and values\n\t * @returns {Promise}\n\t */\n\tfunction join(/* ...promises */) {\n\t\treturn Promise.all(arguments);\n\t}\n\n\t/**\n\t * Return a promise that will fulfill once all input promises have\n\t * fulfilled, or reject when any one input promise rejects.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise}\n\t */\n\tfunction all(promises) {\n\t\treturn when(promises, Promise.all);\n\t}\n\n\t/**\n\t * Return a promise that will always fulfill with an array containing\n\t * the outcome states of all input promises.  The returned promise\n\t * will only reject if `promises` itself is a rejected promise.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise} promise for array of settled state descriptors\n\t */\n\tfunction settle(promises) {\n\t\treturn when(promises, Promise.settle);\n\t}\n\n\t/**\n\t * Promise-aware array map function, similar to `Array.prototype.map()`,\n\t * but input array may contain promises or values.\n\t * @param {Array|Promise} promises array of anything, may contain promises and values\n\t * @param {function(x:*, index:Number):*} mapFunc map function which may\n\t *  return a promise or value\n\t * @returns {Promise} promise that will fulfill with an array of mapped values\n\t *  or reject if any input promise rejects.\n\t */\n\tfunction map(promises, mapFunc) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.map(promises, mapFunc);\n\t\t});\n\t}\n\n\t/**\n\t * Filter the provided array of promises using the provided predicate.  Input may\n\t * contain promises and values\n\t * @param {Array|Promise} promises array of promises and values\n\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t *  Must return truthy (or promise for truthy) for items to retain.\n\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t *  for which predicate returned truthy.\n\t */\n\tfunction filter(promises, predicate) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.filter(promises, predicate);\n\t\t});\n\t}\n\n\treturn when;\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n},{\"./lib/Promise\":97,\"./lib/TimeoutError\":99,\"./lib/apply\":100,\"./lib/decorators/array\":101,\"./lib/decorators/flow\":102,\"./lib/decorators/fold\":103,\"./lib/decorators/inspect\":104,\"./lib/decorators/iterate\":105,\"./lib/decorators/progress\":106,\"./lib/decorators/timed\":107,\"./lib/decorators/unhandledRejection\":108,\"./lib/decorators/with\":109}],115:[function(require,module,exports){\n// Import requirements using browserify\n'use strict';\n\n// Insert vue-router and vue-resource into Vue\n\n// Import the actual routes, aliases, ...\n\nvar _routes = require('./routes');\n\n// Create our router object and set options on it\nwindow.Vue = require('vue');\nwindow.VueRouter = require('vue-router');var router = new VueRouter();\n\n// Inject the routes into the VueRouter object\n(0, _routes.configRouter)(router);\n\n// Configure the application\nwindow.config = require('./config');\nVue.config.debug = true;\n\n// Configure our HTTP client\nvar rest = require('rest');\nvar pathPrefix = require('rest/interceptor/pathPrefix');\nvar mime = require('rest/interceptor/mime');\nvar defaultRequest = require('rest/interceptor/defaultRequest');\nvar errorCode = require('rest/interceptor/errorCode');\nvar interceptor = require('rest/interceptor');\nvar jwtAuth = require('./interceptors/jwtAuth');\n\nwindow.client = rest.wrap(pathPrefix, { prefix: config.api.base_url }).wrap(mime).wrap(defaultRequest, config.api.defaultRequest).wrap(errorCode, { code: 400 }).wrap(jwtAuth);\n\n// Bootstrap the app\nVue.component('nav-component', require('./compiled/nav.vue'));\nVue.component('footer-component', require('./compiled/footer.vue'));\nvar App = Vue.extend(require('./compiled/app.vue'));\nrouter.start(App, '#app');\nwindow.router = router;\n\n},{\"./compiled/app.vue\":116,\"./compiled/footer.vue\":117,\"./compiled/nav.vue\":118,\"./config\":139,\"./interceptors/jwtAuth\":142,\"./routes\":143,\"rest\":3,\"rest/interceptor\":7,\"rest/interceptor/defaultRequest\":8,\"rest/interceptor/errorCode\":9,\"rest/interceptor/mime\":10,\"rest/interceptor/pathPrefix\":11,\"vue\":94,\"vue-router\":28}],116:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  ready: function ready() {\n\n    this.$on('userHasLoggedOut', function () {\n      this.destroyLogin();\n    });\n\n    this.$on('userHasLoggedIn', function (user) {\n      this.setLogin(user);\n    });\n\n    // The app has just been initialized, check if we can get the user data with an already existing token\n    var token = localStorage.getItem('jwt-token');\n    if (token !== null && token !== 'undefined') {\n      var that = this;\n      client({ path: '/users/me' }).then(function (response) {\n        // User has successfully logged in using the token from storage\n        that.setLogin(response.entity.user);\n        // broadcast an event telling our children that the data is ready and views can be rendered\n        that.$broadcast('data-loaded');\n      }, function (response) {\n        // Login with our token failed, do some cleanup and redirect if we're on an authenticated route\n        that.destroyLogin();\n      });\n    }\n  },\n\n  data: function data() {\n    return {\n      user: null,\n      token: null,\n      authenticated: false\n    };\n  },\n\n  methods: {\n\n    setLogin: function setLogin(user) {\n      // Save login info in our data and set header in case it's not set already\n      this.user = user;\n      this.authenticated = true;\n      this.token = localStorage.getItem('jwt-token');\n    },\n\n    destroyLogin: function destroyLogin(user) {\n      // Cleanup when token was invalid our user has logged out\n      this.user = null;\n      this.token = null;\n      this.authenticated = false;\n      localStorage.removeItem('jwt-token');\n      if (this.$route.auth) this.$route.router.go('/auth/login');\n    }\n  }\n\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<router-view></router-view>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/app.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],117:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  data: function data() {\n    return {\n      links: {\n        facebook: 'alternativet.party',\n        twitter: 'Alternativet_no',\n        github: 'partialternativet'\n      }\n    };\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div style=\\\"margin-top: 125px;\\\">\\n\\t<!-- Push Footer -->\\n</div>\\n<footer class=\\\"footer\\\">\\n\\t<div class=\\\"container\\\" style=\\\"color: #777;\\\">\\n\\t\\t<!-- Company Information -->\\n\\t\\t<div class=\\\"pull-left\\\" style=\\\"padding-top: 28px;\\\">\\n\\t\\t\\tAlternativet\\n\\t\\t</div>\\n\\t\\t<!-- Social Icons -->\\n\\t\\t<div class=\\\"pull-right footer-social-icons\\\">\\n\\t\\t\\t<a href=\\\"http://facebook.com/{{ links.facebook }}\\\">\\n\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-facebook-square\\\"></i>\\n\\t\\t\\t</a>\\n\\t\\t\\t<a href=\\\"http://twitter.com/{{ links.twitter }}\\\">\\n\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-twitter-square\\\"></i>\\n\\t\\t\\t</a>\\n\\t\\t\\t<!--\\n\\t\\t\\t<a href=\\\"http://github.com/{{ links.github }}\\\">\\n\\t\\t\\t\\t<i class=\\\"fa fa-github-square\\\"></i>\\n\\t\\t\\t</a>\\n\\t\\t\\t-->\\n\\t\\t</div>\\n\\t\\t<div class=\\\"clearfix\\\"></div>\\n\\t</div>\\n</footer>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/footer.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],118:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  data: function data() {\n    return {\n      navTitle: 'Alternativet'\n    };\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<!-- Navigation -->\\n<nav class=\\\"navbar navbar-default\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<div class=\\\"navbar-header\\\">\\n\\t\\t\\t<!-- Collapsed Hamburger -->\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#bs-example-navbar-collapse-1\\\">\\n\\t\\t\\t\\t<span class=\\\"sr-only\\\">Skru navigasjon av/på</span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t</button>\\n\\t\\t\\t<!-- Branding Image -->\\n\\t\\t\\t<a class=\\\"navbar-brand\\\" v-link=\\\"{ path: '/' }\\\" style=\\\"padding-top: 19px;\\\">\\n\\t\\t\\t\\t<span class=\\\"sr-only\\\">{{ navTitle }}</span>\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\n\\t\\t\\t<ul class=\\\"nav navbar-nav\\\">\\n\\t\\t\\t\\t<!--<li><a v-link=\\\"{ path: '/home' }\\\">Hjem</a></li>-->\\n\\t\\t\\t\\t<!--<li><a v-link=\\\"{ path: '/dogs' }\\\" v-if=\\\"$root.authenticated\\\">Hunder</a></li>-->\\n\\t\\t\\t</ul>\\n\\t\\t\\t<!-- Right Side Of Navbar -->\\n\\t\\t\\t<ul class=\\\"nav navbar-nav navbar-right\\\">\\n\\t\\t\\t\\t<li><a v-link=\\\"{ path: '/manifest' }\\\">Manifest</a></li>\\n\\t\\t\\t\\t<li><a v-link=\\\"{ path: '/om' }\\\">Om oss</a></li>\\n\\t\\t\\t\\t<li><a v-link=\\\"{ path: '/sporsmal' }\\\">Spørsmål og svar</a></li>\\n\\t\\t\\t\\t<!--<li><a href=\\\"http://wiki.alternativet.party\\\">Wiki</a></li>-->\\n\\n\\t\\t\\t\\t<!-- Login / Registration Links for unauthenticated users -->\\n\\t\\t\\t\\t<li v-if=\\\" ! $root.authenticated\\\"><a class=\\\"auth\\\" v-link=\\\"{ path: '/login' }\\\">Logg inn</a></li>\\n\\t\\t\\t\\t<li v-if=\\\" ! $root.authenticated\\\"><a class=\\\"auth outline\\\" v-link=\\\"{ path: '/register' }\\\">Bli medlem</a></li>\\n\\t\\t\\t\\t<!-- Authenticated Right Dropdown -->\\n\\t\\t\\t\\t<li class=\\\"dropdown\\\" v-if=\\\"$root.authenticated\\\">\\n\\t\\t\\t\\t\\t<a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\">\\n\\t\\t\\t\\t\\t\\t{{ $root.user.name }} <span class=\\\"caret\\\"></span>\\n\\t\\t\\t\\t\\t</a>\\n\\n\\t\\t\\t\\t\\t<ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n\\t\\t\\t\\t\\t\\t<!-- Settings -->\\n\\t\\t\\t\\t\\t\\t<li class=\\\"dropdown-header\\\">Innstillinger</li>\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/auth/profile' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-user\\\"></i>Min profil\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\n\\t\\t\\t\\t\\t\\t<!-- Logout -->\\n\\t\\t\\t\\t\\t\\t<li class=\\\"divider\\\"></li>\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/auth/logout' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-sign-out\\\"></i>Logg ut\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n</nav>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/nav.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],119:[function(require,module,exports){\nvar __vueify_style__ = require(\"vueify-insert-css\").insert(\"\\n.title {\\n    color: #999;\\n    font-weight: 200;\\n    font-size: 40px;\\n    margin-bottom: 40px;\\n    text-align: center;\\n    margin-top: 20%;\\n}\\n.title a {\\n    display: block;\\n    margin-top: 20px;\\n}\\n.title a:hover {\\n    text-decoration: none;\\n}\")\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"container-fluid\\\">\\n\\t<div class=\\\"row\\\">\\n\\t\\t<div class=\\\"col-md-3\\\"></div>\\n\\t\\t<div class=\\\"col-md-6 title\\\">\\n\\t\\t\\tBeklager, vi fant ikke sida du ser etter : (<br>\\n\\t\\t\\t<a href=\\\"/\\\"><i class=\\\"fa fa-caret-left\\\"></i> Gå tilbake til forsida</a>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"col-md-3\\\"></div>\\n\\t</div>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/404.vue\"\n  module.hot.dispose(function () {\n    require(\"vueify-insert-css\").cache[\"\\n.title {\\n    color: #999;\\n    font-weight: 200;\\n    font-size: 40px;\\n    margin-bottom: 40px;\\n    text-align: center;\\n    margin-top: 20%;\\n}\\n.title a {\\n    display: block;\\n    margin-top: 20px;\\n}\\n.title a:hover {\\n    text-decoration: none;\\n}\"] = false\n    document.head.removeChild(__vueify_style__)\n  })\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27,\"vueify-insert-css\":96}],120:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen\\\">\\n\\t<!-- Tabs -->\\n\\t<div class=\\\"col-md-3\\\">\\n\\t\\t<div class=\\\"panel panel-default panel-flush\\\">\\n\\t\\t\\t<div class=\\\"panel-heading\\\">\\n\\t\\t\\t\\tMine sider\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div class=\\\"app-tabs\\\">\\n\\t\\t\\t\\t\\t<ul class=\\\"nav app-tabs-stacked\\\">\\n\\t\\t\\t\\t\\t\\t<li v-if=\\\"! $root.authenticated\\\">\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/auth/login' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-sign-in\\\"></i>&nbsp;Logg inn\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li v-if=\\\"! $root.authenticated\\\">\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/auth/register' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-chevron-circle-up\\\"></i>&nbsp;Bli medlem\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li v-if=\\\"$root.authenticated\\\">\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/auth/profile' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-user\\\"></i>&nbsp;Min profil\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\t<!-- Tab Panes -->\\n\\t<div class=\\\"col-md-9\\\">\\n\\t\\t<div class=\\\"tab-content\\\">\\n\\t\\t\\t<div class=\\\"tab-pane\\\">\\n\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t<router-view></router-view>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div><!-- End tab panel -->\\n\\t\\t</div><!-- End tab content -->\\n\\t</div><!-- End tab panes col-md-9 -->\\n</div><!-- End container -->\\n<footer-component></footer-component>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/auth.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],121:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  route: {\n    activate: function activate(transition) {\n      this.$root.authenticated = false;\n      this.$root.user = null;\n      localStorage.removeItem('user');\n      localStorage.removeItem('jwt-token');\n      transition.redirect('/');\n    }\n  }\n\n};\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/auth/logout.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],122:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n\\tMin profil\\n</div>\\n<div class=\\\"panel-body\\\">\\n\\t<!-- <button class=\\\"btn btn-primary\\\" v-on=\\\"click: fetch\\\">Fetch</button> -->\\n\\t<table class=\\\"table table-bordered\\\" v-if=\\\"$root.user\\\">\\n\\t\\t<tbody><tr>\\n\\t\\t\\t<th>#</th>\\n\\t\\t\\t<th>Navn</th>\\n\\t\\t\\t<th>E-post</th>\\n\\t\\t</tr>\\n\\t\\t<tr>\\n\\t\\t\\t<td>{{ $root.user.id }}</td>\\n\\t\\t\\t<td>{{ $root.user.name }}</td>\\n\\t\\t\\t<td>{{ $root.user.email }}</td>\\n\\t\\t</tr>\\n\\t</tbody></table>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/auth/profile.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],123:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen\\\">\\n\\t<!-- Tabs -->\\n\\t<div class=\\\"col-md-3\\\">\\n\\t\\t<div class=\\\"panel panel-default panel-flush\\\">\\n\\t\\t\\t<div class=\\\"panel-heading\\\">\\n\\t\\t\\t\\tHunder!\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div class=\\\"app-tabs\\\">\\n\\t\\t\\t\\t\\t<ul class=\\\"nav app-tabs-stacked\\\">\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/dogs' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-list\\\"></i>&nbsp;Liste over hunder\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/dogs/create' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-heart\\\"></i>&nbsp;Opprett ny\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\t<!-- Tab Panes -->\\n\\t<div class=\\\"col-md-9\\\">\\n\\t\\t<div class=\\\"tab-content\\\">\\n\\t\\t\\t<div class=\\\"tab-pane\\\">\\n\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t<router-view></router-view>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div><!-- End tab panel -->\\n\\t\\t</div><!-- End tab content -->\\n\\t</div><!-- End tab panes col-md-9 -->\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/dogs.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],124:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  data: function data() {\n    return {\n      dog: {\n        name: '',\n        age: ''\n      },\n      messages: []\n    };\n  },\n\n  methods: {\n    createDog: function createDog(e) {\n      e.preventDefault();\n      var that = this;\n      client({ path: 'dogs', entity: this.dog }).then(function (response, status) {\n        that.dog.name = '';\n        that.dog.age = '';\n        that.messages = [{ type: 'success', message: 'Woof woof! Your dog was created' }];\n        Vue.nextTick(function () {\n          document.getElementById('nameInput').focus();\n        });\n      }, function (response, status) {\n        that.messages = [];\n        for (var key in response.entity) {\n          that.messages.push({ type: 'danger', message: response.entity[key] });\n        }\n      });\n    }\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n\\tMake a dog!\\n</div>\\n<div class=\\\"panel-body\\\">\\n\\t<div id=\\\"alerts\\\" v-if=\\\"messages.length > 0\\\">\\n\\t\\t<div v-for=\\\"message in messages\\\" class=\\\"alert alert-{{ message.type }} alert-dismissible\\\" role=\\\"alert\\\">\\n\\t\\t\\t{{ message.message }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<form class=\\\"form-horizontal\\\" role=\\\"form\\\" v-on:submit=\\\"createDog\\\">\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"name\\\" class=\\\"col-sm-2 col-sm-offset-1 control-label\\\">Name your dog</label>\\n\\t\\t\\t<div class=\\\"col-sm-5\\\">\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" required=\\\"required\\\" name=\\\"name\\\" type=\\\"text\\\" v-model=\\\"dog.name\\\" id=\\\"nameInput\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"age\\\" class=\\\"col-sm-2 col-sm-offset-1 control-label\\\">What's the age?</label>\\n\\t\\t\\t<div class=\\\"col-sm-5\\\">\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" required=\\\"required\\\" name=\\\"age\\\" type=\\\"text\\\" v-model=\\\"dog.age\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<div class=\\\"col-sm-4 col-sm-offset-3\\\">\\n\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-btn fa-save\\\"></i>Make the dog!</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</form>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/dogs/create.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],125:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  data: function data() {\n    return {\n      dogs: [],\n      messages: []\n    };\n  },\n\n  methods: {\n    // Let's fetch some dogs\n    fetch: function fetch(successHandler) {\n      var that = this;\n      client({ path: '/dogs' }).then(function (response) {\n        // Look ma! Puppies!\n        that.$set('dogs', response.entity.data);\n        successHandler(response.entity.data);\n      }, function (response, status) {\n        if (_.contains([401, 500], status)) {\n          that.$dispatch('userHasLoggedOut');\n        }\n      });\n    },\n\n    deleteDog: function deleteDog(index) {\n      var that = this;\n      client({ path: '/dogs/' + this.dogs[index].id, method: 'DELETE' }).then(function (response) {\n        that.dogs.splice(index, 1);\n        that.messages = [{ type: 'success', message: 'Great, dog purged.' }];\n      }, function (response) {\n        that.messages.push({ type: 'danger', message: 'There was a problem removing the dog' });\n      });\n    }\n\n  },\n\n  route: {\n    // Ooh, ooh, are there any new puppies yet?\n    data: function data(transition) {\n      this.fetch(function (data) {\n        transition.next({ dogs: data });\n      });\n    }\n  }\n\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n\\tList of dogs\\n</div>\\n<div class=\\\"panel-body\\\" v-if=\\\"$loadingRouteData\\\">\\n\\tLoading data {{ loadingRouteData }}\\n</div>\\n<div class=\\\"panel-body\\\" v-if=\\\"messages.length > 0\\\">\\n\\t<div v-for=\\\"message in messages\\\" class=\\\"alert alert-{{ message.type }} alert-dismissible\\\" role=\\\"alert\\\">\\n\\t\\t{{ message.message }}\\n\\t</div>\\n</div>\\n\\n<div class=\\\"panel-body\\\" v-if=\\\"dogs.length == 0\\\">\\n\\tYou have no dogs!\\n</div>\\n\\n<table class=\\\"table\\\" v-if=\\\" ! $loadingRouteData &amp;&amp; dogs.length > 0\\\">\\n\\t<thead>\\n\\t\\t<tr>\\n\\t\\t\\t<th>ID</th>\\n\\t\\t\\t<th>Name</th>\\n\\t\\t\\t<th>Age</th>\\n\\t\\t\\t<th width=\\\"120px\\\">Actions</th>\\n\\t\\t</tr>\\n\\t</thead>\\n\\t<tbody>\\n\\t\\t<tr v-for=\\\"dog in dogs\\\">\\n\\t\\t\\t<td>{{ dog.id }}</td>\\n\\t\\t\\t<td>{{ dog.name }}</td>\\n\\t\\t\\t<td>{{ dog.age }}</td>\\n\\t\\t\\t<td>\\n\\t\\t\\t\\t<a class=\\\"btn btn-primary btn-xs\\\" v-link=\\\"{ path: '/dogs/'+dog.id }\\\">Edit</a>\\n\\t\\t\\t\\t<a class=\\\"btn btn-primary btn-xs\\\" v-on:click=\\\"deleteDog($index)\\\">Delete</a>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/dogs/index.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],126:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  data: function data() {\n    return {\n      dog: {\n        id: null,\n        name: null,\n        age: null\n      },\n      messages: []\n    };\n  },\n\n  methods: {\n    // Let's fetch the dog\n    fetch: function fetch(id, successHandler) {\n      var that = this;\n      client({ path: '/dogs/' + id }).then(function (response) {\n        that.$set('dog', response.entity.data);\n        successHandler(response.entity.data);\n      }, function (response, status, request) {\n        // Go tell your parents that you've messed up somehow\n        if (status === 401) {\n          self.$dispatch('userHasLoggedOut');\n        } else {\n          console.log(response);\n        }\n      });\n    },\n\n    updateDog: function updateDog(e) {\n      e.preventDefault();\n      var self = this;\n      client({ path: '/dogs/' + this.dog.id, entity: this.dog, method: 'PUT' }).then(function (response) {\n        self.messages = [];\n        self.messages.push({ type: 'success', message: 'Woof woof! Your dog was updated' });\n      }, function (response) {\n        self.messages = [];\n        for (var key in response.entity) {\n          self.messages.push({ type: 'danger', message: response.entity[key] });\n        }\n      });\n    }\n\n  },\n\n  route: {\n    // Ooh, ooh, are there any new puppies yet?\n    data: function data(transition) {\n      this.fetch(this.$route.params.id, function (data) {\n        transition.next({ dog: data });\n      });\n    }\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n\\tEdit dog\\n</div>\\n<div class=\\\"panel-body\\\">\\n\\t<div id=\\\"alerts\\\" v-if=\\\"messages.length > 0\\\">\\n\\t\\t<div v-for=\\\"message in messages\\\" class=\\\"alert alert-{{ message.type }} alert-dismissible\\\" role=\\\"alert\\\">\\n\\t\\t\\t{{ message.message }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<form class=\\\"form-horizontal\\\" role=\\\"form\\\" v-on:submit=\\\"updateDog\\\">\\n\\t<fieldset disabled=\\\"\\\">\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"name\\\" class=\\\"col-sm-2 col-sm-offset-1 control-label\\\">Dog ID</label>\\n\\t\\t\\t<div class=\\\"col-sm-5\\\">\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" required=\\\"required\\\" name=\\\"name\\\" type=\\\"text\\\" v-model=\\\"dog.id\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</fieldset>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"name\\\" class=\\\"col-sm-2 col-sm-offset-1 control-label\\\">Name your dog</label>\\n\\t\\t\\t<div class=\\\"col-sm-5\\\">\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" required=\\\"required\\\" name=\\\"name\\\" type=\\\"text\\\" v-model=\\\"dog.name\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"age\\\" class=\\\"col-sm-2 col-sm-offset-1 control-label\\\">What's the age?</label>\\n\\t\\t\\t<div class=\\\"col-sm-5\\\">\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" required=\\\"required\\\" name=\\\"age\\\" type=\\\"text\\\" v-model=\\\"dog.age\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<div class=\\\"col-sm-4 col-sm-offset-3\\\">\\n\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-btn fa-save\\\"></i>Update the dog!</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</form>\\n</div>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/dogs/show.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],127:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  data: function data() {\n    return {\n      user: {\n        email: null,\n        password: null\n      },\n      messages: []\n    };\n  },\n\n  methods: {\n    attempt: function attempt(e) {\n      e.preventDefault();\n      var that = this;\n      client({ path: 'login', entity: this.user }).then(function (response) {\n        that.$dispatch('userHasFetchedToken', response.token);\n        that.getUserData();\n      }, function (response) {\n        that.messages = [];\n        if (response.status && response.status.code === 401) that.messages.push({ type: 'danger', message: 'Beklager, brukernavn eller passord er feil.' });\n      });\n    },\n\n    getUserData: function getUserData() {\n      var that = this;\n      client({ path: '/users/me' }).then(function (response) {\n        that.$dispatch('userHasLoggedIn', response.entity.user);\n        that.$route.router.go('/auth/profile');\n      }, function (response) {\n        console.log(response);\n      });\n    }\n  },\n\n  route: {\n    activate: function activate(transition) {\n      this.$dispatch('userHasLoggedOut');\n      transition.next();\n    }\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen\\\">\\n\\n    <div class=\\\"col-md-12\\\">\\n        <form class=\\\"form-horizontal\\\" role=\\\"form\\\">\\n            <div id=\\\"alerts\\\" v-if=\\\"messages.length > 0\\\">\\n                <div v-for=\\\"message in messages\\\" class=\\\"alert alert-{{ message.type }} alert-dismissible\\\" role=\\\"alert\\\">\\n                    {{ message.message }}\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"col-md-4 control-label\\\">E-post</label>\\n                <div class=\\\"col-md-6\\\">\\n                    <input type=\\\"email\\\" class=\\\"form-control\\\" v-model=\\\"user.email\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"col-md-4 control-label\\\">Passord</label>\\n                <div class=\\\"col-md-6\\\">\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" v-model=\\\"user.password\\\">\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"col-md-6 col-md-offset-4\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" v-on:click=\\\"attempt\\\">\\n                        <i class=\\\"fa fa-btn fa-sign-in\\\"></i>Logg inn\\n                    </button>\\n                    <a class=\\\"btn btn-default\\\" v-link=\\\"{ path: '/register' }\\\">\\n                        Opprett bruker\\n                    </a>\\n                    <a class=\\\"btn btn-link\\\" v-link=\\\"{ path: '/auth/forgot' }\\\">Glemt passordet?</a>\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/login.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],128:[function(require,module,exports){\nvar __vueify_style__ = require(\"vueify-insert-css\").insert(\"\\n.manifest {\\n    text-align: center;\\n}\\n\\n.manifest h2 {\\n    margin-top: 0;\\n    margin-bottom: 1em;\\n    font-weight: bold;\\n    font-size: 2.4em;\\n    text-transform: uppercase;\\n}\\n\\n.manifest header h2 {\\n    margin-bottom: .5em;\\n}\\n\\n.manifest p {\\n    font-size: 1.3em;\\n    margin-bottom: 1.4em;\\n}\\n\\n.manifest p span.lead {\\n    font-size: 1em;\\n    font-weight: bold;\\n    text-transform: uppercase;\\n}\")\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen manifest\\\">\\n    <div class=\\\"col-md-1\\\">\\n\\n    </div>\\n    <div class=\\\"col-md-9\\\">\\n        <header>\\n            <h2>Manifest</h2>\\n            <p>Det er alltid et alternativ!</p>\\n        </header>\\n        <p><span class=\\\"lead\\\">Alternativet er en politisk idé</span><br>om personlig frihet, sosial verdighet og levende, bærekraftige fellesskap. Et håp. En drøm. En lengsel etter mening, betydning og medmenneskelige relasjoner. Alternativet er et svar på det som skjer i verden i dag. Rundt oss. Med oss.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er et opprop</span><br>mot kynismen, mangelen på raushet og et samfunn som sparker nedover.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er glede.</span><br>Uten humor ingen kreativitet. Uten kreativitet ingen gode idéer. Uten gode idéer ingen skaperkraft. Uten skaperkraft intet resultat.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er en positiv motkraft.</span><br>En lyst til å komme med reelle og seriøse svar på miljø- og ressurskrisen som jorden befinner seg i. En krise som for hver dag forverrer våre egne, våre barns og våre barnebarns muligheter for et godt, rikt og meningsfylt liv.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er nysgjerrighet</span><br>på hvordan vi utvikler bygdene, byene og nasjonene våre. Vi vil selv ta vare på økonomien og de demokratiske beslutningene på arbeidsplassene og i lokalsamfunnene der vi lever våre liv. Vi mister likevel ikke det globale utsynet og ansvaret for å finne felles løsninger med både våre naboer og med de som bor på den andre siden av kloden.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er samarbeid.</span><br>Vi vet at private virksomheter ikke kan løse problemene alene. Det kan heller ikke de offentlige institusjonene eller organisasjonslivet gjøre. Derfor skal vi oppfinne helt nye koblinger og samarbeidsmodeller, der vi bruker det beste fra det private, det offentlige og organisasjonslivet.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er åpenhet.</span><br>Vi vil prøve nye idéer og skape løsninger som virker. Alternativet er også streben etter å forstå komplekse sammenhenger og motstå fristelsen å benytte forenklede argumenter og behagelige illusjoner.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er mot</span><br>til å se problemene i øynene. Men også mot til å møte framtida vi har sammen.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er allerede virkelighet.</span><br>Rundt om på kloden vår blir det i vår tid skapt helt nye institusjonstyper, organisasjonsformer og sosiale nettverk. Om det skjer i Oslo, København, Seoul, Durban eller Rio betyr ikke så mye hver for seg, men tilsammen utgjør de en levedyktig global endringsbølge.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er for deg</span><br>som merker at noe er i bevegelse. Som har en fornemmelse av at noe nytt er i ferd med å avløse det gamle. En annen måte å se på demokrati, vekst, arbeidsliv, ansvar og livskvalitet.<br>\\n            Det er Alternativet.</p>\\n    </div>\\n    <div class=\\\"col-md-2\\\">\\n\\n    </div>\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/manifest.vue\"\n  module.hot.dispose(function () {\n    require(\"vueify-insert-css\").cache[\"\\n.manifest {\\n    text-align: center;\\n}\\n\\n.manifest h2 {\\n    margin-top: 0;\\n    margin-bottom: 1em;\\n    font-weight: bold;\\n    font-size: 2.4em;\\n    text-transform: uppercase;\\n}\\n\\n.manifest header h2 {\\n    margin-bottom: .5em;\\n}\\n\\n.manifest p {\\n    font-size: 1.3em;\\n    margin-bottom: 1.4em;\\n}\\n\\n.manifest p span.lead {\\n    font-size: 1em;\\n    font-weight: bold;\\n    text-transform: uppercase;\\n}\"] = false\n    document.head.removeChild(__vueify_style__)\n  })\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27,\"vueify-insert-css\":96}],129:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen\\\">\\n\\t<!-- Tabs -->\\n\\t<div class=\\\"col-md-3\\\">\\n\\t\\t<div class=\\\"panel panel-default panel-flush\\\">\\n\\t\\t\\t<div class=\\\"panel-heading\\\">\\n\\t\\t\\t\\tOm oss\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div class=\\\"app-tabs\\\">\\n\\t\\t\\t\\t\\t<ul class=\\\"nav app-tabs-stacked\\\">\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/om/om' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-info\\\"></i>&nbsp;Alternativet\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/om/kontakt' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-envelope\\\"></i>&nbsp;Kontakt\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t\\t\\t<a v-link=\\\"{ path: '/om/folk' }\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-fw fa-users\\\"></i>&nbsp;Folk\\n\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t</li>\\n                        <li>\\n                            <a v-link=\\\"{ path: '/om/organisasjon' }\\\">\\n                                <i class=\\\"fa fa-btn fa-fw fa-cloud\\\"></i>&nbsp;Organisasjon\\n                            </a>\\n                        </li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\t<!-- Tab Panes -->\\n\\t<div class=\\\"col-md-9\\\">\\n\\t\\t<div class=\\\"tab-content\\\">\\n\\t\\t\\t<div class=\\\"tab-pane\\\">\\n\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t<router-view></router-view>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div><!-- End tab panel -->\\n\\t\\t</div><!-- End tab content -->\\n\\t</div><!-- End tab panes col-md-9 -->\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/om.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],130:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n    Folk\\n</div>\\n<div class=\\\"panel-body\\\">\\n    <p class=\\\"lead\\\">\\n        Her er noen av medlemmene i Alternativet.\\n    </p>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/om/folk.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],131:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<!--\\n\\t@todo Lag «avtal en date»-knapp på kontaktpersoner\\n-->\\n<div class=\\\"panel-heading\\\">\\n\\tKontakt\\n</div>\\n<div class=\\\"panel-body\\\">\\n\\t<p class=\\\"lead\\\">\\n\\t\\tTa kontakt med oss om du lurer på noe om Alternativet, enten det gjelder politikkutviklingen, organisasjonen,\\n\\t\\tnettplattformene, medlemskapet ditt eller noe helt annet : )\\n\\t</p>\\n\\t<h3>Medlemsservice</h3>\\n\\t<p>\\n\\t\\tSpørsmål om medlemskap:<br>\\n\\t\\t<a href=\\\"mailto:medlem@alternativet.party\\\">medlem@alternativet.party</a><br>\\n\\t\\t<i class=\\\"fa fa-phone\\\"></i> 932 90 567\\n\\t</p>\\n\\t<h3>Kontaktpersoner</h3>\\n\\t<p>\\n\\t\\t<strong><a href=\\\"mailto:kasbschj@gmail.com\\\">Kay Asbjørn Knutsen Schjørlien</a></strong><br>\\n\\t\\tLeder<br>\\n\\t\\t<i class=\\\"fa fa-phone\\\"></i> 974 72 700\\n\\t</p>\\n\\t<p>\\n\\t\\t<strong><a href=\\\"mailto:marianne.grotte@alternativet.party\\\">Marianne Grøtte</a></strong><br>\\n\\t\\tLeder<br>\\n\\t\\t<i class=\\\"fa fa-phone\\\"></i> 988 11 188\\n\\t</p>\\n\\t<p>\\n\\t\\t<strong><a href=\\\"mailto:mohamedali@hotmail.no\\\">Mohamed Ali Rashid</a></strong><br>\\n\\t\\tMedlems- og frivilligkontakt<br>\\n\\t\\t<i class=\\\"fa fa-phone\\\"></i> 932 90 567\\n\\t</p>\\n\\t<p>\\n\\t\\t<strong><a href=\\\"mailto:leo@alternativet.party\\\">Leo Valen</a></strong><br>\\n\\t\\tKommunikasjon og nettplattformer<br>\\n\\t\\t<i class=\\\"fa fa-phone\\\"></i> 466 65 333 (07:00-08:30 og 17:30-21:00)\\n\\t</p>\\n\\t<h3>Postadresse</h3>\\n\\t<p>\\n\\t\\tTing som må sendes på post (bl. a. erklæringer om registrering av Alternativet i partiregisteret)<br>kan sendes til:<br>\\n\\t\\t</p><address>\\n\\t\\t\\tAlternativet<br>\\n\\t\\t\\tc/o Leo Valen<br>\\n\\t\\t\\tTurbinveien 1<br>\\n\\t\\t\\t0195&nbsp;&nbsp;OSLO\\n\\t\\t</address>\\n\\t<p></p>\\n\\t<h3>Bank og registre</h3>\\n\\t<p>\\n\\t\\tOrganisasjonsnummer: <a href=\\\"https://w2.brreg.no/enhet/sok/detalj.jsp?orgnr=916483511\\\">916 483 511</a><br>\\n\\t\\tBankkonto: 1254.62.29937\\n\\t</p>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/om/kontakt.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],132:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n\\tAlternativet\\n</div>\\n<div class=\\\"panel-body\\\">\\n\\t<p class=\\\"lead\\\">\\n\\t\\tAlternativet har til formål å skape en ny politisk kultur som gjør samfunnet i stand til å møte\\n\\t\\tkrisene vi står overfor.\\n\\t</p>\\n\\t<p>\\n\\t\\tDet skal vi gjøre med mot, åpenhet, humor, empati, raushet og ydmykhet.\\n\\t</p>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/om/om.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],133:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"panel-heading\\\">\\n    Organisasjon\\n</div>\\n<div class=\\\"panel-body\\\">\\n    <p class=\\\"lead\\\">\\n        Alternativet ble stiftet 14. desember 2015 som en politisk organisasjon for å møte krisene\\n        samfunnet står overfor. Det skal vi gjøre med kjerneverdiene mot, åpenhet, humor, empati, raushet og ydmykhet.\\n    </p>\\n\\n    <p>\\n        Alternativets <a href=\\\"/#!/manifest\\\">manifest</a>,\\n        kjerneverdiene og <a href=\\\"http://www.fn.no/Tema/FNs-baerekraftsmaal\\\">FNs bærekraftsmål</a> danner grunnlaget\\n        for Alternativets politikkutvikling. Alternativets organisering er fastsatt i <a href=\\\"https://dokumenter.alternativet.io/Vedtekter.pdf\\\">vedtektene</a>.\\n    </p>\\n\\n    <h3>Landsmøtet</h3>\\n    <p>\\n        Landsmøtet er Alternativets høyeste myndighet og treffer beslutninger kontinuerlig gjennom partiets nettbaserte plattformer.\\n        Alle medlemmer har forslagsrett, talerett og stemmerett i landsmøtet.\\n    </p>\\n    <p>\\n        I tillegg til løpende saker, skal landsmøtet årlig behandle partiets årsmelding, regnskap og budsjett,\\n        velge hovedstyre og revisor, og behandle endringer av vedtektene.\\n    </p>\\n    <h3>Hovedstyret</h3>\\n    <p>\\n        Hovedstyret er Alternativets utøvende organ, og har ansvar for å iverksette landsmøtets vedtak.\\n    </p>\\n    <p>\\n        Hovedstyret er per idag et midlertidig styre (interimstyre) som ble valgt ved stiftingen av Alternativet.<br>\\n        Det skal velges nytt styre innen 31. mars 2016.\\n    </p>\\n    <p>\\n        <strong>Hovedstyrets sammensetning:</strong>\\n    </p>\\n    <ul>\\n        <li>Marianne Grøtte (leder)</li>\\n        <li>Kay Asbjørn Knutsen Schjørlien (leder)</li>\\n        <li>Ola Braadland</li>\\n        <li>Ingrid Kvamme Fredriksen</li>\\n        <li>Mona Nesje</li>\\n        <li>Mari Maaø Nilssen</li>\\n        <li>Mohamed Ali Rashid</li>\\n        <li>Leo Valen</li>\\n    </ul>\\n\\n    <h3>Lokallag</h3>\\n    <p>Lokallagene utformer kommune- og bydelspolitikken.</p>\\n    <p>Der Alternativet oppnår representasjon i de folkevalgte organene, har lokallaget ansvar for å følge opp representanter i kommunestyrer, bydelsutvvalg og andre politisk utnevnte verv.</p>\\n    <p>Alternativet har lokallag under etablering i Gamle Oslo, Stavanger, Bodø og Sør-Varanger.</p>\\n\\n    <h3>Fylkeslag</h3>\\n    <p>Fylkeslagene koordinerer lokallagene og utformer fylkespolitikken.</p>\\n    <p>Der Alternativet oppnår representasjon i de folkevalgte organene, har fylkeslaget ansvar for å følge opp representanter i fylkestinget og fylkets representanter i Stortinget.</p>\\n    <p>Alternativet har fylkeslag under etablering i Oslo, Rogaland og Nordland.</p>\\n</div>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/om/organisasjon.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],134:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"container placeholder\\\">\\n    <img src=\\\"/images/alternativet-placeholder.png\\\" alt=\\\"Alternativet\\\" width=\\\"250\\\">\\n    <p>\\n        Alternativet er en plattform for å skape en ny involverende politisk kultur.<br>\\n        Det skal vi gjøre med mot, åpenhet, humor, empati, raushet og ydmykhet.\\n    </p>\\n    <p class=\\\"additional\\\">\\n        Inntil videre skjer det meste <a href=\\\"https://www.facebook.com/groups/528114394010043/\\\">på facebook</a>.<br>\\n        Alle er velkommen i gruppa, ingen forpliktelser.\\n    </p>\\n    <p class=\\\"additional\\\">\\n        Du kan også kontakte oss <a href=\\\"mailto:post@alternativet.io\\\">på epost</a> eller telefon:\\n        Kay Asbjørn Schjørlien, 974 72 700. Marianne Grøtte, 988 11 188.<br>\\n        Mari Maaø Nilssen, 910 00 533. Mohamed Ali Rashid, 932 90 567. Leo Valen, 466 65 533.\\n    </p>\\n    <p>\\n        <b><a href=\\\"https://dokumenter.alternativet.io/Manifest.pdf\\\">Alternativets manifest <i class=\\\"fa fa-caret-right\\\"></i></a></b>\\n    </p>\\n</div>\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/placeholder.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],135:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  data: function data() {\n    return {\n      user: {\n        name: null,\n        birth_date: null,\n        postal_code: null,\n        email: null,\n        password: null,\n        password_confirmation: null\n      },\n      messages: []\n    };\n  },\n\n  methods: {\n    registerUser: function registerUser(e) {\n      e.preventDefault();\n      var that = this;\n\n      client({ path: '/register', entity: this.user }).then(function (response) {\n        that.getUserData();\n      }, function (response, status) {\n        that.messages = [];\n        if (response.status && response.status.code === 422) {\n          that.messages = [];\n          for (var key in response.entity) {\n            that.messages.push({ type: 'danger', message: response.entity[key] });\n          }\n        }\n      });\n    },\n\n    getUserData: function getUserData() {\n      var that = this;\n      client({ path: '/users/me' }).then(function (response) {\n        that.$dispatch('userHasLoggedIn', response.entity.user);\n        that.$route.router.go('/auth/profile');\n      });\n    }\n  }\n};\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen\\\">\\n\\n\\t<form class=\\\"form-horizontal\\\" role=\\\"form\\\" v-on:submit=\\\"registerUser\\\">\\n\\n\\t\\t<div id=\\\"alerts\\\" v-if=\\\"messages.length > 0\\\">\\n\\t\\t\\t<div v-for=\\\"message in messages\\\" class=\\\"alert alert-{{ message.type }} alert-dismissible\\\" role=\\\"alert\\\">\\n\\t\\t\\t\\t{{ message.message }}\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">Fornavn og etternavn</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"name\\\" class=\\\"form-control\\\" v-model=\\\"user.name\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">Fødselsdato</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" v-model=\\\"user.birth_date\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">Postnummer</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" v-model=\\\"user.postal_code\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">E-post</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"email\\\" class=\\\"form-control\\\" v-model=\\\"user.email\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">Passord</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"password\\\" class=\\\"form-control\\\" v-model=\\\"user.password\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label class=\\\"col-md-4 control-label\\\">Bekreft passord</label>\\n\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t<input type=\\\"password\\\" class=\\\"form-control\\\" v-model=\\\"user.password_confirmation\\\">\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<div class=\\\"col-md-6 col-md-offset-4\\\">\\n\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\n\\t\\t\\t\\t\\t<i class=\\\"fa fa-btn fa-sign-in\\\"></i> Send innmelding\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</form>\\n\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/register.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],136:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n<div class=\\\"container app-screen manifest\\\">\\n    <div class=\\\"col-md-1\\\">\\n\\n    </div>\\n    <div class=\\\"col-md-9\\\">\\n        <header>\\n            <h2>Spørsmål og svar</h2>\\n            <p>\\n                Alternativet er et nytt politisk parti, helt i startgropa. Hvis du ikke finner svar på det du lurer\\n                på om Alternativet, må du gjerne kontakte oss!\\n            </p>\\n        </header>\\n        <p>\\n            <span class=\\\"lead\\\">Hva er Alternativet?</span><br>\\n            Alternativet er et nytt politisk parti for å involvere flere i de demokratiske prosessene som styrer staten,\\n            fylkeskommunene og kommunene.\\n        </p>\\n        <p>\\n            <span class=\\\"lead\\\">Hvordan startet Alternativet?</span><br>\\n        </p>\\n        <p>\\n            <span class=\\\"lead\\\">Hva er poenget med et politisk parti uten politikk?</span><br>\\n        </p>\\n        <p><span class=\\\"lead\\\">Alternativet er glede.</span><br>Uten humor ingen kreativitet. Uten kreativitet ingen gode idéer. Uten gode idéer ingen skaperkraft. Uten skaperkraft intet resultat.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er en positiv motkraft.</span><br>En lyst til å komme med reelle og seriøse svar på miljø- og ressurskrisen som jorden befinner seg i. En krise som for hver dag forverrer våre egne, våre barns og våre barnebarns muligheter for et godt, rikt og meningsfylt liv.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er nysgjerrighet</span><br>på hvordan vi utvikler bygdene, byene og nasjonene våre. Vi vil selv ta vare på økonomien og de demokratiske beslutningene på arbeidsplassene og i lokalsamfunnene der vi lever våre liv. Vi mister likevel ikke det globale utsynet og ansvaret for å finne felles løsninger med både våre naboer og med de som bor på den andre siden av kloden.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er samarbeid.</span><br>Vi vet at private virksomheter ikke kan løse problemene alene. Det kan heller ikke de offentlige institusjonene eller organisasjonslivet gjøre. Derfor skal vi oppfinne helt nye koblinger og samarbeidsmodeller, der vi bruker det beste fra det private, det offentlige og organisasjonslivet.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er åpenhet.</span><br>Vi vil prøve nye idéer og skape løsninger som virker. Alternativet er også streben etter å forstå komplekse sammenhenger og motstå fristelsen å benytte forenklede argumenter og behagelige illusjoner.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er mot</span><br>til å se problemene i øynene. Men også mot til å møte framtida vi har sammen.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er allerede virkelighet.</span><br>Rundt om på kloden vår blir det i vår tid skapt helt nye institusjonstyper, organisasjonsformer og sosiale nettverk. Om det skjer i Oslo, København, Seoul, Durban eller Rio betyr ikke så mye hver for seg, men tilsammen utgjør de en levedyktig global endringsbølge.</p>\\n        <p><span class=\\\"lead\\\">Alternativet er for deg</span><br>som merker at noe er i bevegelse. Som har en fornemmelse av at noe nytt er i ferd med å avløse det gamle. En annen måte å se på demokrati, vekst, arbeidsliv, ansvar og livskvalitet.<br>\\n            Det er Alternativet.</p>\\n    </div>\\n    <div class=\\\"col-md-2\\\">\\n\\n    </div>\\n</div><!-- End container -->\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/sporsmal.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],137:[function(require,module,exports){\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<nav-component></nav-component>\\n\\n<div class=\\\"container app-screen\\\">\\n\\t<div class=\\\"row\\\">\\n\\t\\t<div class=\\\"tab-content\\\">\\n\\t\\t\\t<div class=\\\"tab-pane\\\">\\n\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"panel-heading\\\">\\n\\t\\t\\t\\t\\t\\tTerms of service\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Profile Selection notice panel -->\\n\\t\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n<pre>The MIT License (MIT)\\n\\nCopyright (c) 2015 Yourname\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n</pre>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div><!-- End tab panel -->\\n\\t\\t</div><!-- End tab content -->\\n\\t</div><!-- End tab panes col-md-9 -->\\n</div><!-- End container -->\\n\\n<footer-component></footer-component>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"/Users/lva/Sites/alternativet/resources/assets/js/compiled/pages/terms.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, module.exports.template)\n  }\n})()}\n},{\"vue\":94,\"vue-hot-reload-api\":27}],138:[function(require,module,exports){\n'use strict';\n\nvar config = {\n  env: 'development',\n  api: {\n    base_url: 'http://api.development.alternativet.io',\n    defaultRequest: {\n      headers: {\n        'X-Requested-With': 'rest.js',\n        'Content-Type': 'application/json'\n      }\n    }\n  },\n  social: {\n    facebook: '',\n    twitter: '',\n    github: ''\n  },\n  debug: true\n};\n\nmodule.exports = config;\n\n},{}],139:[function(require,module,exports){\n(function (process){\n'use strict';\n\nvar env = process.env.APP_ENV || 'development';\n\nvar config = {\n  development: require('./development.config'),\n  production: require('./production.config'),\n  staging: require('./staging.config')\n};\n\nmodule.exports = config[env];\n\n}).call(this,require('_process'))\n\n},{\"./development.config\":138,\"./production.config\":140,\"./staging.config\":141,\"_process\":1}],140:[function(require,module,exports){\n'use strict';\n\nvar config = {\n  env: 'production',\n  api: {\n    base_url: 'https://api.alternativet.io',\n    defaultRequest: {\n      headers: {\n        'X-Requested-With': 'rest.js',\n        'Content-Type': 'application/json'\n      }\n    }\n  },\n  social: {\n    facebook: '',\n    twitter: '',\n    github: ''\n  },\n  debug: false\n};\n\nmodule.exports = config;\n\n},{}],141:[function(require,module,exports){\n'use strict';\n\nvar config = {\n  env: 'staging',\n  api: {\n    base_url: 'https://api.staging.alternativet.io',\n    defaultRequest: {\n      headers: {\n        'X-Requested-With': 'rest.js',\n        'Content-Type': 'application/json'\n      }\n    }\n  },\n  social: {\n    facebook: '',\n    twitter: '',\n    github: ''\n  },\n  debug: true\n};\nmodule.exports = config;\n\n},{}],142:[function(require,module,exports){\n'use strict';\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor;\n\n\t\tinterceptor = require('rest/interceptor');\n\n\t\t/**\n   * Authenticates the request using JWT Authentication\n   *\n   * @param {Client} [client] client to wrap\n   * @param {Object} config\n   *\n   * @returns {Client}\n   */\n\t\treturn interceptor({\n\t\t\trequest: function request(_request, config) {\n\t\t\t\tvar token, headers;\n\n\t\t\t\ttoken = localStorage.getItem('jwt-token');\n\t\t\t\theaders = _request.headers || (_request.headers = {});\n\n\t\t\t\tif (token !== null && token !== 'undefined') {\n\t\t\t\t\theaders.Authorization = token;\n\t\t\t\t}\n\n\t\t\t\treturn _request;\n\t\t\t},\n\t\t\tresponse: function response(_response) {\n\t\t\t\tif (_response.status && _response.status.code == 401) {\n\t\t\t\t\tlocalStorage.removeItem('jwt-token');\n\t\t\t\t}\n\t\t\t\tif (_response.headers && _response.headers.Authorization) {\n\t\t\t\t\tlocalStorage.setItem('jwt-token', _response.headers.Authorization);\n\t\t\t\t}\n\t\t\t\tif (_response.entity && _response.entity.token && _response.entity.token.length > 10) {\n\t\t\t\t\tlocalStorage.setItem('jwt-token', 'Bearer ' + _response.entity.token);\n\t\t\t\t}\n\t\t\t\treturn _response;\n\t\t\t}\n\t\t});\n\t});\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n\tmodule.exports = factory(require);\n}\n// Boilerplate for AMD and Node\n);\n\n},{\"rest/interceptor\":7}],143:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n\n  configRouter: function configRouter(router) {\n\n    router.map({\n      '/auth': {\n        component: require('./compiled/pages/auth.vue'),\n        subRoutes: {\n          '/profile': {\n            component: require('./compiled/pages/auth/profile.vue'),\n            auth: true\n          },\n          '/logout': {\n            component: require('./compiled/pages/auth/logout.vue'),\n            auth: true\n          }\n        }\n      },\n      '/om': {\n        component: require('./compiled/pages/om.vue'),\n        subRoutes: {\n          '/': {\n            component: require('./compiled/pages/om/om.vue')\n          },\n          '/om': {\n            component: require('./compiled/pages/om/om.vue')\n          },\n          '/kontakt': {\n            component: require('./compiled/pages/om/kontakt.vue')\n          },\n          '/folk': {\n            component: require('./compiled/pages/om/folk.vue')\n          },\n          '/organisasjon': {\n            component: require('./compiled/pages/om/organisasjon.vue')\n          }\n        }\n      },\n      '/dogs': {\n        component: require('./compiled/pages/dogs.vue'),\n        auth: true,\n        subRoutes: {\n          '/': {\n            component: require('./compiled/pages/dogs/index.vue')\n          },\n          '/:id': {\n            component: require('./compiled/pages/dogs/show.vue')\n          },\n          '/create': {\n            component: require('./compiled/pages/dogs/create.vue')\n          }\n        }\n      },\n      '/login': {\n        component: require('./compiled/pages/login.vue'),\n        guest: true\n      },\n      '/register': {\n        component: require('./compiled/pages/register.vue'),\n        guest: true\n      },\n      '/manifest': {\n        component: require('./compiled/pages/manifest.vue')\n      },\n      '/terms': {\n        component: require('./compiled/pages/terms.vue')\n      },\n      '/placeholder': {\n        component: require('./compiled/pages/placeholder.vue')\n      },\n      '/sporsmal': {\n        component: require('./compiled/pages/sporsmal.vue')\n      },\n      '*': {\n        component: require('./compiled/pages/404.vue')\n      }\n    });\n\n    router.alias({\n      '': '/om',\n      '/auth': '/login'\n    });\n\n    router.beforeEach(function (transition) {\n\n      var token = localStorage.getItem('jwt-token');\n      if (transition.to.auth) {\n        if (!token || token === null) {\n          transition.redirect('/auth/login');\n        }\n      }\n      if (transition.to.guest) {\n        if (token) {\n          transition.redirect('/');\n        }\n      }\n      transition.next();\n    });\n  }\n};\n\n},{\"./compiled/pages/404.vue\":119,\"./compiled/pages/auth.vue\":120,\"./compiled/pages/auth/logout.vue\":121,\"./compiled/pages/auth/profile.vue\":122,\"./compiled/pages/dogs.vue\":123,\"./compiled/pages/dogs/create.vue\":124,\"./compiled/pages/dogs/index.vue\":125,\"./compiled/pages/dogs/show.vue\":126,\"./compiled/pages/login.vue\":127,\"./compiled/pages/manifest.vue\":128,\"./compiled/pages/om.vue\":129,\"./compiled/pages/om/folk.vue\":130,\"./compiled/pages/om/kontakt.vue\":131,\"./compiled/pages/om/om.vue\":132,\"./compiled/pages/om/organisasjon.vue\":133,\"./compiled/pages/placeholder.vue\":134,\"./compiled/pages/register.vue\":135,\"./compiled/pages/sporsmal.vue\":136,\"./compiled/pages/terms.vue\":137}]},{},[115])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"file":"app.js","sourceRoot":"/source/"}